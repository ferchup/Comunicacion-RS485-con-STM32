
Experiencia_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004268  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080043fc  080043fc  000143fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004438  08004438  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004438  08004438  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004438  08004438  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800443c  0800443c  0001443c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000055c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000568  20000568  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c2c0  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002228  00000000  00000000  0002c33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000920  00000000  00000000  0002e568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006eb  00000000  00000000  0002ee88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000210d8  00000000  00000000  0002f573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e489  00000000  00000000  0005064b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5c12  00000000  00000000  0005ead4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002330  00000000  00000000  001246e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00126a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080043e4 	.word	0x080043e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080043e4 	.word	0x080043e4

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <crc_16>:
 * string of which the beginning has been passed to the function. The number of
 * bytes to check is also a parameter. The number of the bytes in the string is
 * limited by the constant SIZE_MAX.
 */

uint16_t crc_16( const unsigned char *input_str, size_t num_bytes ) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]

	uint16_t crc;
	const unsigned char *ptr;
	size_t a;

	if ( ! crc_tab16_init ) init_crc16_tab();
 80001ee:	4b17      	ldr	r3, [pc, #92]	; (800024c <crc_16+0x68>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	f083 0301 	eor.w	r3, r3, #1
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <crc_16+0x1c>
 80001fc:	f000 f82a 	bl	8000254 <init_crc16_tab>

	crc = CRC_START_16;
 8000200:	2300      	movs	r3, #0
 8000202:	82fb      	strh	r3, [r7, #22]
	ptr = input_str;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	613b      	str	r3, [r7, #16]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8000208:	693b      	ldr	r3, [r7, #16]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d018      	beq.n	8000240 <crc_16+0x5c>
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	e011      	b.n	8000238 <crc_16+0x54>

		crc = (crc >> 8) ^ crc_tab16[ (crc ^ (uint16_t) *ptr++) & 0x00FF ];
 8000214:	8afb      	ldrh	r3, [r7, #22]
 8000216:	0a1b      	lsrs	r3, r3, #8
 8000218:	b29a      	uxth	r2, r3
 800021a:	8af9      	ldrh	r1, [r7, #22]
 800021c:	693b      	ldr	r3, [r7, #16]
 800021e:	1c58      	adds	r0, r3, #1
 8000220:	6138      	str	r0, [r7, #16]
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	404b      	eors	r3, r1
 8000226:	b2db      	uxtb	r3, r3
 8000228:	4909      	ldr	r1, [pc, #36]	; (8000250 <crc_16+0x6c>)
 800022a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800022e:	4053      	eors	r3, r2
 8000230:	82fb      	strh	r3, [r7, #22]
	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	3301      	adds	r3, #1
 8000236:	60fb      	str	r3, [r7, #12]
 8000238:	68fa      	ldr	r2, [r7, #12]
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	429a      	cmp	r2, r3
 800023e:	d3e9      	bcc.n	8000214 <crc_16+0x30>
	}

	return crc;
 8000240:	8afb      	ldrh	r3, [r7, #22]

}  /* crc_16 */
 8000242:	4618      	mov	r0, r3
 8000244:	3718      	adds	r7, #24
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	20000028 	.word	0x20000028
 8000250:	2000002c 	.word	0x2000002c

08000254 <init_crc16_tab>:
 * that can be used directly in the XOR arithmetic in the algorithm. This
 * lookup table is calculated by the init_crc16_tab() routine, the first time
 * the CRC function is called.
 */

static void init_crc16_tab( void ) {
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
 800025a:	2300      	movs	r3, #0
 800025c:	80fb      	strh	r3, [r7, #6]
 800025e:	e029      	b.n	80002b4 <init_crc16_tab+0x60>

		crc = 0;
 8000260:	2300      	movs	r3, #0
 8000262:	807b      	strh	r3, [r7, #2]
		c   = i;
 8000264:	88fb      	ldrh	r3, [r7, #6]
 8000266:	803b      	strh	r3, [r7, #0]

		for (j=0; j<8; j++) {
 8000268:	2300      	movs	r3, #0
 800026a:	80bb      	strh	r3, [r7, #4]
 800026c:	e017      	b.n	800029e <init_crc16_tab+0x4a>

			if ( (crc ^ c) & 0x0001 ) crc = ( crc >> 1 ) ^ CRC_POLY_16;
 800026e:	887a      	ldrh	r2, [r7, #2]
 8000270:	883b      	ldrh	r3, [r7, #0]
 8000272:	4053      	eors	r3, r2
 8000274:	b29b      	uxth	r3, r3
 8000276:	f003 0301 	and.w	r3, r3, #1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d006      	beq.n	800028c <init_crc16_tab+0x38>
 800027e:	887b      	ldrh	r3, [r7, #2]
 8000280:	085b      	lsrs	r3, r3, #1
 8000282:	b29a      	uxth	r2, r3
 8000284:	4b11      	ldr	r3, [pc, #68]	; (80002cc <init_crc16_tab+0x78>)
 8000286:	4053      	eors	r3, r2
 8000288:	807b      	strh	r3, [r7, #2]
 800028a:	e002      	b.n	8000292 <init_crc16_tab+0x3e>
			else                      crc =   crc >> 1;
 800028c:	887b      	ldrh	r3, [r7, #2]
 800028e:	085b      	lsrs	r3, r3, #1
 8000290:	807b      	strh	r3, [r7, #2]

			c = c >> 1;
 8000292:	883b      	ldrh	r3, [r7, #0]
 8000294:	085b      	lsrs	r3, r3, #1
 8000296:	803b      	strh	r3, [r7, #0]
		for (j=0; j<8; j++) {
 8000298:	88bb      	ldrh	r3, [r7, #4]
 800029a:	3301      	adds	r3, #1
 800029c:	80bb      	strh	r3, [r7, #4]
 800029e:	88bb      	ldrh	r3, [r7, #4]
 80002a0:	2b07      	cmp	r3, #7
 80002a2:	d9e4      	bls.n	800026e <init_crc16_tab+0x1a>
		}

		crc_tab16[i] = crc;
 80002a4:	88fb      	ldrh	r3, [r7, #6]
 80002a6:	490a      	ldr	r1, [pc, #40]	; (80002d0 <init_crc16_tab+0x7c>)
 80002a8:	887a      	ldrh	r2, [r7, #2]
 80002aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=0; i<256; i++) {
 80002ae:	88fb      	ldrh	r3, [r7, #6]
 80002b0:	3301      	adds	r3, #1
 80002b2:	80fb      	strh	r3, [r7, #6]
 80002b4:	88fb      	ldrh	r3, [r7, #6]
 80002b6:	2bff      	cmp	r3, #255	; 0xff
 80002b8:	d9d2      	bls.n	8000260 <init_crc16_tab+0xc>
	}

	crc_tab16_init = true;
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <init_crc16_tab+0x80>)
 80002bc:	2201      	movs	r2, #1
 80002be:	701a      	strb	r2, [r3, #0]

}  /* init_crc16_tab */
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	ffffa001 	.word	0xffffa001
 80002d0:	2000002c 	.word	0x2000002c
 80002d4:	20000028 	.word	0x20000028

080002d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08c      	sub	sp, #48	; 0x30
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 031c 	add.w	r3, r7, #28
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ee:	4b51      	ldr	r3, [pc, #324]	; (8000434 <MX_GPIO_Init+0x15c>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a50      	ldr	r2, [pc, #320]	; (8000434 <MX_GPIO_Init+0x15c>)
 80002f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b4e      	ldr	r3, [pc, #312]	; (8000434 <MX_GPIO_Init+0x15c>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000302:	61bb      	str	r3, [r7, #24]
 8000304:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000306:	4b4b      	ldr	r3, [pc, #300]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a4a      	ldr	r2, [pc, #296]	; (8000434 <MX_GPIO_Init+0x15c>)
 800030c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	4b48      	ldr	r3, [pc, #288]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031e:	4b45      	ldr	r3, [pc, #276]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a44      	ldr	r2, [pc, #272]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000328:	6153      	str	r3, [r2, #20]
 800032a:	4b42      	ldr	r3, [pc, #264]	; (8000434 <MX_GPIO_Init+0x15c>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000332:	613b      	str	r3, [r7, #16]
 8000334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000336:	4b3f      	ldr	r3, [pc, #252]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a3e      	ldr	r2, [pc, #248]	; (8000434 <MX_GPIO_Init+0x15c>)
 800033c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b3c      	ldr	r3, [pc, #240]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800034e:	4b39      	ldr	r3, [pc, #228]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a38      	ldr	r2, [pc, #224]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000354:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	4b36      	ldr	r3, [pc, #216]	; (8000434 <MX_GPIO_Init+0x15c>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000366:	4b33      	ldr	r3, [pc, #204]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a32      	ldr	r2, [pc, #200]	; (8000434 <MX_GPIO_Init+0x15c>)
 800036c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000370:	6153      	str	r3, [r2, #20]
 8000372:	4b30      	ldr	r3, [pc, #192]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	f244 0181 	movw	r1, #16513	; 0x4081
 8000384:	482c      	ldr	r0, [pc, #176]	; (8000438 <MX_GPIO_Init+0x160>)
 8000386:	f000 ff79 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_E_GPIO_Port, RS485_E_Pin, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000390:	482a      	ldr	r0, [pc, #168]	; (800043c <MX_GPIO_Init+0x164>)
 8000392:	f000 ff73 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2140      	movs	r1, #64	; 0x40
 800039a:	4829      	ldr	r0, [pc, #164]	; (8000440 <MX_GPIO_Init+0x168>)
 800039c:	f000 ff6e 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80003a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80003aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ac:	2300      	movs	r3, #0
 80003ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80003b0:	f107 031c 	add.w	r3, r7, #28
 80003b4:	4619      	mov	r1, r3
 80003b6:	4823      	ldr	r0, [pc, #140]	; (8000444 <MX_GPIO_Init+0x16c>)
 80003b8:	f000 fdd6 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80003bc:	f244 0381 	movw	r3, #16513	; 0x4081
 80003c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2300      	movs	r3, #0
 80003cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ce:	f107 031c 	add.w	r3, r7, #28
 80003d2:	4619      	mov	r1, r3
 80003d4:	4818      	ldr	r0, [pc, #96]	; (8000438 <MX_GPIO_Init+0x160>)
 80003d6:	f000 fdc7 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_E_Pin;
 80003da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	2301      	movs	r3, #1
 80003e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2300      	movs	r3, #0
 80003ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_E_GPIO_Port, &GPIO_InitStruct);
 80003ec:	f107 031c 	add.w	r3, r7, #28
 80003f0:	4619      	mov	r1, r3
 80003f2:	4812      	ldr	r0, [pc, #72]	; (800043c <MX_GPIO_Init+0x164>)
 80003f4:	f000 fdb8 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80003f8:	2340      	movs	r3, #64	; 0x40
 80003fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000404:	2300      	movs	r3, #0
 8000406:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000408:	f107 031c 	add.w	r3, r7, #28
 800040c:	4619      	mov	r1, r3
 800040e:	480c      	ldr	r0, [pc, #48]	; (8000440 <MX_GPIO_Init+0x168>)
 8000410:	f000 fdaa 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000414:	2380      	movs	r3, #128	; 0x80
 8000416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000418:	2300      	movs	r3, #0
 800041a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000420:	f107 031c 	add.w	r3, r7, #28
 8000424:	4619      	mov	r1, r3
 8000426:	4806      	ldr	r0, [pc, #24]	; (8000440 <MX_GPIO_Init+0x168>)
 8000428:	f000 fd9e 	bl	8000f68 <HAL_GPIO_Init>

}
 800042c:	bf00      	nop
 800042e:	3730      	adds	r7, #48	; 0x30
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40021000 	.word	0x40021000
 8000438:	48000400 	.word	0x48000400
 800043c:	48001400 	.word	0x48001400
 8000440:	48001800 	.word	0x48001800
 8000444:	48000800 	.word	0x48000800

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b0c4      	sub	sp, #272	; 0x110
 800044c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044e:	f000 fb97 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000452:	f000 f875 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000456:	f7ff ff3f 	bl	80002d8 <MX_GPIO_Init>
  MX_RTC_Init();
 800045a:	f000 f8df 	bl	800061c <MX_RTC_Init>
  MX_USART3_UART_Init();
 800045e:	f000 f9c3 	bl	80007e8 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000462:	f000 f991 	bl	8000788 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_MspInit(&huart1);
 8000466:	482c      	ldr	r0, [pc, #176]	; (8000518 <main+0xd0>)
 8000468:	f000 f9ee 	bl	8000848 <HAL_UART_MspInit>
  HAL_UART_MspInit(&huart3);
 800046c:	482b      	ldr	r0, [pc, #172]	; (800051c <main+0xd4>)
 800046e:	f000 f9eb 	bl	8000848 <HAL_UART_MspInit>

  HAL_GPIO_WritePin(RS485_E_GPIO_Port, RS485_E_Pin, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000478:	4829      	ldr	r0, [pc, #164]	; (8000520 <main+0xd8>)
 800047a:	f000 feff 	bl	800127c <HAL_GPIO_WritePin>
  if(HAL_UART_Receive_IT(&huart1, &RxByte, 1) != HAL_OK)
 800047e:	2201      	movs	r2, #1
 8000480:	4928      	ldr	r1, [pc, #160]	; (8000524 <main+0xdc>)
 8000482:	4825      	ldr	r0, [pc, #148]	; (8000518 <main+0xd0>)
 8000484:	f002 fd82 	bl	8002f8c <HAL_UART_Receive_IT>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <main+0x4a>
  {
	  Error_Handler();
 800048e:	f000 f8bf 	bl	8000610 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t message_decoded[250] = {0};
 8000492:	2300      	movs	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	22f6      	movs	r2, #246	; 0xf6
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 ff66 	bl	8004370 <memset>
  uint16_t ns_rec;
  uint8_t ack, size;
  uint8_t ackRecv = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	HAL_Delay(1000);
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
	HAL_Delay(1000);
#else
	if(NewMessage)
 80004aa:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <main+0xe0>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0fb      	beq.n	80004aa <main+0x62>
	{
		NewMessage = 0;
 80004b2:	4b1d      	ldr	r3, [pc, #116]	; (8000528 <main+0xe0>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80004b8:	2201      	movs	r2, #1
 80004ba:	2180      	movs	r1, #128	; 0x80
 80004bc:	481b      	ldr	r0, [pc, #108]	; (800052c <main+0xe4>)
 80004be:	f000 fedd 	bl	800127c <HAL_GPIO_WritePin>
		if(RS485_decode_packet(RxData, &packet_size, message_decoded, &size, &ns_rec, &ack))	//CRC correcto
 80004c2:	f107 0008 	add.w	r0, r7, #8
 80004c6:	f107 020c 	add.w	r2, r7, #12
 80004ca:	1db9      	adds	r1, r7, #6
 80004cc:	f107 0309 	add.w	r3, r7, #9
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	f107 030a 	add.w	r3, r7, #10
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	4603      	mov	r3, r0
 80004da:	4815      	ldr	r0, [pc, #84]	; (8000530 <main+0xe8>)
 80004dc:	f000 faac 	bl	8000a38 <RS485_decode_packet>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d011      	beq.n	800050a <main+0xc2>
		{
			ns = ns_rec;
 80004e6:	897a      	ldrh	r2, [r7, #10]
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <main+0xec>)
 80004ea:	801a      	strh	r2, [r3, #0]
			RS485_create_packet(TxData, &packet_size, (uint8_t *)"", 1);
 80004ec:	1db9      	adds	r1, r7, #6
 80004ee:	2301      	movs	r3, #1
 80004f0:	4a11      	ldr	r2, [pc, #68]	; (8000538 <main+0xf0>)
 80004f2:	4812      	ldr	r0, [pc, #72]	; (800053c <main+0xf4>)
 80004f4:	f000 fa58 	bl	80009a8 <RS485_create_packet>
			RS485_transmit_data(TxData, packet_size);
 80004f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80004fc:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	4619      	mov	r1, r3
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <main+0xf4>)
 8000506:	f000 fa2f 	bl	8000968 <RS485_transmit_data>
		}
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	4807      	ldr	r0, [pc, #28]	; (800052c <main+0xe4>)
 8000510:	f000 feb4 	bl	800127c <HAL_GPIO_WritePin>
	if(NewMessage)
 8000514:	e7c9      	b.n	80004aa <main+0x62>
 8000516:	bf00      	nop
 8000518:	20000454 	.word	0x20000454
 800051c:	200004dc 	.word	0x200004dc
 8000520:	48001400 	.word	0x48001400
 8000524:	2000024d 	.word	0x2000024d
 8000528:	2000024c 	.word	0x2000024c
 800052c:	48000400 	.word	0x48000400
 8000530:	20000254 	.word	0x20000254
 8000534:	20000250 	.word	0x20000250
 8000538:	080043fc 	.word	0x080043fc
 800053c:	20000354 	.word	0x20000354

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b0a6      	sub	sp, #152	; 0x98
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800054a:	2228      	movs	r2, #40	; 0x28
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 ff0e 	bl	8004370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2258      	movs	r2, #88	; 0x58
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 ff00 	bl	8004370 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000570:	2309      	movs	r3, #9
 8000572:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000574:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000578:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057a:	2301      	movs	r3, #1
 800057c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800057e:	2301      	movs	r3, #1
 8000580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000584:	2302      	movs	r3, #2
 8000586:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000592:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fe81 	bl	80012ac <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005b0:	f000 f82e 	bl	8000610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005ce:	2102      	movs	r1, #2
 80005d0:	4618      	mov	r0, r3
 80005d2:	f001 febf 	bl	8002354 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005dc:	f000 f818 	bl	8000610 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <SystemClock_Config+0xcc>)
 80005e2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005f0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4618      	mov	r0, r3
 80005f6:	f002 f8cd 	bl	8002794 <HAL_RCCEx_PeriphCLKConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000600:	f000 f806 	bl	8000610 <Error_Handler>
  }
}
 8000604:	bf00      	nop
 8000606:	3798      	adds	r7, #152	; 0x98
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	00010005 	.word	0x00010005

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000618:	e7fe      	b.n	8000618 <Error_Handler+0x8>
	...

0800061c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_RTC_Init+0x44>)
 8000622:	4a10      	ldr	r2, [pc, #64]	; (8000664 <MX_RTC_Init+0x48>)
 8000624:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_RTC_Init+0x44>)
 8000628:	2200      	movs	r2, #0
 800062a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_RTC_Init+0x44>)
 800062e:	227f      	movs	r2, #127	; 0x7f
 8000630:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_RTC_Init+0x44>)
 8000634:	22ff      	movs	r2, #255	; 0xff
 8000636:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_RTC_Init+0x44>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_RTC_Init+0x44>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_RTC_Init+0x44>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_RTC_Init+0x44>)
 800064c:	f002 fac0 	bl	8002bd0 <HAL_RTC_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000656:	f7ff ffdb 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2000022c 	.word	0x2000022c
 8000664:	40002800 	.word	0x40002800

08000668 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <HAL_RTC_MspInit+0x44>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d111      	bne.n	800069e <HAL_RTC_MspInit+0x36>
 800067a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800067e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	fa93 f3a3 	rbit	r3, r3
 8000686:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000688:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800068a:	fab3 f383 	clz	r3, r3
 800068e:	b2db      	uxtb	r3, r3
 8000690:	461a      	mov	r2, r3
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <HAL_RTC_MspInit+0x48>)
 8000694:	4413      	add	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	461a      	mov	r2, r3
 800069a:	2301      	movs	r3, #1
 800069c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40002800 	.word	0x40002800
 80006b0:	10908100 	.word	0x10908100

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <HAL_MspInit+0x44>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <HAL_MspInit+0x44>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <HAL_MspInit+0x44>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_MspInit+0x44>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <HAL_MspInit+0x44>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_MspInit+0x44>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <NMI_Handler+0x4>

08000702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <MemManage_Handler+0x4>

0800070e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <UsageFault_Handler+0x4>

0800071a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000748:	f000 fa60 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000754:	4802      	ldr	r0, [pc, #8]	; (8000760 <USART1_IRQHandler+0x10>)
 8000756:	f002 fc5d 	bl	8003014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000454 	.word	0x20000454

08000764 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <SystemInit+0x20>)
 800076a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800076e:	4a05      	ldr	r2, [pc, #20]	; (8000784 <SystemInit+0x20>)
 8000770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 800078e:	4a15      	ldr	r2, [pc, #84]	; (80007e4 <MX_USART1_UART_Init+0x5c>)
 8000790:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 8000794:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000798:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_USART1_UART_Init+0x58>)
 80007cc:	f002 fb06 	bl	8002ddc <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007d6:	f7ff ff1b 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000454 	.word	0x20000454
 80007e4:	40013800 	.word	0x40013800

080007e8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_USART3_UART_Init+0x58>)
 80007ee:	4a15      	ldr	r2, [pc, #84]	; (8000844 <MX_USART3_UART_Init+0x5c>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_USART3_UART_Init+0x58>)
 80007f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USART3_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USART3_UART_Init+0x58>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USART3_UART_Init+0x58>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USART3_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_USART3_UART_Init+0x58>)
 800082c:	f002 fad6 	bl	8002ddc <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000836:	f7ff feeb 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200004dc 	.word	0x200004dc
 8000844:	40004800 	.word	0x40004800

08000848 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08c      	sub	sp, #48	; 0x30
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a32      	ldr	r2, [pc, #200]	; (8000930 <HAL_UART_MspInit+0xe8>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d130      	bne.n	80008cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800086a:	4b32      	ldr	r3, [pc, #200]	; (8000934 <HAL_UART_MspInit+0xec>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	4a31      	ldr	r2, [pc, #196]	; (8000934 <HAL_UART_MspInit+0xec>)
 8000870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000874:	6193      	str	r3, [r2, #24]
 8000876:	4b2f      	ldr	r3, [pc, #188]	; (8000934 <HAL_UART_MspInit+0xec>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <HAL_UART_MspInit+0xec>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a2b      	ldr	r2, [pc, #172]	; (8000934 <HAL_UART_MspInit+0xec>)
 8000888:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b29      	ldr	r3, [pc, #164]	; (8000934 <HAL_UART_MspInit+0xec>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800089a:	2330      	movs	r3, #48	; 0x30
 800089c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008aa:	2307      	movs	r3, #7
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4820      	ldr	r0, [pc, #128]	; (8000938 <HAL_UART_MspInit+0xf0>)
 80008b6:	f000 fb57 	bl	8000f68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2100      	movs	r1, #0
 80008be:	2025      	movs	r0, #37	; 0x25
 80008c0:	f000 fa9f 	bl	8000e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008c4:	2025      	movs	r0, #37	; 0x25
 80008c6:	f000 fab8 	bl	8000e3a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80008ca:	e02d      	b.n	8000928 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a1a      	ldr	r2, [pc, #104]	; (800093c <HAL_UART_MspInit+0xf4>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d128      	bne.n	8000928 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <HAL_UART_MspInit+0xec>)
 80008d8:	69db      	ldr	r3, [r3, #28]
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <HAL_UART_MspInit+0xec>)
 80008dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008e0:	61d3      	str	r3, [r2, #28]
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_UART_MspInit+0xec>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_UART_MspInit+0xec>)
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_UART_MspInit+0xec>)
 80008f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008f8:	6153      	str	r3, [r2, #20]
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_UART_MspInit+0xec>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000906:	f44f 7340 	mov.w	r3, #768	; 0x300
 800090a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000918:	2307      	movs	r3, #7
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4807      	ldr	r0, [pc, #28]	; (8000940 <HAL_UART_MspInit+0xf8>)
 8000924:	f000 fb20 	bl	8000f68 <HAL_GPIO_Init>
}
 8000928:	bf00      	nop
 800092a:	3730      	adds	r7, #48	; 0x30
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40013800 	.word	0x40013800
 8000934:	40021000 	.word	0x40021000
 8000938:	48000800 	.word	0x48000800
 800093c:	40004800 	.word	0x40004800
 8000940:	48000c00 	.word	0x48000c00

08000944 <USART_transmit_data>:
  }
}

/* USER CODE BEGIN 1 */
void USART_transmit_data(UART_HandleTypeDef* huart, uint8_t* message, uint16_t size)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	4613      	mov	r3, r2
 8000950:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(huart, (uint8_t *) message, size, 1000);
 8000952:	88fa      	ldrh	r2, [r7, #6]
 8000954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000958:	68b9      	ldr	r1, [r7, #8]
 800095a:	68f8      	ldr	r0, [r7, #12]
 800095c:	f002 fa8c 	bl	8002e78 <HAL_UART_Transmit>
}
 8000960:	bf00      	nop
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <RS485_transmit_data>:
{
	HAL_UART_Receive(huart, message, size, 100000);
}

void RS485_transmit_data(uint8_t* packet, uint16_t packet_size)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(RS485_E_GPIO_Port, RS485_E_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097a:	4809      	ldr	r0, [pc, #36]	; (80009a0 <RS485_transmit_data+0x38>)
 800097c:	f000 fc7e 	bl	800127c <HAL_GPIO_WritePin>
	USART_transmit_data(&huart1, packet, packet_size);
 8000980:	887b      	ldrh	r3, [r7, #2]
 8000982:	461a      	mov	r2, r3
 8000984:	6879      	ldr	r1, [r7, #4]
 8000986:	4807      	ldr	r0, [pc, #28]	; (80009a4 <RS485_transmit_data+0x3c>)
 8000988:	f7ff ffdc 	bl	8000944 <USART_transmit_data>
	HAL_GPIO_WritePin(RS485_E_GPIO_Port, RS485_E_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000992:	4803      	ldr	r0, [pc, #12]	; (80009a0 <RS485_transmit_data+0x38>)
 8000994:	f000 fc72 	bl	800127c <HAL_GPIO_WritePin>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	48001400 	.word	0x48001400
 80009a4:	20000454 	.word	0x20000454

080009a8 <RS485_create_packet>:
 *
 * Las tramas tendra que tener menos de 249 bytes
 *
 */
void RS485_create_packet(uint8_t* packet, uint16_t* packet_size, uint8_t* message, uint8_t ack)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
 80009b4:	70fb      	strb	r3, [r7, #3]
	uint16_t crc;
    uint8_t message_size = strlen((char *)message); // Tamaño del mensaje
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff fc0c 	bl	80001d4 <strlen>
 80009bc:	4603      	mov	r3, r0
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	757b      	strb	r3, [r7, #21]
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <RS485_create_packet+0x8c>)
 80009c4:	881a      	ldrh	r2, [r3, #0]

    // Copiamos el número de trama (NS) - 2 bytes
    memcpy(packet, &ns, 2);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	801a      	strh	r2, [r3, #0]
    // Copiamos el tamaño del mensaje (SIZE_DATA) - 1 bytes (MAX 250 bytes de mensaje)
    memcpy(&packet[2], &message_size, 1);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	3302      	adds	r3, #2
 80009ce:	7d7a      	ldrb	r2, [r7, #21]
 80009d0:	701a      	strb	r2, [r3, #0]
    //Ack
    memcpy(&packet[3], &ack, 1);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	3303      	adds	r3, #3
 80009d6:	78fa      	ldrb	r2, [r7, #3]
 80009d8:	701a      	strb	r2, [r3, #0]
    // Copiamos el mensaje (DATA) - tamaño variable (hasta 249 bytes)
    memcpy(&packet[4], message, message_size);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	3304      	adds	r3, #4
 80009de:	7d7a      	ldrb	r2, [r7, #21]
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f003 fcf0 	bl	80043c8 <memcpy>

    // Calculamos el CRC (usando una función crc_16 adecuada) - 2 bytes
    crc = crc_16((unsigned char *)packet, message_size + 4); // Calculamos CRC sobre NS + SIZE_DATA + DATA
 80009e8:	7d7b      	ldrb	r3, [r7, #21]
 80009ea:	3304      	adds	r3, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f7ff fbf8 	bl	80001e4 <crc_16>
 80009f4:	4603      	mov	r3, r0
 80009f6:	82fb      	strh	r3, [r7, #22]
    memcpy(&packet[4 + message_size], &crc, 2);
 80009f8:	7d7b      	ldrb	r3, [r7, #21]
 80009fa:	3304      	adds	r3, #4
 80009fc:	461a      	mov	r2, r3
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	4413      	add	r3, r2
 8000a02:	8afa      	ldrh	r2, [r7, #22]
 8000a04:	801a      	strh	r2, [r3, #0]

    // Añadimos el byte de fin de trama (END) - 1 byte
    packet[4 + message_size + 2] = 0x0A;  // Byte de fin de trama
 8000a06:	7d7b      	ldrb	r3, [r7, #21]
 8000a08:	3306      	adds	r3, #6
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	220a      	movs	r2, #10
 8000a10:	701a      	strb	r2, [r3, #0]
    packet[4 + message_size + 3] = 0; // Añadimos el final de cadena
 8000a12:	7d7b      	ldrb	r3, [r7, #21]
 8000a14:	3307      	adds	r3, #7
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	4413      	add	r3, r2
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]

    //Devolvemos el tamaño del paquete total
    *packet_size = message_size + 7;
 8000a1e:	7d7b      	ldrb	r3, [r7, #21]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	3307      	adds	r3, #7
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	801a      	strh	r2, [r3, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000250 	.word	0x20000250

08000a38 <RS485_decode_packet>:

uint8_t RS485_decode_packet(uint8_t* packet, uint16_t* packet_size, uint8_t* message, uint8_t* message_size, uint16_t* ns_aux, uint8_t* ack)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	603b      	str	r3, [r7, #0]
	uint16_t crc_rx = 0, crc_calc = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	82bb      	strh	r3, [r7, #20]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	82fb      	strh	r3, [r7, #22]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	b29a      	uxth	r2, r3

	memcpy(ns_aux, packet, 2);
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	801a      	strh	r2, [r3, #0]
	memcpy(message_size, &packet[2], 1);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	781a      	ldrb	r2, [r3, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	701a      	strb	r2, [r3, #0]
	memcpy(ack, &packet[3], 1);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	3303      	adds	r3, #3
 8000a66:	781a      	ldrb	r2, [r3, #0]
 8000a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6a:	701a      	strb	r2, [r3, #0]
	memcpy(message, &packet[4], *message_size);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	1d19      	adds	r1, r3, #4
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f003 fca6 	bl	80043c8 <memcpy>

	memcpy(&crc_rx, &packet[4 + *message_size], 2);
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	3304      	adds	r3, #4
 8000a82:	461a      	mov	r2, r3
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4413      	add	r3, r2
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	82bb      	strh	r3, [r7, #20]
	crc_calc = crc_16((unsigned char *)packet, *message_size + 4);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	3304      	adds	r3, #4
 8000a94:	4619      	mov	r1, r3
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f7ff fba4 	bl	80001e4 <crc_16>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	82fb      	strh	r3, [r7, #22]

	*packet_size = *message_size + 7;
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	3307      	adds	r3, #7
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	801a      	strh	r2, [r3, #0]

	return crc_rx == crc_calc;
 8000aae:	8abb      	ldrh	r3, [r7, #20]
 8000ab0:	8afa      	ldrh	r2, [r7, #22]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	bf0c      	ite	eq
 8000ab6:	2301      	moveq	r3, #1
 8000ab8:	2300      	movne	r3, #0
 8000aba:	b2db      	uxtb	r3, r3
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	if(RxByte != 0x0A)
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_UART_RxCpltCallback+0x54>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b0a      	cmp	r3, #10
 8000ad2:	d00d      	beq.n	8000af0 <HAL_UART_RxCpltCallback+0x2c>
	{
		RxData[RxLen] = RxByte;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_UART_RxCpltCallback+0x58>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_UART_RxCpltCallback+0x54>)
 8000adc:	7819      	ldrb	r1, [r3, #0]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_UART_RxCpltCallback+0x5c>)
 8000ae0:	5499      	strb	r1, [r3, r2]
		RxLen++;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_UART_RxCpltCallback+0x58>)
 8000ae4:	881b      	ldrh	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_UART_RxCpltCallback+0x58>)
 8000aec:	801a      	strh	r2, [r3, #0]
 8000aee:	e005      	b.n	8000afc <HAL_UART_RxCpltCallback+0x38>
	}else
	{
		RxLen = 0;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_UART_RxCpltCallback+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	801a      	strh	r2, [r3, #0]
		NewMessage = 1;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_UART_RxCpltCallback+0x60>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_UART_Receive_IT(&huart1, &RxByte, 1) != HAL_OK)
 8000afc:	2201      	movs	r2, #1
 8000afe:	4906      	ldr	r1, [pc, #24]	; (8000b18 <HAL_UART_RxCpltCallback+0x54>)
 8000b00:	4809      	ldr	r0, [pc, #36]	; (8000b28 <HAL_UART_RxCpltCallback+0x64>)
 8000b02:	f002 fa43 	bl	8002f8c <HAL_UART_Receive_IT>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <HAL_UART_RxCpltCallback+0x4c>
	{
		Error_Handler();
 8000b0c:	f7ff fd80 	bl	8000610 <Error_Handler>
	}
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	2000024d 	.word	0x2000024d
 8000b1c:	2000024e 	.word	0x2000024e
 8000b20:	20000254 	.word	0x20000254
 8000b24:	2000024c 	.word	0x2000024c
 8000b28:	20000454 	.word	0x20000454

08000b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b30:	f7ff fe18 	bl	8000764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	; (8000b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <LoopForever+0xe>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	; (8000b78 <LoopForever+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f003 fc11 	bl	8004380 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5e:	f7ff fc73 	bl	8000448 <main>

08000b62 <LoopForever>:

LoopForever:
    b LoopForever
 8000b62:	e7fe      	b.n	8000b62 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b64:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b70:	08004440 	.word	0x08004440
  ldr r2, =_sbss
 8000b74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b78:	20000568 	.word	0x20000568

08000b7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC1_2_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_Init+0x28>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_Init+0x28>)
 8000b8a:	f043 0310 	orr.w	r3, r3, #16
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f92b 	bl	8000dec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f000 f808 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fd8a 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40022000 	.word	0x40022000

08000bac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_InitTick+0x54>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x58>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f943 	bl	8000e56 <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00e      	b.n	8000bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d80a      	bhi.n	8000bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f000 f90b 	bl	8000e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_InitTick+0x5c>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000000 	.word	0x20000000
 8000c04:	20000008 	.word	0x20000008
 8000c08:	20000004 	.word	0x20000004

08000c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20000564 	.word	0x20000564

08000c34 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000564 	.word	0x20000564

08000c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x44>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <__NVIC_GetPriorityGrouping+0x18>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	db0b      	blt.n	8000cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f003 021f 	and.w	r2, r3, #31
 8000cc8:	4907      	ldr	r1, [pc, #28]	; (8000ce8 <__NVIC_EnableIRQ+0x38>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	095b      	lsrs	r3, r3, #5
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000e100 	.word	0xe000e100

08000cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	db0a      	blt.n	8000d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	490c      	ldr	r1, [pc, #48]	; (8000d38 <__NVIC_SetPriority+0x4c>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	0112      	lsls	r2, r2, #4
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	440b      	add	r3, r1
 8000d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d14:	e00a      	b.n	8000d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4908      	ldr	r1, [pc, #32]	; (8000d3c <__NVIC_SetPriority+0x50>)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	3b04      	subs	r3, #4
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	440b      	add	r3, r1
 8000d2a:	761a      	strb	r2, [r3, #24]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f1c3 0307 	rsb	r3, r3, #7
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	bf28      	it	cs
 8000d5e:	2304      	movcs	r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	2b06      	cmp	r3, #6
 8000d68:	d902      	bls.n	8000d70 <NVIC_EncodePriority+0x30>
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	e000      	b.n	8000d72 <NVIC_EncodePriority+0x32>
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	401a      	ands	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d92:	43d9      	mvns	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	4313      	orrs	r3, r2
         );
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3724      	adds	r7, #36	; 0x24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db8:	d301      	bcc.n	8000dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00f      	b.n	8000dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <SysTick_Config+0x40>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc6:	210f      	movs	r1, #15
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f7ff ff8e 	bl	8000cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <SysTick_Config+0x40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <SysTick_Config+0x40>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	e000e010 	.word	0xe000e010

08000dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ff29 	bl	8000c4c <__NVIC_SetPriorityGrouping>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e14:	f7ff ff3e 	bl	8000c94 <__NVIC_GetPriorityGrouping>
 8000e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	68b9      	ldr	r1, [r7, #8]
 8000e1e:	6978      	ldr	r0, [r7, #20]
 8000e20:	f7ff ff8e 	bl	8000d40 <NVIC_EncodePriority>
 8000e24:	4602      	mov	r2, r0
 8000e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff5d 	bl	8000cec <__NVIC_SetPriority>
}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff31 	bl	8000cb0 <__NVIC_EnableIRQ>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ffa2 	bl	8000da8 <SysTick_Config>
 8000e64:	4603      	mov	r3, r0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e02e      	b.n	8000ede <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d008      	beq.n	8000e9c <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e020      	b.n	8000ede <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 020e 	bic.w	r2, r2, #14
 8000eaa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0201 	bic.w	r2, r2, #1
 8000eba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eca:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d005      	beq.n	8000f0c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2204      	movs	r2, #4
 8000f04:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	e027      	b.n	8000f5c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 020e 	bic.w	r2, r2, #14
 8000f1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0201 	bic.w	r2, r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f34:	2101      	movs	r1, #1
 8000f36:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	4798      	blx	r3
    }
  }
  return status;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f76:	e160      	b.n	800123a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	4013      	ands	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8152 	beq.w	8001234 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d005      	beq.n	8000fa8 <HAL_GPIO_Init+0x40>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d130      	bne.n	800100a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fde:	2201      	movs	r2, #1
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	091b      	lsrs	r3, r3, #4
 8000ff4:	f003 0201 	and.w	r2, r3, #1
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b03      	cmp	r3, #3
 8001014:	d017      	beq.n	8001046 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d123      	bne.n	800109a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	220f      	movs	r2, #15
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	691a      	ldr	r2, [r3, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	6939      	ldr	r1, [r7, #16]
 8001096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0203 	and.w	r2, r3, #3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 80ac 	beq.w	8001234 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010dc:	4b5e      	ldr	r3, [pc, #376]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a5d      	ldr	r2, [pc, #372]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b5b      	ldr	r3, [pc, #364]	; (8001258 <HAL_GPIO_Init+0x2f0>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f4:	4a59      	ldr	r2, [pc, #356]	; (800125c <HAL_GPIO_Init+0x2f4>)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	220f      	movs	r2, #15
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800111e:	d025      	beq.n	800116c <HAL_GPIO_Init+0x204>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a4f      	ldr	r2, [pc, #316]	; (8001260 <HAL_GPIO_Init+0x2f8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d01f      	beq.n	8001168 <HAL_GPIO_Init+0x200>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a4e      	ldr	r2, [pc, #312]	; (8001264 <HAL_GPIO_Init+0x2fc>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d019      	beq.n	8001164 <HAL_GPIO_Init+0x1fc>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a4d      	ldr	r2, [pc, #308]	; (8001268 <HAL_GPIO_Init+0x300>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d013      	beq.n	8001160 <HAL_GPIO_Init+0x1f8>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a4c      	ldr	r2, [pc, #304]	; (800126c <HAL_GPIO_Init+0x304>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d00d      	beq.n	800115c <HAL_GPIO_Init+0x1f4>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a4b      	ldr	r2, [pc, #300]	; (8001270 <HAL_GPIO_Init+0x308>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d007      	beq.n	8001158 <HAL_GPIO_Init+0x1f0>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a4a      	ldr	r2, [pc, #296]	; (8001274 <HAL_GPIO_Init+0x30c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d101      	bne.n	8001154 <HAL_GPIO_Init+0x1ec>
 8001150:	2306      	movs	r3, #6
 8001152:	e00c      	b.n	800116e <HAL_GPIO_Init+0x206>
 8001154:	2307      	movs	r3, #7
 8001156:	e00a      	b.n	800116e <HAL_GPIO_Init+0x206>
 8001158:	2305      	movs	r3, #5
 800115a:	e008      	b.n	800116e <HAL_GPIO_Init+0x206>
 800115c:	2304      	movs	r3, #4
 800115e:	e006      	b.n	800116e <HAL_GPIO_Init+0x206>
 8001160:	2303      	movs	r3, #3
 8001162:	e004      	b.n	800116e <HAL_GPIO_Init+0x206>
 8001164:	2302      	movs	r3, #2
 8001166:	e002      	b.n	800116e <HAL_GPIO_Init+0x206>
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <HAL_GPIO_Init+0x206>
 800116c:	2300      	movs	r3, #0
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	f002 0203 	and.w	r2, r2, #3
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	4093      	lsls	r3, r2
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800117e:	4937      	ldr	r1, [pc, #220]	; (800125c <HAL_GPIO_Init+0x2f4>)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118c:	4b3a      	ldr	r3, [pc, #232]	; (8001278 <HAL_GPIO_Init+0x310>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011b0:	4a31      	ldr	r2, [pc, #196]	; (8001278 <HAL_GPIO_Init+0x310>)
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <HAL_GPIO_Init+0x310>)
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011da:	4a27      	ldr	r2, [pc, #156]	; (8001278 <HAL_GPIO_Init+0x310>)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011e0:	4b25      	ldr	r3, [pc, #148]	; (8001278 <HAL_GPIO_Init+0x310>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d003      	beq.n	8001204 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001204:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <HAL_GPIO_Init+0x310>)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <HAL_GPIO_Init+0x310>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <HAL_GPIO_Init+0x310>)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	fa22 f303 	lsr.w	r3, r2, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	f47f ae97 	bne.w	8000f78 <HAL_GPIO_Init+0x10>
  }
}
 800124a:	bf00      	nop
 800124c:	bf00      	nop
 800124e:	371c      	adds	r7, #28
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	40021000 	.word	0x40021000
 800125c:	40010000 	.word	0x40010000
 8001260:	48000400 	.word	0x48000400
 8001264:	48000800 	.word	0x48000800
 8001268:	48000c00 	.word	0x48000c00
 800126c:	48001000 	.word	0x48001000
 8001270:	48001400 	.word	0x48001400
 8001274:	48001800 	.word	0x48001800
 8001278:	40010400 	.word	0x40010400

0800127c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
 8001288:	4613      	mov	r3, r2
 800128a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800128c:	787b      	ldrb	r3, [r7, #1]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012bc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	f001 b83a 	b.w	8002346 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 816f 	beq.w	80015c6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012e8:	4bb5      	ldr	r3, [pc, #724]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	2b04      	cmp	r3, #4
 80012f2:	d00c      	beq.n	800130e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012f4:	4bb2      	ldr	r3, [pc, #712]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d15c      	bne.n	80013ba <HAL_RCC_OscConfig+0x10e>
 8001300:	4baf      	ldr	r3, [pc, #700]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800130c:	d155      	bne.n	80013ba <HAL_RCC_OscConfig+0x10e>
 800130e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001312:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001316:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800131a:	fa93 f3a3 	rbit	r3, r3
 800131e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 8001322:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001326:	fab3 f383 	clz	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	095b      	lsrs	r3, r3, #5
 800132e:	b2db      	uxtb	r3, r3
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b01      	cmp	r3, #1
 8001338:	d102      	bne.n	8001340 <HAL_RCC_OscConfig+0x94>
 800133a:	4ba1      	ldr	r3, [pc, #644]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	e015      	b.n	800136c <HAL_RCC_OscConfig+0xc0>
 8001340:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001344:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001348:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800134c:	fa93 f3a3 	rbit	r3, r3
 8001350:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001358:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800135c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001360:	fa93 f3a3 	rbit	r3, r3
 8001364:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001368:	4b95      	ldr	r3, [pc, #596]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001370:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001374:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001378:	fa92 f2a2 	rbit	r2, r2
 800137c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001380:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001384:	fab2 f282 	clz	r2, r2
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	f042 0220 	orr.w	r2, r2, #32
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	f002 021f 	and.w	r2, r2, #31
 8001394:	2101      	movs	r1, #1
 8001396:	fa01 f202 	lsl.w	r2, r1, r2
 800139a:	4013      	ands	r3, r2
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 8111 	beq.w	80015c4 <HAL_RCC_OscConfig+0x318>
 80013a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f040 8108 	bne.w	80015c4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	f000 bfc6 	b.w	8002346 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x12e>
 80013cc:	4b7c      	ldr	r3, [pc, #496]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a7b      	ldr	r2, [pc, #492]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 80013d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	e036      	b.n	8001448 <HAL_RCC_OscConfig+0x19c>
 80013da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x158>
 80013ea:	4b75      	ldr	r3, [pc, #468]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a74      	ldr	r2, [pc, #464]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 80013f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b72      	ldr	r3, [pc, #456]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a71      	ldr	r2, [pc, #452]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 80013fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e021      	b.n	8001448 <HAL_RCC_OscConfig+0x19c>
 8001404:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001408:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x184>
 8001416:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a69      	ldr	r2, [pc, #420]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 800141c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b67      	ldr	r3, [pc, #412]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a66      	ldr	r2, [pc, #408]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0x19c>
 8001430:	4b63      	ldr	r3, [pc, #396]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a62      	ldr	r2, [pc, #392]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 8001436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b60      	ldr	r3, [pc, #384]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a5f      	ldr	r2, [pc, #380]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001446:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001448:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800144c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d059      	beq.n	800150c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff fbec 	bl	8000c34 <HAL_GetTick>
 800145c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001460:	e00a      	b.n	8001478 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001462:	f7ff fbe7 	bl	8000c34 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d902      	bls.n	8001478 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	f000 bf67 	b.w	8002346 <HAL_RCC_OscConfig+0x109a>
 8001478:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800147c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001480:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001484:	fa93 f3a3 	rbit	r3, r3
 8001488:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800148c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001490:	fab3 f383 	clz	r3, r3
 8001494:	b2db      	uxtb	r3, r3
 8001496:	095b      	lsrs	r3, r3, #5
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d102      	bne.n	80014aa <HAL_RCC_OscConfig+0x1fe>
 80014a4:	4b46      	ldr	r3, [pc, #280]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	e015      	b.n	80014d6 <HAL_RCC_OscConfig+0x22a>
 80014aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80014be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80014c6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80014ca:	fa93 f3a3 	rbit	r3, r3
 80014ce:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80014d2:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 80014d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014da:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80014de:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80014e2:	fa92 f2a2 	rbit	r2, r2
 80014e6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80014ea:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80014ee:	fab2 f282 	clz	r2, r2
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	f042 0220 	orr.w	r2, r2, #32
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	f002 021f 	and.w	r2, r2, #31
 80014fe:	2101      	movs	r1, #1
 8001500:	fa01 f202 	lsl.w	r2, r1, r2
 8001504:	4013      	ands	r3, r2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0ab      	beq.n	8001462 <HAL_RCC_OscConfig+0x1b6>
 800150a:	e05c      	b.n	80015c6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fb92 	bl	8000c34 <HAL_GetTick>
 8001510:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001514:	e00a      	b.n	800152c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001516:	f7ff fb8d 	bl	8000c34 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b64      	cmp	r3, #100	; 0x64
 8001524:	d902      	bls.n	800152c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	f000 bf0d 	b.w	8002346 <HAL_RCC_OscConfig+0x109a>
 800152c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001530:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001534:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001538:	fa93 f3a3 	rbit	r3, r3
 800153c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001540:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001544:	fab3 f383 	clz	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	095b      	lsrs	r3, r3, #5
 800154c:	b2db      	uxtb	r3, r3
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d102      	bne.n	800155e <HAL_RCC_OscConfig+0x2b2>
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	e015      	b.n	800158a <HAL_RCC_OscConfig+0x2de>
 800155e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001562:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800156a:	fa93 f3a3 	rbit	r3, r3
 800156e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001572:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001576:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800157a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800157e:	fa93 f3a3 	rbit	r3, r3
 8001582:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_RCC_OscConfig+0x314>)
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800158e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001592:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001596:	fa92 f2a2 	rbit	r2, r2
 800159a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800159e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80015a2:	fab2 f282 	clz	r2, r2
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	f042 0220 	orr.w	r2, r2, #32
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	f002 021f 	and.w	r2, r2, #31
 80015b2:	2101      	movs	r1, #1
 80015b4:	fa01 f202 	lsl.w	r2, r1, r2
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1ab      	bne.n	8001516 <HAL_RCC_OscConfig+0x26a>
 80015be:	e002      	b.n	80015c6 <HAL_RCC_OscConfig+0x31a>
 80015c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 817f 	beq.w	80018da <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015dc:	4ba7      	ldr	r3, [pc, #668]	; (800187c <HAL_RCC_OscConfig+0x5d0>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 030c 	and.w	r3, r3, #12
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00c      	beq.n	8001602 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015e8:	4ba4      	ldr	r3, [pc, #656]	; (800187c <HAL_RCC_OscConfig+0x5d0>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d173      	bne.n	80016dc <HAL_RCC_OscConfig+0x430>
 80015f4:	4ba1      	ldr	r3, [pc, #644]	; (800187c <HAL_RCC_OscConfig+0x5d0>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80015fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001600:	d16c      	bne.n	80016dc <HAL_RCC_OscConfig+0x430>
 8001602:	2302      	movs	r3, #2
 8001604:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001608:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800160c:	fa93 f3a3 	rbit	r3, r3
 8001610:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001614:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001618:	fab3 f383 	clz	r3, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	b2db      	uxtb	r3, r3
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b01      	cmp	r3, #1
 800162a:	d102      	bne.n	8001632 <HAL_RCC_OscConfig+0x386>
 800162c:	4b93      	ldr	r3, [pc, #588]	; (800187c <HAL_RCC_OscConfig+0x5d0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	e013      	b.n	800165a <HAL_RCC_OscConfig+0x3ae>
 8001632:	2302      	movs	r3, #2
 8001634:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001644:	2302      	movs	r3, #2
 8001646:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800164a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800164e:	fa93 f3a3 	rbit	r3, r3
 8001652:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001656:	4b89      	ldr	r3, [pc, #548]	; (800187c <HAL_RCC_OscConfig+0x5d0>)
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	2202      	movs	r2, #2
 800165c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001660:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001664:	fa92 f2a2 	rbit	r2, r2
 8001668:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800166c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001670:	fab2 f282 	clz	r2, r2
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	f042 0220 	orr.w	r2, r2, #32
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	f002 021f 	and.w	r2, r2, #31
 8001680:	2101      	movs	r1, #1
 8001682:	fa01 f202 	lsl.w	r2, r1, r2
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00a      	beq.n	80016a2 <HAL_RCC_OscConfig+0x3f6>
 800168c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001690:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d002      	beq.n	80016a2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	f000 be52 	b.w	8002346 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a2:	4b76      	ldr	r3, [pc, #472]	; (800187c <HAL_RCC_OscConfig+0x5d0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	21f8      	movs	r1, #248	; 0xf8
 80016b8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80016c0:	fa91 f1a1 	rbit	r1, r1
 80016c4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80016c8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80016cc:	fab1 f181 	clz	r1, r1
 80016d0:	b2c9      	uxtb	r1, r1
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4969      	ldr	r1, [pc, #420]	; (800187c <HAL_RCC_OscConfig+0x5d0>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016da:	e0fe      	b.n	80018da <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 8088 	beq.w	80017fe <HAL_RCC_OscConfig+0x552>
 80016ee:	2301      	movs	r3, #1
 80016f0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80016f8:	fa93 f3a3 	rbit	r3, r3
 80016fc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001700:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001704:	fab3 f383 	clz	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800170e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	461a      	mov	r2, r3
 8001716:	2301      	movs	r3, #1
 8001718:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f7ff fa8b 	bl	8000c34 <HAL_GetTick>
 800171e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001722:	e00a      	b.n	800173a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001724:	f7ff fa86 	bl	8000c34 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d902      	bls.n	800173a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	f000 be06 	b.w	8002346 <HAL_RCC_OscConfig+0x109a>
 800173a:	2302      	movs	r3, #2
 800173c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001744:	fa93 f3a3 	rbit	r3, r3
 8001748:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800174c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001750:	fab3 f383 	clz	r3, r3
 8001754:	b2db      	uxtb	r3, r3
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b01      	cmp	r3, #1
 8001762:	d102      	bne.n	800176a <HAL_RCC_OscConfig+0x4be>
 8001764:	4b45      	ldr	r3, [pc, #276]	; (800187c <HAL_RCC_OscConfig+0x5d0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	e013      	b.n	8001792 <HAL_RCC_OscConfig+0x4e6>
 800176a:	2302      	movs	r3, #2
 800176c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001774:	fa93 f3a3 	rbit	r3, r3
 8001778:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800177c:	2302      	movs	r3, #2
 800177e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001782:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <HAL_RCC_OscConfig+0x5d0>)
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	2202      	movs	r2, #2
 8001794:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001798:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800179c:	fa92 f2a2 	rbit	r2, r2
 80017a0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80017a4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80017a8:	fab2 f282 	clz	r2, r2
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	f042 0220 	orr.w	r2, r2, #32
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	f002 021f 	and.w	r2, r2, #31
 80017b8:	2101      	movs	r1, #1
 80017ba:	fa01 f202 	lsl.w	r2, r1, r2
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0af      	beq.n	8001724 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	4b2d      	ldr	r3, [pc, #180]	; (800187c <HAL_RCC_OscConfig+0x5d0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	21f8      	movs	r1, #248	; 0xf8
 80017da:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80017e2:	fa91 f1a1 	rbit	r1, r1
 80017e6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80017ea:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80017ee:	fab1 f181 	clz	r1, r1
 80017f2:	b2c9      	uxtb	r1, r1
 80017f4:	408b      	lsls	r3, r1
 80017f6:	4921      	ldr	r1, [pc, #132]	; (800187c <HAL_RCC_OscConfig+0x5d0>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
 80017fc:	e06d      	b.n	80018da <HAL_RCC_OscConfig+0x62e>
 80017fe:	2301      	movs	r3, #1
 8001800:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001804:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001810:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001814:	fab3 f383 	clz	r3, r3
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800181e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	461a      	mov	r2, r3
 8001826:	2300      	movs	r3, #0
 8001828:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fa03 	bl	8000c34 <HAL_GetTick>
 800182e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001832:	e00a      	b.n	800184a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001834:	f7ff f9fe 	bl	8000c34 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d902      	bls.n	800184a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	f000 bd7e 	b.w	8002346 <HAL_RCC_OscConfig+0x109a>
 800184a:	2302      	movs	r3, #2
 800184c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001850:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001854:	fa93 f3a3 	rbit	r3, r3
 8001858:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800185c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001860:	fab3 f383 	clz	r3, r3
 8001864:	b2db      	uxtb	r3, r3
 8001866:	095b      	lsrs	r3, r3, #5
 8001868:	b2db      	uxtb	r3, r3
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <HAL_RCC_OscConfig+0x5d4>
 8001874:	4b01      	ldr	r3, [pc, #4]	; (800187c <HAL_RCC_OscConfig+0x5d0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	e016      	b.n	80018a8 <HAL_RCC_OscConfig+0x5fc>
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	2302      	movs	r3, #2
 8001882:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001892:	2302      	movs	r3, #2
 8001894:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001898:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800189c:	fa93 f3a3 	rbit	r3, r3
 80018a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018a4:	4bbf      	ldr	r3, [pc, #764]	; (8001ba4 <HAL_RCC_OscConfig+0x8f8>)
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	2202      	movs	r2, #2
 80018aa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80018ae:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80018b2:	fa92 f2a2 	rbit	r2, r2
 80018b6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80018ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018be:	fab2 f282 	clz	r2, r2
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	f042 0220 	orr.w	r2, r2, #32
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	f002 021f 	and.w	r2, r2, #31
 80018ce:	2101      	movs	r1, #1
 80018d0:	fa01 f202 	lsl.w	r2, r1, r2
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ac      	bne.n	8001834 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8113 	beq.w	8001b16 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d07c      	beq.n	80019fa <HAL_RCC_OscConfig+0x74e>
 8001900:	2301      	movs	r3, #1
 8001902:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001912:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	461a      	mov	r2, r3
 800191e:	4ba2      	ldr	r3, [pc, #648]	; (8001ba8 <HAL_RCC_OscConfig+0x8fc>)
 8001920:	4413      	add	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	461a      	mov	r2, r3
 8001926:	2301      	movs	r3, #1
 8001928:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff f983 	bl	8000c34 <HAL_GetTick>
 800192e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	e00a      	b.n	800194a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001934:	f7ff f97e 	bl	8000c34 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d902      	bls.n	800194a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	f000 bcfe 	b.w	8002346 <HAL_RCC_OscConfig+0x109a>
 800194a:	2302      	movs	r3, #2
 800194c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001954:	fa93 f2a3 	rbit	r2, r3
 8001958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001966:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800196a:	2202      	movs	r2, #2
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001972:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fa93 f2a3 	rbit	r2, r3
 800197c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800198e:	2202      	movs	r2, #2
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001996:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fa93 f2a3 	rbit	r2, r3
 80019a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80019a8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	4b7e      	ldr	r3, [pc, #504]	; (8001ba4 <HAL_RCC_OscConfig+0x8f8>)
 80019ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019b6:	2102      	movs	r1, #2
 80019b8:	6019      	str	r1, [r3, #0]
 80019ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	fa93 f1a3 	rbit	r1, r3
 80019c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80019d0:	6019      	str	r1, [r3, #0]
  return result;
 80019d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019d6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	2101      	movs	r1, #1
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d09d      	beq.n	8001934 <HAL_RCC_OscConfig+0x688>
 80019f8:	e08d      	b.n	8001b16 <HAL_RCC_OscConfig+0x86a>
 80019fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	fa93 f2a3 	rbit	r2, r3
 8001a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a18:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001a1c:	601a      	str	r2, [r3, #0]
  return result;
 8001a1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a22:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001a26:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a28:	fab3 f383 	clz	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4b5d      	ldr	r3, [pc, #372]	; (8001ba8 <HAL_RCC_OscConfig+0x8fc>)
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	461a      	mov	r2, r3
 8001a38:	2300      	movs	r3, #0
 8001a3a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3c:	f7ff f8fa 	bl	8000c34 <HAL_GetTick>
 8001a40:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a46:	f7ff f8f5 	bl	8000c34 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d902      	bls.n	8001a5c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	f000 bc75 	b.w	8002346 <HAL_RCC_OscConfig+0x109a>
 8001a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a60:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a64:	2202      	movs	r2, #2
 8001a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	fa93 f2a3 	rbit	r2, r3
 8001a76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a88:	2202      	movs	r2, #2
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	fa93 f2a3 	rbit	r2, r3
 8001a9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001aac:	2202      	movs	r2, #2
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	fa93 f2a3 	rbit	r2, r3
 8001abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001ac6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac8:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <HAL_RCC_OscConfig+0x8f8>)
 8001aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ad4:	2102      	movs	r1, #2
 8001ad6:	6019      	str	r1, [r3, #0]
 8001ad8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001adc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	fa93 f1a3 	rbit	r1, r3
 8001ae6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aea:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001aee:	6019      	str	r1, [r3, #0]
  return result;
 8001af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d197      	bne.n	8001a46 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 81a5 	beq.w	8001e76 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <HAL_RCC_OscConfig+0x8f8>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d116      	bne.n	8001b6c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_RCC_OscConfig+0x8f8>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a18      	ldr	r2, [pc, #96]	; (8001ba4 <HAL_RCC_OscConfig+0x8f8>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	61d3      	str	r3, [r2, #28]
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <HAL_RCC_OscConfig+0x8f8>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b64:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b66:	2301      	movs	r3, #1
 8001b68:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <HAL_RCC_OscConfig+0x900>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d121      	bne.n	8001bbc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_RCC_OscConfig+0x900>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <HAL_RCC_OscConfig+0x900>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b84:	f7ff f856 	bl	8000c34 <HAL_GetTick>
 8001b88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8c:	e010      	b.n	8001bb0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8e:	f7ff f851 	bl	8000c34 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d908      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e3d1      	b.n	8002346 <HAL_RCC_OscConfig+0x109a>
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	10908120 	.word	0x10908120
 8001bac:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb0:	4b8d      	ldr	r3, [pc, #564]	; (8001de8 <HAL_RCC_OscConfig+0xb3c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0e8      	beq.n	8001b8e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_OscConfig+0x92e>
 8001bcc:	4b87      	ldr	r3, [pc, #540]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4a86      	ldr	r2, [pc, #536]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6213      	str	r3, [r2, #32]
 8001bd8:	e035      	b.n	8001c46 <HAL_RCC_OscConfig+0x99a>
 8001bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bde:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x958>
 8001bea:	4b80      	ldr	r3, [pc, #512]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	4a7f      	ldr	r2, [pc, #508]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6213      	str	r3, [r2, #32]
 8001bf6:	4b7d      	ldr	r3, [pc, #500]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a7c      	ldr	r2, [pc, #496]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	6213      	str	r3, [r2, #32]
 8001c02:	e020      	b.n	8001c46 <HAL_RCC_OscConfig+0x99a>
 8001c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d10c      	bne.n	8001c2e <HAL_RCC_OscConfig+0x982>
 8001c14:	4b75      	ldr	r3, [pc, #468]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4a74      	ldr	r2, [pc, #464]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	6213      	str	r3, [r2, #32]
 8001c20:	4b72      	ldr	r3, [pc, #456]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4a71      	ldr	r2, [pc, #452]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6213      	str	r3, [r2, #32]
 8001c2c:	e00b      	b.n	8001c46 <HAL_RCC_OscConfig+0x99a>
 8001c2e:	4b6f      	ldr	r3, [pc, #444]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a6e      	ldr	r2, [pc, #440]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	6213      	str	r3, [r2, #32]
 8001c3a:	4b6c      	ldr	r3, [pc, #432]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4a6b      	ldr	r2, [pc, #428]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001c40:	f023 0304 	bic.w	r3, r3, #4
 8001c44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c4a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8081 	beq.w	8001d5a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c58:	f7fe ffec 	bl	8000c34 <HAL_GetTick>
 8001c5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c60:	e00b      	b.n	8001c7a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c62:	f7fe ffe7 	bl	8000c34 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e365      	b.n	8002346 <HAL_RCC_OscConfig+0x109a>
 8001c7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c82:	2202      	movs	r2, #2
 8001c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	fa93 f2a3 	rbit	r2, r3
 8001c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c98:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fa93 f2a3 	rbit	r2, r3
 8001cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cbc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001cc0:	601a      	str	r2, [r3, #0]
  return result;
 8001cc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001cca:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	fab3 f383 	clz	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	095b      	lsrs	r3, r3, #5
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	f043 0302 	orr.w	r3, r3, #2
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d102      	bne.n	8001ce6 <HAL_RCC_OscConfig+0xa3a>
 8001ce0:	4b42      	ldr	r3, [pc, #264]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	e013      	b.n	8001d0e <HAL_RCC_OscConfig+0xa62>
 8001ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cea:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001cee:	2202      	movs	r2, #2
 8001cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	fa93 f2a3 	rbit	r2, r3
 8001d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d04:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	4b38      	ldr	r3, [pc, #224]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d12:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001d16:	2102      	movs	r1, #2
 8001d18:	6011      	str	r1, [r2, #0]
 8001d1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d1e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	fa92 f1a2 	rbit	r1, r2
 8001d28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d2c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001d30:	6011      	str	r1, [r2, #0]
  return result;
 8001d32:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d36:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	fab2 f282 	clz	r2, r2
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f002 021f 	and.w	r2, r2, #31
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d084      	beq.n	8001c62 <HAL_RCC_OscConfig+0x9b6>
 8001d58:	e083      	b.n	8001e62 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5a:	f7fe ff6b 	bl	8000c34 <HAL_GetTick>
 8001d5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d62:	e00b      	b.n	8001d7c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d64:	f7fe ff66 	bl	8000c34 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e2e4      	b.n	8002346 <HAL_RCC_OscConfig+0x109a>
 8001d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d80:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d84:	2202      	movs	r2, #2
 8001d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f2a3 	rbit	r2, r3
 8001d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001da8:	2202      	movs	r2, #2
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	fa93 f2a3 	rbit	r2, r3
 8001dba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dbe:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001dc2:	601a      	str	r2, [r3, #0]
  return result;
 8001dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001dcc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	095b      	lsrs	r3, r3, #5
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f043 0302 	orr.w	r3, r3, #2
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d106      	bne.n	8001df0 <HAL_RCC_OscConfig+0xb44>
 8001de2:	4b02      	ldr	r3, [pc, #8]	; (8001dec <HAL_RCC_OscConfig+0xb40>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	e017      	b.n	8001e18 <HAL_RCC_OscConfig+0xb6c>
 8001de8:	40007000 	.word	0x40007000
 8001dec:	40021000 	.word	0x40021000
 8001df0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001df8:	2202      	movs	r2, #2
 8001dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e00:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	fa93 f2a3 	rbit	r2, r3
 8001e0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	4bb3      	ldr	r3, [pc, #716]	; (80020e4 <HAL_RCC_OscConfig+0xe38>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e1c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001e20:	2102      	movs	r1, #2
 8001e22:	6011      	str	r1, [r2, #0]
 8001e24:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e28:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	fa92 f1a2 	rbit	r1, r2
 8001e32:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e36:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001e3a:	6011      	str	r1, [r2, #0]
  return result;
 8001e3c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e40:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	fab2 f282 	clz	r2, r2
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	f002 021f 	and.w	r2, r2, #31
 8001e56:	2101      	movs	r1, #1
 8001e58:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d180      	bne.n	8001d64 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e62:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d105      	bne.n	8001e76 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b9e      	ldr	r3, [pc, #632]	; (80020e4 <HAL_RCC_OscConfig+0xe38>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	4a9d      	ldr	r2, [pc, #628]	; (80020e4 <HAL_RCC_OscConfig+0xe38>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e74:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 825e 	beq.w	8002344 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e88:	4b96      	ldr	r3, [pc, #600]	; (80020e4 <HAL_RCC_OscConfig+0xe38>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	f000 821f 	beq.w	80022d4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	f040 8170 	bne.w	8002188 <HAL_RCC_OscConfig+0xedc>
 8001ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001eb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fa93 f2a3 	rbit	r2, r3
 8001ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ecc:	601a      	str	r2, [r3, #0]
  return result;
 8001ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001ed6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ee2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2300      	movs	r3, #0
 8001eec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7fe fea1 	bl	8000c34 <HAL_GetTick>
 8001ef2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef6:	e009      	b.n	8001f0c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7fe fe9c 	bl	8000c34 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e21c      	b.n	8002346 <HAL_RCC_OscConfig+0x109a>
 8001f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f10:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	fa93 f2a3 	rbit	r2, r3
 8001f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001f30:	601a      	str	r2, [r3, #0]
  return result;
 8001f32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f36:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001f3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d102      	bne.n	8001f56 <HAL_RCC_OscConfig+0xcaa>
 8001f50:	4b64      	ldr	r3, [pc, #400]	; (80020e4 <HAL_RCC_OscConfig+0xe38>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	e027      	b.n	8001fa6 <HAL_RCC_OscConfig+0xcfa>
 8001f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001f5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f68:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	fa93 f2a3 	rbit	r2, r3
 8001f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f76:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f80:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f8e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	fa93 f2a3 	rbit	r2, r3
 8001f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	4b50      	ldr	r3, [pc, #320]	; (80020e4 <HAL_RCC_OscConfig+0xe38>)
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001faa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001fae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fb2:	6011      	str	r1, [r2, #0]
 8001fb4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fb8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	fa92 f1a2 	rbit	r1, r2
 8001fc2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fc6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001fca:	6011      	str	r1, [r2, #0]
  return result;
 8001fcc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fd0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	fab2 f282 	clz	r2, r2
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	f042 0220 	orr.w	r2, r2, #32
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	f002 021f 	and.w	r2, r2, #31
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d182      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff2:	4b3c      	ldr	r3, [pc, #240]	; (80020e4 <HAL_RCC_OscConfig+0xe38>)
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	f023 020f 	bic.w	r2, r3, #15
 8001ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ffe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	4937      	ldr	r1, [pc, #220]	; (80020e4 <HAL_RCC_OscConfig+0xe38>)
 8002008:	4313      	orrs	r3, r2
 800200a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800200c:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <HAL_RCC_OscConfig+0xe38>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002014:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002018:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6a19      	ldr	r1, [r3, #32]
 8002020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002024:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	430b      	orrs	r3, r1
 800202e:	492d      	ldr	r1, [pc, #180]	; (80020e4 <HAL_RCC_OscConfig+0xe38>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
 8002034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002038:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800203c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002046:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	fa93 f2a3 	rbit	r2, r3
 8002050:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002054:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002058:	601a      	str	r2, [r3, #0]
  return result;
 800205a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800205e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002062:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002064:	fab3 f383 	clz	r3, r3
 8002068:	b2db      	uxtb	r3, r3
 800206a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800206e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	461a      	mov	r2, r3
 8002076:	2301      	movs	r3, #1
 8002078:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7fe fddb 	bl	8000c34 <HAL_GetTick>
 800207e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002082:	e009      	b.n	8002098 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002084:	f7fe fdd6 	bl	8000c34 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e156      	b.n	8002346 <HAL_RCC_OscConfig+0x109a>
 8002098:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80020a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020aa:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	fa93 f2a3 	rbit	r2, r3
 80020b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80020bc:	601a      	str	r2, [r3, #0]
  return result;
 80020be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80020c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d105      	bne.n	80020e8 <HAL_RCC_OscConfig+0xe3c>
 80020dc:	4b01      	ldr	r3, [pc, #4]	; (80020e4 <HAL_RCC_OscConfig+0xe38>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	e02a      	b.n	8002138 <HAL_RCC_OscConfig+0xe8c>
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ec:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80020f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fa:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fa93 f2a3 	rbit	r2, r3
 8002104:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002108:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002112:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002116:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002120:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	fa93 f2a3 	rbit	r2, r3
 800212a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	4b86      	ldr	r3, [pc, #536]	; (8002350 <HAL_RCC_OscConfig+0x10a4>)
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800213c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002140:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002144:	6011      	str	r1, [r2, #0]
 8002146:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800214a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	fa92 f1a2 	rbit	r1, r2
 8002154:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002158:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800215c:	6011      	str	r1, [r2, #0]
  return result;
 800215e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002162:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	fab2 f282 	clz	r2, r2
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	f042 0220 	orr.w	r2, r2, #32
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	f002 021f 	and.w	r2, r2, #31
 8002178:	2101      	movs	r1, #1
 800217a:	fa01 f202 	lsl.w	r2, r1, r2
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	f43f af7f 	beq.w	8002084 <HAL_RCC_OscConfig+0xdd8>
 8002186:	e0dd      	b.n	8002344 <HAL_RCC_OscConfig+0x1098>
 8002188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002190:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	fa93 f2a3 	rbit	r2, r3
 80021a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80021ac:	601a      	str	r2, [r3, #0]
  return result;
 80021ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80021b6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b8:	fab3 f383 	clz	r3, r3
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	461a      	mov	r2, r3
 80021ca:	2300      	movs	r3, #0
 80021cc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ce:	f7fe fd31 	bl	8000c34 <HAL_GetTick>
 80021d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d6:	e009      	b.n	80021ec <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d8:	f7fe fd2c 	bl	8000c34 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0ac      	b.n	8002346 <HAL_RCC_OscConfig+0x109a>
 80021ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80021f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021fe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	fa93 f2a3 	rbit	r2, r3
 8002208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002210:	601a      	str	r2, [r3, #0]
  return result;
 8002212:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002216:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800221a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221c:	fab3 f383 	clz	r3, r3
 8002220:	b2db      	uxtb	r3, r3
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	d102      	bne.n	8002236 <HAL_RCC_OscConfig+0xf8a>
 8002230:	4b47      	ldr	r3, [pc, #284]	; (8002350 <HAL_RCC_OscConfig+0x10a4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	e027      	b.n	8002286 <HAL_RCC_OscConfig+0xfda>
 8002236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800223e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002242:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002248:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	fa93 f2a3 	rbit	r2, r3
 8002252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002256:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002260:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002264:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	fa93 f2a3 	rbit	r2, r3
 8002278:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800227c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	4b33      	ldr	r3, [pc, #204]	; (8002350 <HAL_RCC_OscConfig+0x10a4>)
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800228a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800228e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002292:	6011      	str	r1, [r2, #0]
 8002294:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002298:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	fa92 f1a2 	rbit	r1, r2
 80022a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022a6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80022aa:	6011      	str	r1, [r2, #0]
  return result;
 80022ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022b0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	fab2 f282 	clz	r2, r2
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	f042 0220 	orr.w	r2, r2, #32
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	f002 021f 	and.w	r2, r2, #31
 80022c6:	2101      	movs	r1, #1
 80022c8:	fa01 f202 	lsl.w	r2, r1, r2
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d182      	bne.n	80021d8 <HAL_RCC_OscConfig+0xf2c>
 80022d2:	e037      	b.n	8002344 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e02e      	b.n	8002346 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_RCC_OscConfig+0x10a4>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80022f0:	4b17      	ldr	r3, [pc, #92]	; (8002350 <HAL_RCC_OscConfig+0x10a4>)
 80022f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80022fc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002300:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002304:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	429a      	cmp	r2, r3
 800230e:	d117      	bne.n	8002340 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002310:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002314:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002324:	429a      	cmp	r2, r3
 8002326:	d10b      	bne.n	8002340 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002328:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800232c:	f003 020f 	and.w	r2, r3, #15
 8002330:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002334:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000

08002354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b09e      	sub	sp, #120	; 0x78
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e162      	b.n	8002632 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b90      	ldr	r3, [pc, #576]	; (80025b0 <HAL_RCC_ClockConfig+0x25c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0307 	and.w	r3, r3, #7
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d910      	bls.n	800239c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b8d      	ldr	r3, [pc, #564]	; (80025b0 <HAL_RCC_ClockConfig+0x25c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 0207 	bic.w	r2, r3, #7
 8002382:	498b      	ldr	r1, [pc, #556]	; (80025b0 <HAL_RCC_ClockConfig+0x25c>)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b89      	ldr	r3, [pc, #548]	; (80025b0 <HAL_RCC_ClockConfig+0x25c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e14a      	b.n	8002632 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a8:	4b82      	ldr	r3, [pc, #520]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	497f      	ldr	r1, [pc, #508]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80dc 	beq.w	8002580 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d13c      	bne.n	800244a <HAL_RCC_ClockConfig+0xf6>
 80023d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80023de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e0:	fab3 f383 	clz	r3, r3
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d102      	bne.n	80023fa <HAL_RCC_ClockConfig+0xa6>
 80023f4:	4b6f      	ldr	r3, [pc, #444]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	e00f      	b.n	800241a <HAL_RCC_ClockConfig+0xc6>
 80023fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	667b      	str	r3, [r7, #100]	; 0x64
 8002408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240c:	663b      	str	r3, [r7, #96]	; 0x60
 800240e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002410:	fa93 f3a3 	rbit	r3, r3
 8002414:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002416:	4b67      	ldr	r3, [pc, #412]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800241e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002420:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002422:	fa92 f2a2 	rbit	r2, r2
 8002426:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002428:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800242a:	fab2 f282 	clz	r2, r2
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	f042 0220 	orr.w	r2, r2, #32
 8002434:	b2d2      	uxtb	r2, r2
 8002436:	f002 021f 	and.w	r2, r2, #31
 800243a:	2101      	movs	r1, #1
 800243c:	fa01 f202 	lsl.w	r2, r1, r2
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d17b      	bne.n	800253e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0f3      	b.n	8002632 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d13c      	bne.n	80024cc <HAL_RCC_ClockConfig+0x178>
 8002452:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002456:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	095b      	lsrs	r3, r3, #5
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b01      	cmp	r3, #1
 8002474:	d102      	bne.n	800247c <HAL_RCC_ClockConfig+0x128>
 8002476:	4b4f      	ldr	r3, [pc, #316]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	e00f      	b.n	800249c <HAL_RCC_ClockConfig+0x148>
 800247c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002480:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002484:	fa93 f3a3 	rbit	r3, r3
 8002488:	647b      	str	r3, [r7, #68]	; 0x44
 800248a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800248e:	643b      	str	r3, [r7, #64]	; 0x40
 8002490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002492:	fa93 f3a3 	rbit	r3, r3
 8002496:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002498:	4b46      	ldr	r3, [pc, #280]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80024a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024a4:	fa92 f2a2 	rbit	r2, r2
 80024a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80024aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ac:	fab2 f282 	clz	r2, r2
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	f042 0220 	orr.w	r2, r2, #32
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	f002 021f 	and.w	r2, r2, #31
 80024bc:	2101      	movs	r1, #1
 80024be:	fa01 f202 	lsl.w	r2, r1, r2
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d13a      	bne.n	800253e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0b2      	b.n	8002632 <HAL_RCC_ClockConfig+0x2de>
 80024cc:	2302      	movs	r3, #2
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	fa93 f3a3 	rbit	r3, r3
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d102      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x1a0>
 80024ee:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	e00d      	b.n	8002510 <HAL_RCC_ClockConfig+0x1bc>
 80024f4:	2302      	movs	r3, #2
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002500:	2302      	movs	r3, #2
 8002502:	623b      	str	r3, [r7, #32]
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	fa93 f3a3 	rbit	r3, r3
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	2202      	movs	r2, #2
 8002512:	61ba      	str	r2, [r7, #24]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	fa92 f2a2 	rbit	r2, r2
 800251a:	617a      	str	r2, [r7, #20]
  return result;
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	fab2 f282 	clz	r2, r2
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	f042 0220 	orr.w	r2, r2, #32
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	f002 021f 	and.w	r2, r2, #31
 800252e:	2101      	movs	r1, #1
 8002530:	fa01 f202 	lsl.w	r2, r1, r2
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e079      	b.n	8002632 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253e:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f023 0203 	bic.w	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	491a      	ldr	r1, [pc, #104]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002550:	f7fe fb70 	bl	8000c34 <HAL_GetTick>
 8002554:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002556:	e00a      	b.n	800256e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002558:	f7fe fb6c 	bl	8000c34 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	; 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e061      	b.n	8002632 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <HAL_RCC_ClockConfig+0x260>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f003 020c 	and.w	r2, r3, #12
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	429a      	cmp	r2, r3
 800257e:	d1eb      	bne.n	8002558 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_RCC_ClockConfig+0x25c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d214      	bcs.n	80025b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_RCC_ClockConfig+0x25c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 0207 	bic.w	r2, r3, #7
 8002596:	4906      	ldr	r1, [pc, #24]	; (80025b0 <HAL_RCC_ClockConfig+0x25c>)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <HAL_RCC_ClockConfig+0x25c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e040      	b.n	8002632 <HAL_RCC_ClockConfig+0x2de>
 80025b0:	40022000 	.word	0x40022000
 80025b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <HAL_RCC_ClockConfig+0x2e8>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	491a      	ldr	r1, [pc, #104]	; (800263c <HAL_RCC_ClockConfig+0x2e8>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025e2:	4b16      	ldr	r3, [pc, #88]	; (800263c <HAL_RCC_ClockConfig+0x2e8>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4912      	ldr	r1, [pc, #72]	; (800263c <HAL_RCC_ClockConfig+0x2e8>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025f6:	f000 f829 	bl	800264c <HAL_RCC_GetSysClockFreq>
 80025fa:	4601      	mov	r1, r0
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_RCC_ClockConfig+0x2e8>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002604:	22f0      	movs	r2, #240	; 0xf0
 8002606:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	fa92 f2a2 	rbit	r2, r2
 800260e:	60fa      	str	r2, [r7, #12]
  return result;
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	fab2 f282 	clz	r2, r2
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	40d3      	lsrs	r3, r2
 800261a:	4a09      	ldr	r2, [pc, #36]	; (8002640 <HAL_RCC_ClockConfig+0x2ec>)
 800261c:	5cd3      	ldrb	r3, [r2, r3]
 800261e:	fa21 f303 	lsr.w	r3, r1, r3
 8002622:	4a08      	ldr	r2, [pc, #32]	; (8002644 <HAL_RCC_ClockConfig+0x2f0>)
 8002624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <HAL_RCC_ClockConfig+0x2f4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe fabe 	bl	8000bac <HAL_InitTick>
  
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3778      	adds	r7, #120	; 0x78
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	08004400 	.word	0x08004400
 8002644:	20000000 	.word	0x20000000
 8002648:	20000004 	.word	0x20000004

0800264c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002666:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b04      	cmp	r3, #4
 8002674:	d002      	beq.n	800267c <HAL_RCC_GetSysClockFreq+0x30>
 8002676:	2b08      	cmp	r3, #8
 8002678:	d003      	beq.n	8002682 <HAL_RCC_GetSysClockFreq+0x36>
 800267a:	e029      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800267c:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800267e:	613b      	str	r3, [r7, #16]
      break;
 8002680:	e029      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	0c9b      	lsrs	r3, r3, #18
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	4a18      	ldr	r2, [pc, #96]	; (80026ec <HAL_RCC_GetSysClockFreq+0xa0>)
 800268c:	5cd3      	ldrb	r3, [r2, r3]
 800268e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	4a15      	ldr	r2, [pc, #84]	; (80026f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800269a:	5cd3      	ldrb	r3, [r2, r3]
 800269c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026a8:	4a0f      	ldr	r2, [pc, #60]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e007      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026ba:	4a0b      	ldr	r2, [pc, #44]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	fb02 f303 	mul.w	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	613b      	str	r3, [r7, #16]
      break;
 80026ce:	e002      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026d2:	613b      	str	r3, [r7, #16]
      break;
 80026d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d6:	693b      	ldr	r3, [r7, #16]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	371c      	adds	r7, #28
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	40021000 	.word	0x40021000
 80026e8:	007a1200 	.word	0x007a1200
 80026ec:	08004418 	.word	0x08004418
 80026f0:	08004428 	.word	0x08004428

080026f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <HAL_RCC_GetHCLKFreq+0x14>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000000 	.word	0x20000000

0800270c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002712:	f7ff ffef 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 8002716:	4601      	mov	r1, r0
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002720:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002724:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	fa92 f2a2 	rbit	r2, r2
 800272c:	603a      	str	r2, [r7, #0]
  return result;
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	fab2 f282 	clz	r2, r2
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	40d3      	lsrs	r3, r2
 8002738:	4a04      	ldr	r2, [pc, #16]	; (800274c <HAL_RCC_GetPCLK1Freq+0x40>)
 800273a:	5cd3      	ldrb	r3, [r2, r3]
 800273c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000
 800274c:	08004410 	.word	0x08004410

08002750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002756:	f7ff ffcd 	bl	80026f4 <HAL_RCC_GetHCLKFreq>
 800275a:	4601      	mov	r1, r0
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002764:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002768:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	fa92 f2a2 	rbit	r2, r2
 8002770:	603a      	str	r2, [r7, #0]
  return result;
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	fab2 f282 	clz	r2, r2
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	40d3      	lsrs	r3, r2
 800277c:	4a04      	ldr	r2, [pc, #16]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x40>)
 800277e:	5cd3      	ldrb	r3, [r2, r3]
 8002780:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	08004410 	.word	0x08004410

08002794 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b092      	sub	sp, #72	; 0x48
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80d4 	beq.w	8002960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b8:	4b4e      	ldr	r3, [pc, #312]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10e      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c4:	4b4b      	ldr	r3, [pc, #300]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	4a4a      	ldr	r2, [pc, #296]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ce:	61d3      	str	r3, [r2, #28]
 80027d0:	4b48      	ldr	r3, [pc, #288]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027dc:	2301      	movs	r3, #1
 80027de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	4b45      	ldr	r3, [pc, #276]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d118      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ee:	4b42      	ldr	r3, [pc, #264]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a41      	ldr	r2, [pc, #260]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fa:	f7fe fa1b 	bl	8000c34 <HAL_GetTick>
 80027fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	e008      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7fe fa17 	bl	8000c34 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b64      	cmp	r3, #100	; 0x64
 800280e:	d901      	bls.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1d6      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	4b38      	ldr	r3, [pc, #224]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002820:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002828:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800282a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8084 	beq.w	800293a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800283c:	429a      	cmp	r2, r3
 800283e:	d07c      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002840:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800284a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800284e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	4b26      	ldr	r3, [pc, #152]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	461a      	mov	r2, r3
 800286a:	2301      	movs	r3, #1
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002872:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800287c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	461a      	mov	r2, r3
 8002886:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	461a      	mov	r2, r3
 800288e:	2300      	movs	r3, #0
 8002890:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002892:	4a18      	ldr	r2, [pc, #96]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002896:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d04b      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fe f9c7 	bl	8000c34 <HAL_GetTick>
 80028a6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a8:	e00a      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028aa:	f7fe f9c3 	bl	8000c34 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e180      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80028c0:	2302      	movs	r3, #2
 80028c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
 80028cc:	2302      	movs	r3, #2
 80028ce:	623b      	str	r3, [r7, #32]
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	61fb      	str	r3, [r7, #28]
  return result;
 80028d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d108      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80028ee:	4b01      	ldr	r3, [pc, #4]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	e00d      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40007000 	.word	0x40007000
 80028fc:	10908100 	.word	0x10908100
 8002900:	2302      	movs	r3, #2
 8002902:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	4b9a      	ldr	r3, [pc, #616]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	2202      	movs	r2, #2
 8002912:	613a      	str	r2, [r7, #16]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	fa92 f2a2 	rbit	r2, r2
 800291a:	60fa      	str	r2, [r7, #12]
  return result;
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	fab2 f282 	clz	r2, r2
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	f002 021f 	and.w	r2, r2, #31
 800292e:	2101      	movs	r1, #1
 8002930:	fa01 f202 	lsl.w	r2, r1, r2
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0b7      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800293a:	4b8f      	ldr	r3, [pc, #572]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	498c      	ldr	r1, [pc, #560]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002948:	4313      	orrs	r3, r2
 800294a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800294c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002950:	2b01      	cmp	r3, #1
 8002952:	d105      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002954:	4b88      	ldr	r3, [pc, #544]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	4a87      	ldr	r2, [pc, #540]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800295a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800296c:	4b82      	ldr	r3, [pc, #520]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	f023 0203 	bic.w	r2, r3, #3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	497f      	ldr	r1, [pc, #508]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d008      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800298a:	4b7b      	ldr	r3, [pc, #492]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	4978      	ldr	r1, [pc, #480]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029a8:	4b73      	ldr	r3, [pc, #460]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	4970      	ldr	r1, [pc, #448]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029c6:	4b6c      	ldr	r3, [pc, #432]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f023 0210 	bic.w	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	4969      	ldr	r1, [pc, #420]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80029e4:	4b64      	ldr	r3, [pc, #400]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f0:	4961      	ldr	r1, [pc, #388]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a02:	4b5d      	ldr	r3, [pc, #372]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f023 0220 	bic.w	r2, r3, #32
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	495a      	ldr	r1, [pc, #360]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a20:	4b55      	ldr	r3, [pc, #340]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	4952      	ldr	r1, [pc, #328]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a3e:	4b4e      	ldr	r3, [pc, #312]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	494b      	ldr	r1, [pc, #300]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a5c:	4b46      	ldr	r3, [pc, #280]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	4943      	ldr	r1, [pc, #268]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d008      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a7a:	4b3f      	ldr	r3, [pc, #252]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	493c      	ldr	r1, [pc, #240]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d008      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a98:	4b37      	ldr	r3, [pc, #220]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	4934      	ldr	r1, [pc, #208]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d008      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ab6:	4b30      	ldr	r3, [pc, #192]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	492d      	ldr	r1, [pc, #180]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ad4:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae0:	4925      	ldr	r1, [pc, #148]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d008      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002af2:	4b21      	ldr	r3, [pc, #132]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	491e      	ldr	r1, [pc, #120]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1c:	4916      	ldr	r1, [pc, #88]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d008      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002b2e:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	490f      	ldr	r1, [pc, #60]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002b4c:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b50:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	4907      	ldr	r1, [pc, #28]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00c      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002b6a:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	e002      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7e:	4913      	ldr	r1, [pc, #76]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002b90:	4b0e      	ldr	r3, [pc, #56]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9c:	490b      	ldr	r1, [pc, #44]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002bae:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bba:	4904      	ldr	r1, [pc, #16]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3748      	adds	r7, #72	; 0x48
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000

08002bd0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e073      	b.n	8002cce <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7f5b      	ldrb	r3, [r3, #29]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d105      	bne.n	8002bfc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fd fd36 	bl	8000668 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d055      	beq.n	8002cbc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	22ca      	movs	r2, #202	; 0xca
 8002c16:	625a      	str	r2, [r3, #36]	; 0x24
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2253      	movs	r2, #83	; 0x53
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f87f 	bl	8002d24 <RTC_EnterInitMode>
 8002c26:	4603      	mov	r3, r0
 8002c28:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d12c      	bne.n	8002c8a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6812      	ldr	r2, [r2, #0]
 8002c3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c42:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6899      	ldr	r1, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68d2      	ldr	r2, [r2, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6919      	ldr	r1, [r3, #16]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	041a      	lsls	r2, r3, #16
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f886 	bl	8002d92 <RTC_ExitInitMode>
 8002c86:	4603      	mov	r3, r0
 8002c88:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d110      	bne.n	8002cb2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	699a      	ldr	r2, [r3, #24]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	22ff      	movs	r2, #255	; 0xff
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
 8002cba:	e001      	b.n	8002cc0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <HAL_RTC_WaitForSynchro+0x48>)
 8002cea:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cec:	f7fd ffa2 	bl	8000c34 <HAL_GetTick>
 8002cf0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002cf2:	e009      	b.n	8002d08 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cf4:	f7fd ff9e 	bl	8000c34 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d02:	d901      	bls.n	8002d08 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e007      	b.n	8002d18 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0ee      	beq.n	8002cf4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	0001ff5f 	.word	0x0001ff5f

08002d24 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d122      	bne.n	8002d88 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d50:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d52:	f7fd ff6f 	bl	8000c34 <HAL_GetTick>
 8002d56:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d58:	e00c      	b.n	8002d74 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d5a:	f7fd ff6b 	bl	8000c34 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d68:	d904      	bls.n	8002d74 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d102      	bne.n	8002d88 <RTC_EnterInitMode+0x64>
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d1e8      	bne.n	8002d5a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dac:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0320 	and.w	r3, r3, #32
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff8b 	bl	8002cd8 <HAL_RTC_WaitForSynchro>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d004      	beq.n	8002dd2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2204      	movs	r2, #4
 8002dcc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e040      	b.n	8002e70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fd fd22 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2224      	movs	r2, #36	; 0x24
 8002e08:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fdd0 	bl	80039c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fbf9 	bl	8003620 <UART_SetConfig>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e01b      	b.n	8002e70 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fe4f 	bl	8003b0c <UART_CheckIdleState>
 8002e6e:	4603      	mov	r3, r0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d178      	bne.n	8002f82 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_UART_Transmit+0x24>
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e071      	b.n	8002f84 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2221      	movs	r2, #33	; 0x21
 8002eac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eae:	f7fd fec1 	bl	8000c34 <HAL_GetTick>
 8002eb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	88fa      	ldrh	r2, [r7, #6]
 8002eb8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	88fa      	ldrh	r2, [r7, #6]
 8002ec0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ecc:	d108      	bne.n	8002ee0 <HAL_UART_Transmit+0x68>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d104      	bne.n	8002ee0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	e003      	b.n	8002ee8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ee8:	e030      	b.n	8002f4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2180      	movs	r1, #128	; 0x80
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 feb1 	bl	8003c5c <UART_WaitOnFlagUntilTimeout>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d004      	beq.n	8002f0a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e03c      	b.n	8002f84 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10b      	bne.n	8002f28 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	881a      	ldrh	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f1c:	b292      	uxth	r2, r2
 8002f1e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	3302      	adds	r3, #2
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	e008      	b.n	8002f3a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	781a      	ldrb	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	b292      	uxth	r2, r2
 8002f32:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	3301      	adds	r3, #1
 8002f38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1c8      	bne.n	8002eea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2140      	movs	r1, #64	; 0x40
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fe7a 	bl	8003c5c <UART_WaitOnFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d004      	beq.n	8002f78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e005      	b.n	8002f84 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002f82:	2302      	movs	r3, #2
  }
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	; 0x28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	4613      	mov	r3, r2
 8002f98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d132      	bne.n	800300a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <HAL_UART_Receive_IT+0x24>
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e02b      	b.n	800300c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d018      	beq.n	8002ffa <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	e853 3f00 	ldrex	r3, [r3]
 8002fd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	623b      	str	r3, [r7, #32]
 8002fe8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fea:	69f9      	ldr	r1, [r7, #28]
 8002fec:	6a3a      	ldr	r2, [r7, #32]
 8002fee:	e841 2300 	strex	r3, r2, [r1]
 8002ff2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1e6      	bne.n	8002fc8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fe99 	bl	8003d38 <UART_Start_Receive_IT>
 8003006:	4603      	mov	r3, r0
 8003008:	e000      	b.n	800300c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800300a:	2302      	movs	r3, #2
  }
}
 800300c:	4618      	mov	r0, r3
 800300e:	3728      	adds	r7, #40	; 0x28
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b0ba      	sub	sp, #232	; 0xe8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800303a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800303e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003042:	4013      	ands	r3, r2
 8003044:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800304c:	2b00      	cmp	r3, #0
 800304e:	d115      	bne.n	800307c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00f      	beq.n	800307c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800305c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003060:	f003 0320 	and.w	r3, r3, #32
 8003064:	2b00      	cmp	r3, #0
 8003066:	d009      	beq.n	800307c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800306c:	2b00      	cmp	r3, #0
 800306e:	f000 82ab 	beq.w	80035c8 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
      }
      return;
 800307a:	e2a5      	b.n	80035c8 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800307c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8117 	beq.w	80032b4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003092:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003096:	4b85      	ldr	r3, [pc, #532]	; (80032ac <HAL_UART_IRQHandler+0x298>)
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 810a 	beq.w	80032b4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d011      	beq.n	80030d0 <HAL_UART_IRQHandler+0xbc>
 80030ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00b      	beq.n	80030d0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2201      	movs	r2, #1
 80030be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c6:	f043 0201 	orr.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d011      	beq.n	8003100 <HAL_UART_IRQHandler+0xec>
 80030dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00b      	beq.n	8003100 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2202      	movs	r2, #2
 80030ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030f6:	f043 0204 	orr.w	r2, r3, #4
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d011      	beq.n	8003130 <HAL_UART_IRQHandler+0x11c>
 800310c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00b      	beq.n	8003130 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2204      	movs	r2, #4
 800311e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003126:	f043 0202 	orr.w	r2, r3, #2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003134:	f003 0308 	and.w	r3, r3, #8
 8003138:	2b00      	cmp	r3, #0
 800313a:	d017      	beq.n	800316c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800313c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800314c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00b      	beq.n	800316c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2208      	movs	r2, #8
 800315a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003162:	f043 0208 	orr.w	r2, r3, #8
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800316c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003174:	2b00      	cmp	r3, #0
 8003176:	d012      	beq.n	800319e <HAL_UART_IRQHandler+0x18a>
 8003178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800317c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00c      	beq.n	800319e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800318c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003194:	f043 0220 	orr.w	r2, r3, #32
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8211 	beq.w	80035cc <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e6:	2b40      	cmp	r3, #64	; 0x40
 80031e8:	d005      	beq.n	80031f6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d04f      	beq.n	8003296 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fe64 	bl	8003ec4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d141      	bne.n	800328e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3308      	adds	r3, #8
 8003210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003218:	e853 3f00 	ldrex	r3, [r3]
 800321c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3308      	adds	r3, #8
 8003232:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003236:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800323a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003242:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800324e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1d9      	bne.n	800320a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325a:	2b00      	cmp	r3, #0
 800325c:	d013      	beq.n	8003286 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003262:	4a13      	ldr	r2, [pc, #76]	; (80032b0 <HAL_UART_IRQHandler+0x29c>)
 8003264:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd fe3d 	bl	8000eea <HAL_DMA_Abort_IT>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d017      	beq.n	80032a6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003280:	4610      	mov	r0, r2
 8003282:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	e00f      	b.n	80032a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f9b4 	bl	80035f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328c:	e00b      	b.n	80032a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f9b0 	bl	80035f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003294:	e007      	b.n	80032a6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f9ac 	bl	80035f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80032a4:	e192      	b.n	80035cc <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a6:	bf00      	nop
    return;
 80032a8:	e190      	b.n	80035cc <HAL_UART_IRQHandler+0x5b8>
 80032aa:	bf00      	nop
 80032ac:	04000120 	.word	0x04000120
 80032b0:	08003f8d 	.word	0x08003f8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	f040 814b 	bne.w	8003554 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 8144 	beq.w	8003554 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 813d 	beq.w	8003554 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2210      	movs	r2, #16
 80032e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ec:	2b40      	cmp	r3, #64	; 0x40
 80032ee:	f040 80b5 	bne.w	800345c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032fe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 8164 	beq.w	80035d0 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800330e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003312:	429a      	cmp	r2, r3
 8003314:	f080 815c 	bcs.w	80035d0 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800331e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	2b20      	cmp	r3, #32
 800332a:	f000 8086 	beq.w	800343a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003336:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800333a:	e853 3f00 	ldrex	r3, [r3]
 800333e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003342:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800334a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003358:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800335c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003360:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003364:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003368:	e841 2300 	strex	r3, r2, [r1]
 800336c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1da      	bne.n	800332e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3308      	adds	r3, #8
 800337e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003382:	e853 3f00 	ldrex	r3, [r3]
 8003386:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003388:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3308      	adds	r3, #8
 8003398:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800339c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033a0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e1      	bne.n	8003378 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3308      	adds	r3, #8
 80033ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3308      	adds	r3, #8
 80033d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033e0:	e841 2300 	strex	r3, r2, [r1]
 80033e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e3      	bne.n	80033b4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003402:	e853 3f00 	ldrex	r3, [r3]
 8003406:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340a:	f023 0310 	bic.w	r3, r3, #16
 800340e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800341c:	65bb      	str	r3, [r7, #88]	; 0x58
 800341e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003422:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800342a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e4      	bne.n	80033fa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003434:	4618      	mov	r0, r3
 8003436:	f7fd fd1a 	bl	8000e6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2202      	movs	r2, #2
 800343e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800344c:	b29b      	uxth	r3, r3
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	b29b      	uxth	r3, r3
 8003452:	4619      	mov	r1, r3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f8d7 	bl	8003608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800345a:	e0b9      	b.n	80035d0 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003468:	b29b      	uxth	r3, r3
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003476:	b29b      	uxth	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80ab 	beq.w	80035d4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800347e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 80a6 	beq.w	80035d4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800349c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034aa:	647b      	str	r3, [r7, #68]	; 0x44
 80034ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034b2:	e841 2300 	strex	r3, r2, [r1]
 80034b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1e4      	bne.n	8003488 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3308      	adds	r3, #8
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	623b      	str	r3, [r7, #32]
   return(result);
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3308      	adds	r3, #8
 80034de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034e2:	633a      	str	r2, [r7, #48]	; 0x30
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e3      	bne.n	80034be <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	e853 3f00 	ldrex	r3, [r3]
 8003516:	60fb      	str	r3, [r7, #12]
   return(result);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0310 	bic.w	r3, r3, #16
 800351e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	69b9      	ldr	r1, [r7, #24]
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	617b      	str	r3, [r7, #20]
   return(result);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e4      	bne.n	800350a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003546:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800354a:	4619      	mov	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f85b 	bl	8003608 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003552:	e03f      	b.n	80035d4 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00e      	beq.n	800357e <HAL_UART_IRQHandler+0x56a>
 8003560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003564:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003574:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fef0 	bl	800435c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800357c:	e02d      	b.n	80035da <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800357e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00e      	beq.n	80035a8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800358a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800358e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003592:	2b00      	cmp	r3, #0
 8003594:	d008      	beq.n	80035a8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d01c      	beq.n	80035d8 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	4798      	blx	r3
    }
    return;
 80035a6:	e017      	b.n	80035d8 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d012      	beq.n	80035da <HAL_UART_IRQHandler+0x5c6>
 80035b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00c      	beq.n	80035da <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 fcf9 	bl	8003fb8 <UART_EndTransmit_IT>
    return;
 80035c6:	e008      	b.n	80035da <HAL_UART_IRQHandler+0x5c6>
      return;
 80035c8:	bf00      	nop
 80035ca:	e006      	b.n	80035da <HAL_UART_IRQHandler+0x5c6>
    return;
 80035cc:	bf00      	nop
 80035ce:	e004      	b.n	80035da <HAL_UART_IRQHandler+0x5c6>
      return;
 80035d0:	bf00      	nop
 80035d2:	e002      	b.n	80035da <HAL_UART_IRQHandler+0x5c6>
      return;
 80035d4:	bf00      	nop
 80035d6:	e000      	b.n	80035da <HAL_UART_IRQHandler+0x5c6>
    return;
 80035d8:	bf00      	nop
  }

}
 80035da:	37e8      	adds	r7, #232	; 0xe8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b92      	ldr	r3, [pc, #584]	; (8003894 <UART_SetConfig+0x274>)
 800364c:	4013      	ands	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	6979      	ldr	r1, [r7, #20]
 8003654:	430b      	orrs	r3, r1
 8003656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	430a      	orrs	r2, r1
 8003690:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a80      	ldr	r2, [pc, #512]	; (8003898 <UART_SetConfig+0x278>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d120      	bne.n	80036de <UART_SetConfig+0xbe>
 800369c:	4b7f      	ldr	r3, [pc, #508]	; (800389c <UART_SetConfig+0x27c>)
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d817      	bhi.n	80036d8 <UART_SetConfig+0xb8>
 80036a8:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <UART_SetConfig+0x90>)
 80036aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ae:	bf00      	nop
 80036b0:	080036c1 	.word	0x080036c1
 80036b4:	080036cd 	.word	0x080036cd
 80036b8:	080036d3 	.word	0x080036d3
 80036bc:	080036c7 	.word	0x080036c7
 80036c0:	2301      	movs	r3, #1
 80036c2:	77fb      	strb	r3, [r7, #31]
 80036c4:	e0b5      	b.n	8003832 <UART_SetConfig+0x212>
 80036c6:	2302      	movs	r3, #2
 80036c8:	77fb      	strb	r3, [r7, #31]
 80036ca:	e0b2      	b.n	8003832 <UART_SetConfig+0x212>
 80036cc:	2304      	movs	r3, #4
 80036ce:	77fb      	strb	r3, [r7, #31]
 80036d0:	e0af      	b.n	8003832 <UART_SetConfig+0x212>
 80036d2:	2308      	movs	r3, #8
 80036d4:	77fb      	strb	r3, [r7, #31]
 80036d6:	e0ac      	b.n	8003832 <UART_SetConfig+0x212>
 80036d8:	2310      	movs	r3, #16
 80036da:	77fb      	strb	r3, [r7, #31]
 80036dc:	e0a9      	b.n	8003832 <UART_SetConfig+0x212>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a6f      	ldr	r2, [pc, #444]	; (80038a0 <UART_SetConfig+0x280>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d124      	bne.n	8003732 <UART_SetConfig+0x112>
 80036e8:	4b6c      	ldr	r3, [pc, #432]	; (800389c <UART_SetConfig+0x27c>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036f4:	d011      	beq.n	800371a <UART_SetConfig+0xfa>
 80036f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80036fa:	d817      	bhi.n	800372c <UART_SetConfig+0x10c>
 80036fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003700:	d011      	beq.n	8003726 <UART_SetConfig+0x106>
 8003702:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003706:	d811      	bhi.n	800372c <UART_SetConfig+0x10c>
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <UART_SetConfig+0xf4>
 800370c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003710:	d006      	beq.n	8003720 <UART_SetConfig+0x100>
 8003712:	e00b      	b.n	800372c <UART_SetConfig+0x10c>
 8003714:	2300      	movs	r3, #0
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e08b      	b.n	8003832 <UART_SetConfig+0x212>
 800371a:	2302      	movs	r3, #2
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e088      	b.n	8003832 <UART_SetConfig+0x212>
 8003720:	2304      	movs	r3, #4
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e085      	b.n	8003832 <UART_SetConfig+0x212>
 8003726:	2308      	movs	r3, #8
 8003728:	77fb      	strb	r3, [r7, #31]
 800372a:	e082      	b.n	8003832 <UART_SetConfig+0x212>
 800372c:	2310      	movs	r3, #16
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	e07f      	b.n	8003832 <UART_SetConfig+0x212>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a5b      	ldr	r2, [pc, #364]	; (80038a4 <UART_SetConfig+0x284>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d124      	bne.n	8003786 <UART_SetConfig+0x166>
 800373c:	4b57      	ldr	r3, [pc, #348]	; (800389c <UART_SetConfig+0x27c>)
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003744:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003748:	d011      	beq.n	800376e <UART_SetConfig+0x14e>
 800374a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800374e:	d817      	bhi.n	8003780 <UART_SetConfig+0x160>
 8003750:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003754:	d011      	beq.n	800377a <UART_SetConfig+0x15a>
 8003756:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800375a:	d811      	bhi.n	8003780 <UART_SetConfig+0x160>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <UART_SetConfig+0x148>
 8003760:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003764:	d006      	beq.n	8003774 <UART_SetConfig+0x154>
 8003766:	e00b      	b.n	8003780 <UART_SetConfig+0x160>
 8003768:	2300      	movs	r3, #0
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	e061      	b.n	8003832 <UART_SetConfig+0x212>
 800376e:	2302      	movs	r3, #2
 8003770:	77fb      	strb	r3, [r7, #31]
 8003772:	e05e      	b.n	8003832 <UART_SetConfig+0x212>
 8003774:	2304      	movs	r3, #4
 8003776:	77fb      	strb	r3, [r7, #31]
 8003778:	e05b      	b.n	8003832 <UART_SetConfig+0x212>
 800377a:	2308      	movs	r3, #8
 800377c:	77fb      	strb	r3, [r7, #31]
 800377e:	e058      	b.n	8003832 <UART_SetConfig+0x212>
 8003780:	2310      	movs	r3, #16
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	e055      	b.n	8003832 <UART_SetConfig+0x212>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a47      	ldr	r2, [pc, #284]	; (80038a8 <UART_SetConfig+0x288>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d124      	bne.n	80037da <UART_SetConfig+0x1ba>
 8003790:	4b42      	ldr	r3, [pc, #264]	; (800389c <UART_SetConfig+0x27c>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003798:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800379c:	d011      	beq.n	80037c2 <UART_SetConfig+0x1a2>
 800379e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037a2:	d817      	bhi.n	80037d4 <UART_SetConfig+0x1b4>
 80037a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037a8:	d011      	beq.n	80037ce <UART_SetConfig+0x1ae>
 80037aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037ae:	d811      	bhi.n	80037d4 <UART_SetConfig+0x1b4>
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <UART_SetConfig+0x19c>
 80037b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037b8:	d006      	beq.n	80037c8 <UART_SetConfig+0x1a8>
 80037ba:	e00b      	b.n	80037d4 <UART_SetConfig+0x1b4>
 80037bc:	2300      	movs	r3, #0
 80037be:	77fb      	strb	r3, [r7, #31]
 80037c0:	e037      	b.n	8003832 <UART_SetConfig+0x212>
 80037c2:	2302      	movs	r3, #2
 80037c4:	77fb      	strb	r3, [r7, #31]
 80037c6:	e034      	b.n	8003832 <UART_SetConfig+0x212>
 80037c8:	2304      	movs	r3, #4
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e031      	b.n	8003832 <UART_SetConfig+0x212>
 80037ce:	2308      	movs	r3, #8
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e02e      	b.n	8003832 <UART_SetConfig+0x212>
 80037d4:	2310      	movs	r3, #16
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e02b      	b.n	8003832 <UART_SetConfig+0x212>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a33      	ldr	r2, [pc, #204]	; (80038ac <UART_SetConfig+0x28c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d124      	bne.n	800382e <UART_SetConfig+0x20e>
 80037e4:	4b2d      	ldr	r3, [pc, #180]	; (800389c <UART_SetConfig+0x27c>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80037ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037f0:	d011      	beq.n	8003816 <UART_SetConfig+0x1f6>
 80037f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037f6:	d817      	bhi.n	8003828 <UART_SetConfig+0x208>
 80037f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037fc:	d011      	beq.n	8003822 <UART_SetConfig+0x202>
 80037fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003802:	d811      	bhi.n	8003828 <UART_SetConfig+0x208>
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <UART_SetConfig+0x1f0>
 8003808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380c:	d006      	beq.n	800381c <UART_SetConfig+0x1fc>
 800380e:	e00b      	b.n	8003828 <UART_SetConfig+0x208>
 8003810:	2300      	movs	r3, #0
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e00d      	b.n	8003832 <UART_SetConfig+0x212>
 8003816:	2302      	movs	r3, #2
 8003818:	77fb      	strb	r3, [r7, #31]
 800381a:	e00a      	b.n	8003832 <UART_SetConfig+0x212>
 800381c:	2304      	movs	r3, #4
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e007      	b.n	8003832 <UART_SetConfig+0x212>
 8003822:	2308      	movs	r3, #8
 8003824:	77fb      	strb	r3, [r7, #31]
 8003826:	e004      	b.n	8003832 <UART_SetConfig+0x212>
 8003828:	2310      	movs	r3, #16
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e001      	b.n	8003832 <UART_SetConfig+0x212>
 800382e:	2310      	movs	r3, #16
 8003830:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800383a:	d16b      	bne.n	8003914 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800383c:	7ffb      	ldrb	r3, [r7, #31]
 800383e:	2b08      	cmp	r3, #8
 8003840:	d838      	bhi.n	80038b4 <UART_SetConfig+0x294>
 8003842:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <UART_SetConfig+0x228>)
 8003844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003848:	0800386d 	.word	0x0800386d
 800384c:	08003875 	.word	0x08003875
 8003850:	0800387d 	.word	0x0800387d
 8003854:	080038b5 	.word	0x080038b5
 8003858:	08003883 	.word	0x08003883
 800385c:	080038b5 	.word	0x080038b5
 8003860:	080038b5 	.word	0x080038b5
 8003864:	080038b5 	.word	0x080038b5
 8003868:	0800388b 	.word	0x0800388b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800386c:	f7fe ff4e 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8003870:	61b8      	str	r0, [r7, #24]
        break;
 8003872:	e024      	b.n	80038be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003874:	f7fe ff6c 	bl	8002750 <HAL_RCC_GetPCLK2Freq>
 8003878:	61b8      	str	r0, [r7, #24]
        break;
 800387a:	e020      	b.n	80038be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <UART_SetConfig+0x290>)
 800387e:	61bb      	str	r3, [r7, #24]
        break;
 8003880:	e01d      	b.n	80038be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003882:	f7fe fee3 	bl	800264c <HAL_RCC_GetSysClockFreq>
 8003886:	61b8      	str	r0, [r7, #24]
        break;
 8003888:	e019      	b.n	80038be <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800388a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800388e:	61bb      	str	r3, [r7, #24]
        break;
 8003890:	e015      	b.n	80038be <UART_SetConfig+0x29e>
 8003892:	bf00      	nop
 8003894:	efff69f3 	.word	0xefff69f3
 8003898:	40013800 	.word	0x40013800
 800389c:	40021000 	.word	0x40021000
 80038a0:	40004400 	.word	0x40004400
 80038a4:	40004800 	.word	0x40004800
 80038a8:	40004c00 	.word	0x40004c00
 80038ac:	40005000 	.word	0x40005000
 80038b0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	77bb      	strb	r3, [r7, #30]
        break;
 80038bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d073      	beq.n	80039ac <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	005a      	lsls	r2, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	085b      	lsrs	r3, r3, #1
 80038ce:	441a      	add	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	2b0f      	cmp	r3, #15
 80038de:	d916      	bls.n	800390e <UART_SetConfig+0x2ee>
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e6:	d212      	bcs.n	800390e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f023 030f 	bic.w	r3, r3, #15
 80038f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	89fb      	ldrh	r3, [r7, #14]
 8003900:	4313      	orrs	r3, r2
 8003902:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	89fa      	ldrh	r2, [r7, #14]
 800390a:	60da      	str	r2, [r3, #12]
 800390c:	e04e      	b.n	80039ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	77bb      	strb	r3, [r7, #30]
 8003912:	e04b      	b.n	80039ac <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003914:	7ffb      	ldrb	r3, [r7, #31]
 8003916:	2b08      	cmp	r3, #8
 8003918:	d827      	bhi.n	800396a <UART_SetConfig+0x34a>
 800391a:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <UART_SetConfig+0x300>)
 800391c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003920:	08003945 	.word	0x08003945
 8003924:	0800394d 	.word	0x0800394d
 8003928:	08003955 	.word	0x08003955
 800392c:	0800396b 	.word	0x0800396b
 8003930:	0800395b 	.word	0x0800395b
 8003934:	0800396b 	.word	0x0800396b
 8003938:	0800396b 	.word	0x0800396b
 800393c:	0800396b 	.word	0x0800396b
 8003940:	08003963 	.word	0x08003963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003944:	f7fe fee2 	bl	800270c <HAL_RCC_GetPCLK1Freq>
 8003948:	61b8      	str	r0, [r7, #24]
        break;
 800394a:	e013      	b.n	8003974 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800394c:	f7fe ff00 	bl	8002750 <HAL_RCC_GetPCLK2Freq>
 8003950:	61b8      	str	r0, [r7, #24]
        break;
 8003952:	e00f      	b.n	8003974 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003954:	4b1b      	ldr	r3, [pc, #108]	; (80039c4 <UART_SetConfig+0x3a4>)
 8003956:	61bb      	str	r3, [r7, #24]
        break;
 8003958:	e00c      	b.n	8003974 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800395a:	f7fe fe77 	bl	800264c <HAL_RCC_GetSysClockFreq>
 800395e:	61b8      	str	r0, [r7, #24]
        break;
 8003960:	e008      	b.n	8003974 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003966:	61bb      	str	r3, [r7, #24]
        break;
 8003968:	e004      	b.n	8003974 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	77bb      	strb	r3, [r7, #30]
        break;
 8003972:	bf00      	nop
    }

    if (pclk != 0U)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d018      	beq.n	80039ac <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	085a      	lsrs	r2, r3, #1
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	441a      	add	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	fbb2 f3f3 	udiv	r3, r2, r3
 800398c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b0f      	cmp	r3, #15
 8003992:	d909      	bls.n	80039a8 <UART_SetConfig+0x388>
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399a:	d205      	bcs.n	80039a8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	b29a      	uxth	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	e001      	b.n	80039ac <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3720      	adds	r7, #32
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	007a1200 	.word	0x007a1200

080039c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00a      	beq.n	8003a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00a      	beq.n	8003a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	f003 0320 	and.w	r3, r3, #32
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01a      	beq.n	8003ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac6:	d10a      	bne.n	8003ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  }
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b098      	sub	sp, #96	; 0x60
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b1c:	f7fd f88a 	bl	8000c34 <HAL_GetTick>
 8003b20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d12e      	bne.n	8003b8e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f88c 	bl	8003c5c <UART_WaitOnFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d021      	beq.n	8003b8e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b5e:	653b      	str	r3, [r7, #80]	; 0x50
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b68:	647b      	str	r3, [r7, #68]	; 0x44
 8003b6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e6      	bne.n	8003b4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e062      	b.n	8003c54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d149      	bne.n	8003c30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f856 	bl	8003c5c <UART_WaitOnFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d03c      	beq.n	8003c30 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	e853 3f00 	ldrex	r3, [r3]
 8003bc2:	623b      	str	r3, [r7, #32]
   return(result);
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8003bd6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bdc:	e841 2300 	strex	r3, r2, [r1]
 8003be0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1e6      	bne.n	8003bb6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3308      	adds	r3, #8
 8003bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3308      	adds	r3, #8
 8003c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c08:	61fa      	str	r2, [r7, #28]
 8003c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	69b9      	ldr	r1, [r7, #24]
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	617b      	str	r3, [r7, #20]
   return(result);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e5      	bne.n	8003be8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e011      	b.n	8003c54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3758      	adds	r7, #88	; 0x58
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	603b      	str	r3, [r7, #0]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c6c:	e04f      	b.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c74:	d04b      	beq.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c76:	f7fc ffdd 	bl	8000c34 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d302      	bcc.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e04e      	b.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d037      	beq.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	2b80      	cmp	r3, #128	; 0x80
 8003ca2:	d034      	beq.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b40      	cmp	r3, #64	; 0x40
 8003ca8:	d031      	beq.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d110      	bne.n	8003cda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2208      	movs	r2, #8
 8003cbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f8ff 	bl	8003ec4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2208      	movs	r2, #8
 8003cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e029      	b.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ce8:	d111      	bne.n	8003d0e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f8e5 	bl	8003ec4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e00f      	b.n	8003d2e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69da      	ldr	r2, [r3, #28]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4013      	ands	r3, r2
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	bf0c      	ite	eq
 8003d1e:	2301      	moveq	r3, #1
 8003d20:	2300      	movne	r3, #0
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	461a      	mov	r2, r3
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d0a0      	beq.n	8003c6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b097      	sub	sp, #92	; 0x5c
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	4613      	mov	r3, r2
 8003d44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	88fa      	ldrh	r2, [r7, #6]
 8003d50:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	88fa      	ldrh	r2, [r7, #6]
 8003d58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6a:	d10e      	bne.n	8003d8a <UART_Start_Receive_IT+0x52>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d105      	bne.n	8003d80 <UART_Start_Receive_IT+0x48>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d7e:	e02d      	b.n	8003ddc <UART_Start_Receive_IT+0xa4>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	22ff      	movs	r2, #255	; 0xff
 8003d84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d88:	e028      	b.n	8003ddc <UART_Start_Receive_IT+0xa4>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10d      	bne.n	8003dae <UART_Start_Receive_IT+0x76>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d104      	bne.n	8003da4 <UART_Start_Receive_IT+0x6c>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	22ff      	movs	r2, #255	; 0xff
 8003d9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003da2:	e01b      	b.n	8003ddc <UART_Start_Receive_IT+0xa4>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	227f      	movs	r2, #127	; 0x7f
 8003da8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dac:	e016      	b.n	8003ddc <UART_Start_Receive_IT+0xa4>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003db6:	d10d      	bne.n	8003dd4 <UART_Start_Receive_IT+0x9c>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d104      	bne.n	8003dca <UART_Start_Receive_IT+0x92>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	227f      	movs	r2, #127	; 0x7f
 8003dc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dc8:	e008      	b.n	8003ddc <UART_Start_Receive_IT+0xa4>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	223f      	movs	r2, #63	; 0x3f
 8003dce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003dd2:	e003      	b.n	8003ddc <UART_Start_Receive_IT+0xa4>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2222      	movs	r2, #34	; 0x22
 8003de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3308      	adds	r3, #8
 8003df2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	657b      	str	r3, [r7, #84]	; 0x54
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3308      	adds	r3, #8
 8003e0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e0c:	64ba      	str	r2, [r7, #72]	; 0x48
 8003e0e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e5      	bne.n	8003dec <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e28:	d107      	bne.n	8003e3a <UART_Start_Receive_IT+0x102>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d103      	bne.n	8003e3a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4a21      	ldr	r2, [pc, #132]	; (8003ebc <UART_Start_Receive_IT+0x184>)
 8003e36:	669a      	str	r2, [r3, #104]	; 0x68
 8003e38:	e002      	b.n	8003e40 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4a20      	ldr	r2, [pc, #128]	; (8003ec0 <UART_Start_Receive_IT+0x188>)
 8003e3e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d019      	beq.n	8003e7c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	461a      	mov	r2, r3
 8003e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e66:	637b      	str	r3, [r7, #52]	; 0x34
 8003e68:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e6      	bne.n	8003e48 <UART_Start_Receive_IT+0x110>
 8003e7a:	e018      	b.n	8003eae <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	613b      	str	r3, [r7, #16]
   return(result);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f043 0320 	orr.w	r3, r3, #32
 8003e90:	653b      	str	r3, [r7, #80]	; 0x50
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	461a      	mov	r2, r3
 8003e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e9a:	623b      	str	r3, [r7, #32]
 8003e9c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	69f9      	ldr	r1, [r7, #28]
 8003ea0:	6a3a      	ldr	r2, [r7, #32]
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e6      	bne.n	8003e7c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	375c      	adds	r7, #92	; 0x5c
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr
 8003ebc:	080041b5 	.word	0x080041b5
 8003ec0:	0800400d 	.word	0x0800400d

08003ec4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b095      	sub	sp, #84	; 0x54
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed4:	e853 3f00 	ldrex	r3, [r3]
 8003ed8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eea:	643b      	str	r3, [r7, #64]	; 0x40
 8003eec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ef2:	e841 2300 	strex	r3, r2, [r1]
 8003ef6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e6      	bne.n	8003ecc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3308      	adds	r3, #8
 8003f04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	e853 3f00 	ldrex	r3, [r3]
 8003f0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e5      	bne.n	8003efe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d118      	bne.n	8003f6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f023 0310 	bic.w	r3, r3, #16
 8003f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6979      	ldr	r1, [r7, #20]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	613b      	str	r3, [r7, #16]
   return(result);
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e6      	bne.n	8003f3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f80:	bf00      	nop
 8003f82:	3754      	adds	r7, #84	; 0x54
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f7ff fb22 	bl	80035f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fb0:	bf00      	nop
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	61bb      	str	r3, [r7, #24]
 8003fe0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	6979      	ldr	r1, [r7, #20]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	613b      	str	r3, [r7, #16]
   return(result);
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e6      	bne.n	8003fc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff faee 	bl	80035e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004004:	bf00      	nop
 8004006:	3720      	adds	r7, #32
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b09c      	sub	sp, #112	; 0x70
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800401a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004024:	2b22      	cmp	r3, #34	; 0x22
 8004026:	f040 80b9 	bne.w	800419c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004030:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004034:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004038:	b2d9      	uxtb	r1, r3
 800403a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800403e:	b2da      	uxtb	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004044:	400a      	ands	r2, r1
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	f040 809c 	bne.w	80041ac <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004084:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004088:	66bb      	str	r3, [r7, #104]	; 0x68
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004092:	65bb      	str	r3, [r7, #88]	; 0x58
 8004094:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e6      	bne.n	8004074 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3308      	adds	r3, #8
 80040ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b8:	f023 0301 	bic.w	r3, r3, #1
 80040bc:	667b      	str	r3, [r7, #100]	; 0x64
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3308      	adds	r3, #8
 80040c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040c6:	647a      	str	r2, [r7, #68]	; 0x44
 80040c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e5      	bne.n	80040a6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d018      	beq.n	800412e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	623b      	str	r3, [r7, #32]
   return(result);
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004110:	663b      	str	r3, [r7, #96]	; 0x60
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800411a:	633b      	str	r3, [r7, #48]	; 0x30
 800411c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e6      	bne.n	80040fc <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004132:	2b01      	cmp	r3, #1
 8004134:	d12e      	bne.n	8004194 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	e853 3f00 	ldrex	r3, [r3]
 8004148:	60fb      	str	r3, [r7, #12]
   return(result);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f023 0310 	bic.w	r3, r3, #16
 8004150:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800415a:	61fb      	str	r3, [r7, #28]
 800415c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	69b9      	ldr	r1, [r7, #24]
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	617b      	str	r3, [r7, #20]
   return(result);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e6      	bne.n	800413c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b10      	cmp	r3, #16
 800417a:	d103      	bne.n	8004184 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2210      	movs	r2, #16
 8004182:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800418a:	4619      	mov	r1, r3
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff fa3b 	bl	8003608 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004192:	e00b      	b.n	80041ac <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7fc fc95 	bl	8000ac4 <HAL_UART_RxCpltCallback>
}
 800419a:	e007      	b.n	80041ac <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0208 	orr.w	r2, r2, #8
 80041aa:	619a      	str	r2, [r3, #24]
}
 80041ac:	bf00      	nop
 80041ae:	3770      	adds	r7, #112	; 0x70
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b09c      	sub	sp, #112	; 0x70
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80041c2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041cc:	2b22      	cmp	r3, #34	; 0x22
 80041ce:	f040 80b9 	bne.w	8004344 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80041d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80041e2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80041e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80041ea:	4013      	ands	r3, r2
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f6:	1c9a      	adds	r2, r3, #2
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	f040 809c 	bne.w	8004354 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800422a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004230:	667b      	str	r3, [r7, #100]	; 0x64
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800423a:	657b      	str	r3, [r7, #84]	; 0x54
 800423c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004240:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e6      	bne.n	800421c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3308      	adds	r3, #8
 8004254:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	663b      	str	r3, [r7, #96]	; 0x60
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3308      	adds	r3, #8
 800426c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800426e:	643a      	str	r2, [r7, #64]	; 0x40
 8004270:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004274:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800427c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e5      	bne.n	800424e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2220      	movs	r2, #32
 8004286:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d018      	beq.n	80042d6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e6      	bne.n	80042a4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d12e      	bne.n	800433c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f023 0310 	bic.w	r3, r3, #16
 80042f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6979      	ldr	r1, [r7, #20]
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	613b      	str	r3, [r7, #16]
   return(result);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e6      	bne.n	80042e4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b10      	cmp	r3, #16
 8004322:	d103      	bne.n	800432c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2210      	movs	r2, #16
 800432a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004332:	4619      	mov	r1, r3
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f7ff f967 	bl	8003608 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800433a:	e00b      	b.n	8004354 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f7fc fbc1 	bl	8000ac4 <HAL_UART_RxCpltCallback>
}
 8004342:	e007      	b.n	8004354 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699a      	ldr	r2, [r3, #24]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0208 	orr.w	r2, r2, #8
 8004352:	619a      	str	r2, [r3, #24]
}
 8004354:	bf00      	nop
 8004356:	3770      	adds	r7, #112	; 0x70
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <memset>:
 8004370:	4402      	add	r2, r0
 8004372:	4603      	mov	r3, r0
 8004374:	4293      	cmp	r3, r2
 8004376:	d100      	bne.n	800437a <memset+0xa>
 8004378:	4770      	bx	lr
 800437a:	f803 1b01 	strb.w	r1, [r3], #1
 800437e:	e7f9      	b.n	8004374 <memset+0x4>

08004380 <__libc_init_array>:
 8004380:	b570      	push	{r4, r5, r6, lr}
 8004382:	4d0d      	ldr	r5, [pc, #52]	; (80043b8 <__libc_init_array+0x38>)
 8004384:	4c0d      	ldr	r4, [pc, #52]	; (80043bc <__libc_init_array+0x3c>)
 8004386:	1b64      	subs	r4, r4, r5
 8004388:	10a4      	asrs	r4, r4, #2
 800438a:	2600      	movs	r6, #0
 800438c:	42a6      	cmp	r6, r4
 800438e:	d109      	bne.n	80043a4 <__libc_init_array+0x24>
 8004390:	4d0b      	ldr	r5, [pc, #44]	; (80043c0 <__libc_init_array+0x40>)
 8004392:	4c0c      	ldr	r4, [pc, #48]	; (80043c4 <__libc_init_array+0x44>)
 8004394:	f000 f826 	bl	80043e4 <_init>
 8004398:	1b64      	subs	r4, r4, r5
 800439a:	10a4      	asrs	r4, r4, #2
 800439c:	2600      	movs	r6, #0
 800439e:	42a6      	cmp	r6, r4
 80043a0:	d105      	bne.n	80043ae <__libc_init_array+0x2e>
 80043a2:	bd70      	pop	{r4, r5, r6, pc}
 80043a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a8:	4798      	blx	r3
 80043aa:	3601      	adds	r6, #1
 80043ac:	e7ee      	b.n	800438c <__libc_init_array+0xc>
 80043ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80043b2:	4798      	blx	r3
 80043b4:	3601      	adds	r6, #1
 80043b6:	e7f2      	b.n	800439e <__libc_init_array+0x1e>
 80043b8:	08004438 	.word	0x08004438
 80043bc:	08004438 	.word	0x08004438
 80043c0:	08004438 	.word	0x08004438
 80043c4:	0800443c 	.word	0x0800443c

080043c8 <memcpy>:
 80043c8:	440a      	add	r2, r1
 80043ca:	4291      	cmp	r1, r2
 80043cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80043d0:	d100      	bne.n	80043d4 <memcpy+0xc>
 80043d2:	4770      	bx	lr
 80043d4:	b510      	push	{r4, lr}
 80043d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043de:	4291      	cmp	r1, r2
 80043e0:	d1f9      	bne.n	80043d6 <memcpy+0xe>
 80043e2:	bd10      	pop	{r4, pc}

080043e4 <_init>:
 80043e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e6:	bf00      	nop
 80043e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ea:	bc08      	pop	{r3}
 80043ec:	469e      	mov	lr, r3
 80043ee:	4770      	bx	lr

080043f0 <_fini>:
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	bf00      	nop
 80043f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f6:	bc08      	pop	{r3}
 80043f8:	469e      	mov	lr, r3
 80043fa:	4770      	bx	lr
