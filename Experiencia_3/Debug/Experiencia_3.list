
Experiencia_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004064  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080041f8  080041f8  000141f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004238  08004238  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004238  08004238  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004238  08004238  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004238  08004238  00014238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000354  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000360  20000360  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000be73  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002041  00000000  00000000  0002bef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008d8  00000000  00000000  0002df38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006b7  00000000  00000000  0002e810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020b9a  00000000  00000000  0002eec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000dcbb  00000000  00000000  0004fa61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5829  00000000  00000000  0005d71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002240  00000000  00000000  00122f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00125188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080041e0 	.word	0x080041e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080041e0 	.word	0x080041e0

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b08c      	sub	sp, #48	; 0x30
 80001e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ea:	f107 031c 	add.w	r3, r7, #28
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]
 80001f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001fa:	4b51      	ldr	r3, [pc, #324]	; (8000340 <MX_GPIO_Init+0x15c>)
 80001fc:	695b      	ldr	r3, [r3, #20]
 80001fe:	4a50      	ldr	r2, [pc, #320]	; (8000340 <MX_GPIO_Init+0x15c>)
 8000200:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000204:	6153      	str	r3, [r2, #20]
 8000206:	4b4e      	ldr	r3, [pc, #312]	; (8000340 <MX_GPIO_Init+0x15c>)
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800020e:	61bb      	str	r3, [r7, #24]
 8000210:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000212:	4b4b      	ldr	r3, [pc, #300]	; (8000340 <MX_GPIO_Init+0x15c>)
 8000214:	695b      	ldr	r3, [r3, #20]
 8000216:	4a4a      	ldr	r2, [pc, #296]	; (8000340 <MX_GPIO_Init+0x15c>)
 8000218:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800021c:	6153      	str	r3, [r2, #20]
 800021e:	4b48      	ldr	r3, [pc, #288]	; (8000340 <MX_GPIO_Init+0x15c>)
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000226:	617b      	str	r3, [r7, #20]
 8000228:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800022a:	4b45      	ldr	r3, [pc, #276]	; (8000340 <MX_GPIO_Init+0x15c>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	4a44      	ldr	r2, [pc, #272]	; (8000340 <MX_GPIO_Init+0x15c>)
 8000230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000234:	6153      	str	r3, [r2, #20]
 8000236:	4b42      	ldr	r3, [pc, #264]	; (8000340 <MX_GPIO_Init+0x15c>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800023e:	613b      	str	r3, [r7, #16]
 8000240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000242:	4b3f      	ldr	r3, [pc, #252]	; (8000340 <MX_GPIO_Init+0x15c>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	4a3e      	ldr	r2, [pc, #248]	; (8000340 <MX_GPIO_Init+0x15c>)
 8000248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800024c:	6153      	str	r3, [r2, #20]
 800024e:	4b3c      	ldr	r3, [pc, #240]	; (8000340 <MX_GPIO_Init+0x15c>)
 8000250:	695b      	ldr	r3, [r3, #20]
 8000252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800025a:	4b39      	ldr	r3, [pc, #228]	; (8000340 <MX_GPIO_Init+0x15c>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	4a38      	ldr	r2, [pc, #224]	; (8000340 <MX_GPIO_Init+0x15c>)
 8000260:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000264:	6153      	str	r3, [r2, #20]
 8000266:	4b36      	ldr	r3, [pc, #216]	; (8000340 <MX_GPIO_Init+0x15c>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800026e:	60bb      	str	r3, [r7, #8]
 8000270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b33      	ldr	r3, [pc, #204]	; (8000340 <MX_GPIO_Init+0x15c>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	4a32      	ldr	r2, [pc, #200]	; (8000340 <MX_GPIO_Init+0x15c>)
 8000278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800027c:	6153      	str	r3, [r2, #20]
 800027e:	4b30      	ldr	r3, [pc, #192]	; (8000340 <MX_GPIO_Init+0x15c>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000290:	482c      	ldr	r0, [pc, #176]	; (8000344 <MX_GPIO_Init+0x160>)
 8000292:	f000 fef1 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_E_GPIO_Port, RS485_E_Pin, GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800029c:	482a      	ldr	r0, [pc, #168]	; (8000348 <MX_GPIO_Init+0x164>)
 800029e:	f000 feeb 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2140      	movs	r1, #64	; 0x40
 80002a6:	4829      	ldr	r0, [pc, #164]	; (800034c <MX_GPIO_Init+0x168>)
 80002a8:	f000 fee6 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80002ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80002b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b8:	2300      	movs	r3, #0
 80002ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80002bc:	f107 031c 	add.w	r3, r7, #28
 80002c0:	4619      	mov	r1, r3
 80002c2:	4823      	ldr	r0, [pc, #140]	; (8000350 <MX_GPIO_Init+0x16c>)
 80002c4:	f000 fd4e 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80002c8:	f244 0381 	movw	r3, #16513	; 0x4081
 80002cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ce:	2301      	movs	r3, #1
 80002d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d2:	2300      	movs	r3, #0
 80002d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d6:	2300      	movs	r3, #0
 80002d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002da:	f107 031c 	add.w	r3, r7, #28
 80002de:	4619      	mov	r1, r3
 80002e0:	4818      	ldr	r0, [pc, #96]	; (8000344 <MX_GPIO_Init+0x160>)
 80002e2:	f000 fd3f 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_E_Pin;
 80002e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ec:	2301      	movs	r3, #1
 80002ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f0:	2300      	movs	r3, #0
 80002f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f4:	2300      	movs	r3, #0
 80002f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_E_GPIO_Port, &GPIO_InitStruct);
 80002f8:	f107 031c 	add.w	r3, r7, #28
 80002fc:	4619      	mov	r1, r3
 80002fe:	4812      	ldr	r0, [pc, #72]	; (8000348 <MX_GPIO_Init+0x164>)
 8000300:	f000 fd30 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000304:	2340      	movs	r3, #64	; 0x40
 8000306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000308:	2301      	movs	r3, #1
 800030a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030c:	2300      	movs	r3, #0
 800030e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000310:	2300      	movs	r3, #0
 8000312:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000314:	f107 031c 	add.w	r3, r7, #28
 8000318:	4619      	mov	r1, r3
 800031a:	480c      	ldr	r0, [pc, #48]	; (800034c <MX_GPIO_Init+0x168>)
 800031c:	f000 fd22 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000320:	2380      	movs	r3, #128	; 0x80
 8000322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000324:	2300      	movs	r3, #0
 8000326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000328:	2300      	movs	r3, #0
 800032a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800032c:	f107 031c 	add.w	r3, r7, #28
 8000330:	4619      	mov	r1, r3
 8000332:	4806      	ldr	r0, [pc, #24]	; (800034c <MX_GPIO_Init+0x168>)
 8000334:	f000 fd16 	bl	8000d64 <HAL_GPIO_Init>

}
 8000338:	bf00      	nop
 800033a:	3730      	adds	r7, #48	; 0x30
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	40021000 	.word	0x40021000
 8000344:	48000400 	.word	0x48000400
 8000348:	48001400 	.word	0x48001400
 800034c:	48001800 	.word	0x48001800
 8000350:	48000800 	.word	0x48000800

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f000 faec 	bl	8000934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f840 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f7ff ff40 	bl	80001e4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000364:	f000 f8aa 	bl	80004bc <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000368:	f000 f98e 	bl	8000688 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800036c:	f000 f95c 	bl	8000628 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_MspInit(&huart1);
 8000370:	4815      	ldr	r0, [pc, #84]	; (80003c8 <main+0x74>)
 8000372:	f000 f9b9 	bl	80006e8 <HAL_UART_MspInit>
  HAL_UART_MspInit(&huart3);
 8000376:	4815      	ldr	r0, [pc, #84]	; (80003cc <main+0x78>)
 8000378:	f000 f9b6 	bl	80006e8 <HAL_UART_MspInit>

  HAL_GPIO_WritePin(RS485_E_GPIO_Port, RS485_E_Pin, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000382:	4813      	ldr	r0, [pc, #76]	; (80003d0 <main+0x7c>)
 8000384:	f000 fe78 	bl	8001078 <HAL_GPIO_WritePin>
  if(HAL_UART_Receive_IT(&huart1, &RxByte, 1) != HAL_OK)
 8000388:	2201      	movs	r2, #1
 800038a:	4912      	ldr	r1, [pc, #72]	; (80003d4 <main+0x80>)
 800038c:	480e      	ldr	r0, [pc, #56]	; (80003c8 <main+0x74>)
 800038e:	f002 fcfb 	bl	8002d88 <HAL_UART_Receive_IT>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <main+0x48>
  {
	  Error_Handler();
 8000398:	f000 f88a 	bl	80004b0 <Error_Handler>
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#if RX_TX
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2101      	movs	r1, #1
 80003a0:	480d      	ldr	r0, [pc, #52]	; (80003d8 <main+0x84>)
 80003a2:	f000 fe69 	bl	8001078 <HAL_GPIO_WritePin>
	RS485_transmit_data((uint8_t *)"HOLA!");
 80003a6:	480d      	ldr	r0, [pc, #52]	; (80003dc <main+0x88>)
 80003a8:	f000 fa32 	bl	8000810 <RS485_transmit_data>
	HAL_Delay(1000);
 80003ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003b0:	f000 fb26 	bl	8000a00 <HAL_Delay>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2101      	movs	r1, #1
 80003b8:	4807      	ldr	r0, [pc, #28]	; (80003d8 <main+0x84>)
 80003ba:	f000 fe5d 	bl	8001078 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80003be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c2:	f000 fb1d 	bl	8000a00 <HAL_Delay>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80003c6:	e7e9      	b.n	800039c <main+0x48>
 80003c8:	2000024c 	.word	0x2000024c
 80003cc:	200002d4 	.word	0x200002d4
 80003d0:	48001400 	.word	0x48001400
 80003d4:	20000049 	.word	0x20000049
 80003d8:	48000400 	.word	0x48000400
 80003dc:	080041f8 	.word	0x080041f8

080003e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b0a6      	sub	sp, #152	; 0x98
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003ea:	2228      	movs	r2, #40	; 0x28
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f003 febc 	bl	800416c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2258      	movs	r2, #88	; 0x58
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f003 feae 	bl	800416c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000410:	2309      	movs	r3, #9
 8000412:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000414:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000418:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800041a:	2301      	movs	r3, #1
 800041c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800041e:	2301      	movs	r3, #1
 8000420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000424:	2302      	movs	r3, #2
 8000426:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800042a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800042e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000432:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800043a:	2300      	movs	r3, #0
 800043c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000440:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000444:	4618      	mov	r0, r3
 8000446:	f000 fe2f 	bl	80010a8 <HAL_RCC_OscConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000450:	f000 f82e 	bl	80004b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000454:	230f      	movs	r3, #15
 8000456:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000458:	2302      	movs	r3, #2
 800045a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000464:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000466:	2300      	movs	r3, #0
 8000468:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800046a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800046e:	2102      	movs	r1, #2
 8000470:	4618      	mov	r0, r3
 8000472:	f001 fe6d 	bl	8002150 <HAL_RCC_ClockConfig>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800047c:	f000 f818 	bl	80004b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000480:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <SystemClock_Config+0xcc>)
 8000482:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000488:	2300      	movs	r3, #0
 800048a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800048c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000490:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	4618      	mov	r0, r3
 8000496:	f002 f87b 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80004a0:	f000 f806 	bl	80004b0 <Error_Handler>
  }
}
 80004a4:	bf00      	nop
 80004a6:	3798      	adds	r7, #152	; 0x98
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	00010005 	.word	0x00010005

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004b8:	e7fe      	b.n	80004b8 <Error_Handler+0x8>
	...

080004bc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_RTC_Init+0x44>)
 80004c2:	4a10      	ldr	r2, [pc, #64]	; (8000504 <MX_RTC_Init+0x48>)
 80004c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <MX_RTC_Init+0x44>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <MX_RTC_Init+0x44>)
 80004ce:	227f      	movs	r2, #127	; 0x7f
 80004d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <MX_RTC_Init+0x44>)
 80004d4:	22ff      	movs	r2, #255	; 0xff
 80004d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80004d8:	4b09      	ldr	r3, [pc, #36]	; (8000500 <MX_RTC_Init+0x44>)
 80004da:	2200      	movs	r2, #0
 80004dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <MX_RTC_Init+0x44>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80004e4:	4b06      	ldr	r3, [pc, #24]	; (8000500 <MX_RTC_Init+0x44>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80004ea:	4805      	ldr	r0, [pc, #20]	; (8000500 <MX_RTC_Init+0x44>)
 80004ec:	f002 fa6e 	bl	80029cc <HAL_RTC_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80004f6:	f7ff ffdb 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000028 	.word	0x20000028
 8000504:	40002800 	.word	0x40002800

08000508 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0d      	ldr	r2, [pc, #52]	; (800054c <HAL_RTC_MspInit+0x44>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d111      	bne.n	800053e <HAL_RTC_MspInit+0x36>
 800051a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800051e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	fa93 f3a3 	rbit	r3, r3
 8000526:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000528:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800052a:	fab3 f383 	clz	r3, r3
 800052e:	b2db      	uxtb	r3, r3
 8000530:	461a      	mov	r2, r3
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <HAL_RTC_MspInit+0x48>)
 8000534:	4413      	add	r3, r2
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	461a      	mov	r2, r3
 800053a:	2301      	movs	r3, #1
 800053c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40002800 	.word	0x40002800
 8000550:	10908100 	.word	0x10908100

08000554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <HAL_MspInit+0x44>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	4a0e      	ldr	r2, [pc, #56]	; (8000598 <HAL_MspInit+0x44>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6193      	str	r3, [r2, #24]
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <HAL_MspInit+0x44>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <HAL_MspInit+0x44>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	4a08      	ldr	r2, [pc, #32]	; (8000598 <HAL_MspInit+0x44>)
 8000578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057c:	61d3      	str	r3, [r2, #28]
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_MspInit+0x44>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <NMI_Handler+0x4>

080005a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <HardFault_Handler+0x4>

080005a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <MemManage_Handler+0x4>

080005ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <BusFault_Handler+0x4>

080005b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <UsageFault_Handler+0x4>

080005ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e8:	f000 f9ea 	bl	80009c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <USART1_IRQHandler+0x10>)
 80005f6:	f002 fc0b 	bl	8002e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000024c 	.word	0x2000024c

08000604 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <SystemInit+0x20>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <SystemInit+0x20>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_USART1_UART_Init+0x58>)
 800062e:	4a15      	ldr	r2, [pc, #84]	; (8000684 <MX_USART1_UART_Init+0x5c>)
 8000630:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000634:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000638:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_USART1_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_USART1_UART_Init+0x58>)
 800064e:	220c      	movs	r2, #12
 8000650:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_USART1_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_USART1_UART_Init+0x58>)
 8000666:	2200      	movs	r2, #0
 8000668:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_USART1_UART_Init+0x58>)
 800066c:	f002 fab4 	bl	8002bd8 <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000676:	f7ff ff1b 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000024c 	.word	0x2000024c
 8000684:	40013800 	.word	0x40013800

08000688 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_USART3_UART_Init+0x58>)
 800068e:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <MX_USART3_UART_Init+0x5c>)
 8000690:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000692:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_USART3_UART_Init+0x58>)
 8000694:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000698:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_USART3_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_USART3_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_USART3_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_USART3_UART_Init+0x58>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_USART3_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_USART3_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_USART3_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_USART3_UART_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_USART3_UART_Init+0x58>)
 80006cc:	f002 fa84 	bl	8002bd8 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006d6:	f7ff feeb 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200002d4 	.word	0x200002d4
 80006e4:	40004800 	.word	0x40004800

080006e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a32      	ldr	r2, [pc, #200]	; (80007d0 <HAL_UART_MspInit+0xe8>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d130      	bne.n	800076c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800070a:	4b32      	ldr	r3, [pc, #200]	; (80007d4 <HAL_UART_MspInit+0xec>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	4a31      	ldr	r2, [pc, #196]	; (80007d4 <HAL_UART_MspInit+0xec>)
 8000710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000714:	6193      	str	r3, [r2, #24]
 8000716:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <HAL_UART_MspInit+0xec>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <HAL_UART_MspInit+0xec>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a2b      	ldr	r2, [pc, #172]	; (80007d4 <HAL_UART_MspInit+0xec>)
 8000728:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <HAL_UART_MspInit+0xec>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800073a:	2330      	movs	r3, #48	; 0x30
 800073c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800074a:	2307      	movs	r3, #7
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	4619      	mov	r1, r3
 8000754:	4820      	ldr	r0, [pc, #128]	; (80007d8 <HAL_UART_MspInit+0xf0>)
 8000756:	f000 fb05 	bl	8000d64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	2025      	movs	r0, #37	; 0x25
 8000760:	f000 fa4d 	bl	8000bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000764:	2025      	movs	r0, #37	; 0x25
 8000766:	f000 fa66 	bl	8000c36 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800076a:	e02d      	b.n	80007c8 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a1a      	ldr	r2, [pc, #104]	; (80007dc <HAL_UART_MspInit+0xf4>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d128      	bne.n	80007c8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <HAL_UART_MspInit+0xec>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a16      	ldr	r2, [pc, #88]	; (80007d4 <HAL_UART_MspInit+0xec>)
 800077c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000780:	61d3      	str	r3, [r2, #28]
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <HAL_UART_MspInit+0xec>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <HAL_UART_MspInit+0xec>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <HAL_UART_MspInit+0xec>)
 8000794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <HAL_UART_MspInit+0xec>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80007a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b4:	2303      	movs	r3, #3
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007b8:	2307      	movs	r3, #7
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4807      	ldr	r0, [pc, #28]	; (80007e0 <HAL_UART_MspInit+0xf8>)
 80007c4:	f000 face 	bl	8000d64 <HAL_GPIO_Init>
}
 80007c8:	bf00      	nop
 80007ca:	3730      	adds	r7, #48	; 0x30
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40013800 	.word	0x40013800
 80007d4:	40021000 	.word	0x40021000
 80007d8:	48000800 	.word	0x48000800
 80007dc:	40004800 	.word	0x40004800
 80007e0:	48000c00 	.word	0x48000c00

080007e4 <USART_transmit_data>:
  }
}

/* USER CODE BEGIN 1 */
void USART_transmit_data(UART_HandleTypeDef* huart, uint8_t* message)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
	uint32_t size = strlen((char *)message);
 80007ee:	6838      	ldr	r0, [r7, #0]
 80007f0:	f7ff fcf0 	bl	80001d4 <strlen>
 80007f4:	60f8      	str	r0, [r7, #12]

	HAL_UART_Transmit(huart, (uint8_t *) message, size, 1000);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fe:	6839      	ldr	r1, [r7, #0]
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f002 fa37 	bl	8002c74 <HAL_UART_Transmit>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <RS485_transmit_data>:
{
	HAL_UART_Receive(huart, message, size, 100000);
}

void RS485_transmit_data(uint8_t* message)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	uint32_t size = strlen((char *)message);
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff fcdb 	bl	80001d4 <strlen>
 800081e:	60f8      	str	r0, [r7, #12]

	if(size < 255){
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2bfe      	cmp	r3, #254	; 0xfe
 8000824:	d81e      	bhi.n	8000864 <RS485_transmit_data+0x54>
		memcpy(TxData, message, size);
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	4810      	ldr	r0, [pc, #64]	; (800086c <RS485_transmit_data+0x5c>)
 800082c:	f003 fcca 	bl	80041c4 <memcpy>
		TxData[size] = 0x0A;			//Byte de fin de trama
 8000830:	4a0e      	ldr	r2, [pc, #56]	; (800086c <RS485_transmit_data+0x5c>)
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4413      	add	r3, r2
 8000836:	220a      	movs	r2, #10
 8000838:	701a      	strb	r2, [r3, #0]
		TxData[size+1] = 0;				//Finalizamos la cadena con /0
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	3301      	adds	r3, #1
 800083e:	4a0b      	ldr	r2, [pc, #44]	; (800086c <RS485_transmit_data+0x5c>)
 8000840:	2100      	movs	r1, #0
 8000842:	54d1      	strb	r1, [r2, r3]

		HAL_GPIO_WritePin(RS485_E_GPIO_Port, RS485_E_Pin, GPIO_PIN_SET);
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <RS485_transmit_data+0x60>)
 800084c:	f000 fc14 	bl	8001078 <HAL_GPIO_WritePin>
		USART_transmit_data(&huart1, TxData);
 8000850:	4906      	ldr	r1, [pc, #24]	; (800086c <RS485_transmit_data+0x5c>)
 8000852:	4808      	ldr	r0, [pc, #32]	; (8000874 <RS485_transmit_data+0x64>)
 8000854:	f7ff ffc6 	bl	80007e4 <USART_transmit_data>
		HAL_GPIO_WritePin(RS485_E_GPIO_Port, RS485_E_Pin, GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <RS485_transmit_data+0x60>)
 8000860:	f000 fc0a 	bl	8001078 <HAL_GPIO_WritePin>
	}
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000014c 	.word	0x2000014c
 8000870:	48001400 	.word	0x48001400
 8000874:	2000024c 	.word	0x2000024c

08000878 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	if(RxByte != 0x0A)
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_UART_RxCpltCallback+0x54>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b0a      	cmp	r3, #10
 8000886:	d00d      	beq.n	80008a4 <HAL_UART_RxCpltCallback+0x2c>
	{
		RxData[RxLen] = RxByte;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_UART_RxCpltCallback+0x58>)
 800088a:	881b      	ldrh	r3, [r3, #0]
 800088c:	461a      	mov	r2, r3
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_UART_RxCpltCallback+0x54>)
 8000890:	7819      	ldrb	r1, [r3, #0]
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <HAL_UART_RxCpltCallback+0x5c>)
 8000894:	5499      	strb	r1, [r3, r2]
		RxLen++;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_UART_RxCpltCallback+0x58>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	3301      	adds	r3, #1
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_UART_RxCpltCallback+0x58>)
 80008a0:	801a      	strh	r2, [r3, #0]
 80008a2:	e005      	b.n	80008b0 <HAL_UART_RxCpltCallback+0x38>
	}else
	{
		RxLen = 0;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_UART_RxCpltCallback+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	801a      	strh	r2, [r3, #0]
		NewMessage = 1;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_UART_RxCpltCallback+0x60>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_UART_Receive_IT(&huart1, &RxByte, 1) != HAL_OK)
 80008b0:	2201      	movs	r2, #1
 80008b2:	4906      	ldr	r1, [pc, #24]	; (80008cc <HAL_UART_RxCpltCallback+0x54>)
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <HAL_UART_RxCpltCallback+0x64>)
 80008b6:	f002 fa67 	bl	8002d88 <HAL_UART_Receive_IT>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <HAL_UART_RxCpltCallback+0x4c>
	{
		Error_Handler();
 80008c0:	f7ff fdf6 	bl	80004b0 <Error_Handler>
	}
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000049 	.word	0x20000049
 80008d0:	2000004a 	.word	0x2000004a
 80008d4:	2000004c 	.word	0x2000004c
 80008d8:	20000048 	.word	0x20000048
 80008dc:	2000024c 	.word	0x2000024c

080008e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000918 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e4:	f7ff fe8e 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <LoopForever+0x6>)
  ldr r1, =_edata
 80008ea:	490d      	ldr	r1, [pc, #52]	; (8000920 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ec:	4a0d      	ldr	r2, [pc, #52]	; (8000924 <LoopForever+0xe>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fe:	4a0a      	ldr	r2, [pc, #40]	; (8000928 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000900:	4c0a      	ldr	r4, [pc, #40]	; (800092c <LoopForever+0x16>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090e:	f003 fc35 	bl	800417c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000912:	f7ff fd1f 	bl	8000354 <main>

08000916 <LoopForever>:

LoopForever:
    b LoopForever
 8000916:	e7fe      	b.n	8000916 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000918:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800091c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000920:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000924:	08004240 	.word	0x08004240
  ldr r2, =_sbss
 8000928:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800092c:	20000360 	.word	0x20000360

08000930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC1_2_IRQHandler>
	...

08000934 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_Init+0x28>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <HAL_Init+0x28>)
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f94f 	bl	8000be8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094a:	2000      	movs	r0, #0
 800094c:	f000 f808 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000950:	f7ff fe00 	bl	8000554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40022000 	.word	0x40022000

08000960 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_InitTick+0x54>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_InitTick+0x58>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000976:	fbb3 f3f1 	udiv	r3, r3, r1
 800097a:	fbb2 f3f3 	udiv	r3, r2, r3
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f967 	bl	8000c52 <HAL_SYSTICK_Config>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e00e      	b.n	80009ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d80a      	bhi.n	80009aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f000 f92f 	bl	8000bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a0:	4a06      	ldr	r2, [pc, #24]	; (80009bc <HAL_InitTick+0x5c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e000      	b.n	80009ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000004 	.word	0x20000004

080009c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_IncTick+0x20>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_IncTick+0x24>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_IncTick+0x24>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	20000008 	.word	0x20000008
 80009e4:	2000035c 	.word	0x2000035c

080009e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <HAL_GetTick+0x14>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	2000035c 	.word	0x2000035c

08000a00 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a08:	f7ff ffee 	bl	80009e8 <HAL_GetTick>
 8000a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a18:	d005      	beq.n	8000a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_Delay+0x44>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4413      	add	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a26:	bf00      	nop
 8000a28:	f7ff ffde 	bl	80009e8 <HAL_GetTick>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d8f7      	bhi.n	8000a28 <HAL_Delay+0x28>
  {
  }
}
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000008 	.word	0x20000008

08000a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	60d3      	str	r3, [r2, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	f003 0307 	and.w	r3, r3, #7
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db0b      	blt.n	8000ad6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	f003 021f 	and.w	r2, r3, #31
 8000ac4:	4907      	ldr	r1, [pc, #28]	; (8000ae4 <__NVIC_EnableIRQ+0x38>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	095b      	lsrs	r3, r3, #5
 8000acc:	2001      	movs	r0, #1
 8000ace:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb4:	d301      	bcc.n	8000bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00f      	b.n	8000bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <SysTick_Config+0x40>)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc2:	210f      	movs	r1, #15
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f7ff ff8e 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <SysTick_Config+0x40>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd2:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <SysTick_Config+0x40>)
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff29 	bl	8000a48 <__NVIC_SetPriorityGrouping>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b086      	sub	sp, #24
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	4603      	mov	r3, r0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c10:	f7ff ff3e 	bl	8000a90 <__NVIC_GetPriorityGrouping>
 8000c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	68b9      	ldr	r1, [r7, #8]
 8000c1a:	6978      	ldr	r0, [r7, #20]
 8000c1c:	f7ff ff8e 	bl	8000b3c <NVIC_EncodePriority>
 8000c20:	4602      	mov	r2, r0
 8000c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff5d 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff ff31 	bl	8000aac <__NVIC_EnableIRQ>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ffa2 	bl	8000ba4 <SysTick_Config>
 8000c60:	4603      	mov	r3, r0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d101      	bne.n	8000c7c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e02e      	b.n	8000cda <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d008      	beq.n	8000c98 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2204      	movs	r2, #4
 8000c8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e020      	b.n	8000cda <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f022 020e 	bic.w	r2, r2, #14
 8000ca6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 0201 	bic.w	r2, r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b084      	sub	sp, #16
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d005      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2204      	movs	r2, #4
 8000d00:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	73fb      	strb	r3, [r7, #15]
 8000d06:	e027      	b.n	8000d58 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 020e 	bic.w	r2, r2, #14
 8000d16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 0201 	bic.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d30:	2101      	movs	r1, #1
 8000d32:	fa01 f202 	lsl.w	r2, r1, r2
 8000d36:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	4798      	blx	r3
    }
  }
  return status;
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	e160      	b.n	8001036 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	2101      	movs	r1, #1
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 8152 	beq.w	8001030 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d005      	beq.n	8000da4 <HAL_GPIO_Init+0x40>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d130      	bne.n	8000e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dda:	2201      	movs	r2, #1
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	091b      	lsrs	r3, r3, #4
 8000df0:	f003 0201 	and.w	r2, r3, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d017      	beq.n	8000e42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d123      	bne.n	8000e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	08da      	lsrs	r2, r3, #3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3208      	adds	r2, #8
 8000e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	691a      	ldr	r2, [r3, #16]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	08da      	lsrs	r2, r3, #3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3208      	adds	r2, #8
 8000e90:	6939      	ldr	r1, [r7, #16]
 8000e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0203 	and.w	r2, r3, #3
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 80ac 	beq.w	8001030 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed8:	4b5e      	ldr	r3, [pc, #376]	; (8001054 <HAL_GPIO_Init+0x2f0>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a5d      	ldr	r2, [pc, #372]	; (8001054 <HAL_GPIO_Init+0x2f0>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b5b      	ldr	r3, [pc, #364]	; (8001054 <HAL_GPIO_Init+0x2f0>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ef0:	4a59      	ldr	r2, [pc, #356]	; (8001058 <HAL_GPIO_Init+0x2f4>)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f1a:	d025      	beq.n	8000f68 <HAL_GPIO_Init+0x204>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a4f      	ldr	r2, [pc, #316]	; (800105c <HAL_GPIO_Init+0x2f8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d01f      	beq.n	8000f64 <HAL_GPIO_Init+0x200>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a4e      	ldr	r2, [pc, #312]	; (8001060 <HAL_GPIO_Init+0x2fc>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d019      	beq.n	8000f60 <HAL_GPIO_Init+0x1fc>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a4d      	ldr	r2, [pc, #308]	; (8001064 <HAL_GPIO_Init+0x300>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d013      	beq.n	8000f5c <HAL_GPIO_Init+0x1f8>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a4c      	ldr	r2, [pc, #304]	; (8001068 <HAL_GPIO_Init+0x304>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d00d      	beq.n	8000f58 <HAL_GPIO_Init+0x1f4>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a4b      	ldr	r2, [pc, #300]	; (800106c <HAL_GPIO_Init+0x308>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d007      	beq.n	8000f54 <HAL_GPIO_Init+0x1f0>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a4a      	ldr	r2, [pc, #296]	; (8001070 <HAL_GPIO_Init+0x30c>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d101      	bne.n	8000f50 <HAL_GPIO_Init+0x1ec>
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	e00c      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f50:	2307      	movs	r3, #7
 8000f52:	e00a      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f54:	2305      	movs	r3, #5
 8000f56:	e008      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f58:	2304      	movs	r3, #4
 8000f5a:	e006      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e004      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f60:	2302      	movs	r3, #2
 8000f62:	e002      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	f002 0203 	and.w	r2, r2, #3
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	4093      	lsls	r3, r2
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f7a:	4937      	ldr	r1, [pc, #220]	; (8001058 <HAL_GPIO_Init+0x2f4>)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f88:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <HAL_GPIO_Init+0x310>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fac:	4a31      	ldr	r2, [pc, #196]	; (8001074 <HAL_GPIO_Init+0x310>)
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb2:	4b30      	ldr	r3, [pc, #192]	; (8001074 <HAL_GPIO_Init+0x310>)
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fd6:	4a27      	ldr	r2, [pc, #156]	; (8001074 <HAL_GPIO_Init+0x310>)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <HAL_GPIO_Init+0x310>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001000:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <HAL_GPIO_Init+0x310>)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001006:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <HAL_GPIO_Init+0x310>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <HAL_GPIO_Init+0x310>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	fa22 f303 	lsr.w	r3, r2, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	f47f ae97 	bne.w	8000d74 <HAL_GPIO_Init+0x10>
  }
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	40021000 	.word	0x40021000
 8001058:	40010000 	.word	0x40010000
 800105c:	48000400 	.word	0x48000400
 8001060:	48000800 	.word	0x48000800
 8001064:	48000c00 	.word	0x48000c00
 8001068:	48001000 	.word	0x48001000
 800106c:	48001400 	.word	0x48001400
 8001070:	48001800 	.word	0x48001800
 8001074:	40010400 	.word	0x40010400

08001078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
 8001084:	4613      	mov	r3, r2
 8001086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001088:	787b      	ldrb	r3, [r7, #1]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001094:	e002      	b.n	800109c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010b8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f001 b83a 	b.w	8002142 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 816f 	beq.w	80013c2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010e4:	4bb5      	ldr	r3, [pc, #724]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 030c 	and.w	r3, r3, #12
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	d00c      	beq.n	800110a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010f0:	4bb2      	ldr	r3, [pc, #712]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d15c      	bne.n	80011b6 <HAL_RCC_OscConfig+0x10e>
 80010fc:	4baf      	ldr	r3, [pc, #700]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001108:	d155      	bne.n	80011b6 <HAL_RCC_OscConfig+0x10e>
 800110a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800110e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001112:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001116:	fa93 f3a3 	rbit	r3, r3
 800111a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 800111e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001122:	fab3 f383 	clz	r3, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	095b      	lsrs	r3, r3, #5
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b01      	cmp	r3, #1
 8001134:	d102      	bne.n	800113c <HAL_RCC_OscConfig+0x94>
 8001136:	4ba1      	ldr	r3, [pc, #644]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	e015      	b.n	8001168 <HAL_RCC_OscConfig+0xc0>
 800113c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001140:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001144:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001148:	fa93 f3a3 	rbit	r3, r3
 800114c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001154:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001158:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800115c:	fa93 f3a3 	rbit	r3, r3
 8001160:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001164:	4b95      	ldr	r3, [pc, #596]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800116c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001170:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001174:	fa92 f2a2 	rbit	r2, r2
 8001178:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800117c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001180:	fab2 f282 	clz	r2, r2
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	f042 0220 	orr.w	r2, r2, #32
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	f002 021f 	and.w	r2, r2, #31
 8001190:	2101      	movs	r1, #1
 8001192:	fa01 f202 	lsl.w	r2, r1, r2
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 8111 	beq.w	80013c0 <HAL_RCC_OscConfig+0x318>
 800119e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f040 8108 	bne.w	80013c0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	f000 bfc6 	b.w	8002142 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c6:	d106      	bne.n	80011d6 <HAL_RCC_OscConfig+0x12e>
 80011c8:	4b7c      	ldr	r3, [pc, #496]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a7b      	ldr	r2, [pc, #492]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 80011ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e036      	b.n	8001244 <HAL_RCC_OscConfig+0x19c>
 80011d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10c      	bne.n	8001200 <HAL_RCC_OscConfig+0x158>
 80011e6:	4b75      	ldr	r3, [pc, #468]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a74      	ldr	r2, [pc, #464]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 80011ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	4b72      	ldr	r3, [pc, #456]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a71      	ldr	r2, [pc, #452]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 80011f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e021      	b.n	8001244 <HAL_RCC_OscConfig+0x19c>
 8001200:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001204:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001210:	d10c      	bne.n	800122c <HAL_RCC_OscConfig+0x184>
 8001212:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a69      	ldr	r2, [pc, #420]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 8001218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b67      	ldr	r3, [pc, #412]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a66      	ldr	r2, [pc, #408]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e00b      	b.n	8001244 <HAL_RCC_OscConfig+0x19c>
 800122c:	4b63      	ldr	r3, [pc, #396]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a62      	ldr	r2, [pc, #392]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 8001232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b60      	ldr	r3, [pc, #384]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a5f      	ldr	r2, [pc, #380]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 800123e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001242:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001248:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d059      	beq.n	8001308 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fbc8 	bl	80009e8 <HAL_GetTick>
 8001258:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125c:	e00a      	b.n	8001274 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125e:	f7ff fbc3 	bl	80009e8 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	; 0x64
 800126c:	d902      	bls.n	8001274 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	f000 bf67 	b.w	8002142 <HAL_RCC_OscConfig+0x109a>
 8001274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001278:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001280:	fa93 f3a3 	rbit	r3, r3
 8001284:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001288:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128c:	fab3 f383 	clz	r3, r3
 8001290:	b2db      	uxtb	r3, r3
 8001292:	095b      	lsrs	r3, r3, #5
 8001294:	b2db      	uxtb	r3, r3
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b01      	cmp	r3, #1
 800129e:	d102      	bne.n	80012a6 <HAL_RCC_OscConfig+0x1fe>
 80012a0:	4b46      	ldr	r3, [pc, #280]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	e015      	b.n	80012d2 <HAL_RCC_OscConfig+0x22a>
 80012a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012aa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80012b2:	fa93 f3a3 	rbit	r3, r3
 80012b6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80012ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012be:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80012c2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80012ce:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 80012d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012d6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80012da:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80012de:	fa92 f2a2 	rbit	r2, r2
 80012e2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80012e6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012ea:	fab2 f282 	clz	r2, r2
 80012ee:	b2d2      	uxtb	r2, r2
 80012f0:	f042 0220 	orr.w	r2, r2, #32
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	f002 021f 	and.w	r2, r2, #31
 80012fa:	2101      	movs	r1, #1
 80012fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001300:	4013      	ands	r3, r2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0ab      	beq.n	800125e <HAL_RCC_OscConfig+0x1b6>
 8001306:	e05c      	b.n	80013c2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fb6e 	bl	80009e8 <HAL_GetTick>
 800130c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001310:	e00a      	b.n	8001328 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001312:	f7ff fb69 	bl	80009e8 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d902      	bls.n	8001328 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	f000 bf0d 	b.w	8002142 <HAL_RCC_OscConfig+0x109a>
 8001328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800132c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001330:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001334:	fa93 f3a3 	rbit	r3, r3
 8001338:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800133c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001340:	fab3 f383 	clz	r3, r3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b01      	cmp	r3, #1
 8001352:	d102      	bne.n	800135a <HAL_RCC_OscConfig+0x2b2>
 8001354:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	e015      	b.n	8001386 <HAL_RCC_OscConfig+0x2de>
 800135a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800135e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800136e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001372:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001376:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_RCC_OscConfig+0x314>)
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800138a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800138e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001392:	fa92 f2a2 	rbit	r2, r2
 8001396:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800139a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800139e:	fab2 f282 	clz	r2, r2
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	f042 0220 	orr.w	r2, r2, #32
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	f002 021f 	and.w	r2, r2, #31
 80013ae:	2101      	movs	r1, #1
 80013b0:	fa01 f202 	lsl.w	r2, r1, r2
 80013b4:	4013      	ands	r3, r2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1ab      	bne.n	8001312 <HAL_RCC_OscConfig+0x26a>
 80013ba:	e002      	b.n	80013c2 <HAL_RCC_OscConfig+0x31a>
 80013bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 817f 	beq.w	80016d6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013d8:	4ba7      	ldr	r3, [pc, #668]	; (8001678 <HAL_RCC_OscConfig+0x5d0>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00c      	beq.n	80013fe <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013e4:	4ba4      	ldr	r3, [pc, #656]	; (8001678 <HAL_RCC_OscConfig+0x5d0>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 030c 	and.w	r3, r3, #12
 80013ec:	2b08      	cmp	r3, #8
 80013ee:	d173      	bne.n	80014d8 <HAL_RCC_OscConfig+0x430>
 80013f0:	4ba1      	ldr	r3, [pc, #644]	; (8001678 <HAL_RCC_OscConfig+0x5d0>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013fc:	d16c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x430>
 80013fe:	2302      	movs	r3, #2
 8001400:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001404:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001408:	fa93 f3a3 	rbit	r3, r3
 800140c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001410:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001414:	fab3 f383 	clz	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b01      	cmp	r3, #1
 8001426:	d102      	bne.n	800142e <HAL_RCC_OscConfig+0x386>
 8001428:	4b93      	ldr	r3, [pc, #588]	; (8001678 <HAL_RCC_OscConfig+0x5d0>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	e013      	b.n	8001456 <HAL_RCC_OscConfig+0x3ae>
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001434:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001440:	2302      	movs	r3, #2
 8001442:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001446:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001452:	4b89      	ldr	r3, [pc, #548]	; (8001678 <HAL_RCC_OscConfig+0x5d0>)
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	2202      	movs	r2, #2
 8001458:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800145c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001460:	fa92 f2a2 	rbit	r2, r2
 8001464:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001468:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800146c:	fab2 f282 	clz	r2, r2
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	f042 0220 	orr.w	r2, r2, #32
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	f002 021f 	and.w	r2, r2, #31
 800147c:	2101      	movs	r1, #1
 800147e:	fa01 f202 	lsl.w	r2, r1, r2
 8001482:	4013      	ands	r3, r2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00a      	beq.n	800149e <HAL_RCC_OscConfig+0x3f6>
 8001488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800148c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d002      	beq.n	800149e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	f000 be52 	b.w	8002142 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149e:	4b76      	ldr	r3, [pc, #472]	; (8001678 <HAL_RCC_OscConfig+0x5d0>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	21f8      	movs	r1, #248	; 0xf8
 80014b4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80014bc:	fa91 f1a1 	rbit	r1, r1
 80014c0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80014c4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80014c8:	fab1 f181 	clz	r1, r1
 80014cc:	b2c9      	uxtb	r1, r1
 80014ce:	408b      	lsls	r3, r1
 80014d0:	4969      	ldr	r1, [pc, #420]	; (8001678 <HAL_RCC_OscConfig+0x5d0>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d6:	e0fe      	b.n	80016d6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 8088 	beq.w	80015fa <HAL_RCC_OscConfig+0x552>
 80014ea:	2301      	movs	r3, #1
 80014ec:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80014f4:	fa93 f3a3 	rbit	r3, r3
 80014f8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80014fc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001500:	fab3 f383 	clz	r3, r3
 8001504:	b2db      	uxtb	r3, r3
 8001506:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800150a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	461a      	mov	r2, r3
 8001512:	2301      	movs	r3, #1
 8001514:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001516:	f7ff fa67 	bl	80009e8 <HAL_GetTick>
 800151a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151e:	e00a      	b.n	8001536 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001520:	f7ff fa62 	bl	80009e8 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d902      	bls.n	8001536 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	f000 be06 	b.w	8002142 <HAL_RCC_OscConfig+0x109a>
 8001536:	2302      	movs	r3, #2
 8001538:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001540:	fa93 f3a3 	rbit	r3, r3
 8001544:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001548:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	fab3 f383 	clz	r3, r3
 8001550:	b2db      	uxtb	r3, r3
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b01      	cmp	r3, #1
 800155e:	d102      	bne.n	8001566 <HAL_RCC_OscConfig+0x4be>
 8001560:	4b45      	ldr	r3, [pc, #276]	; (8001678 <HAL_RCC_OscConfig+0x5d0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	e013      	b.n	800158e <HAL_RCC_OscConfig+0x4e6>
 8001566:	2302      	movs	r3, #2
 8001568:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001570:	fa93 f3a3 	rbit	r3, r3
 8001574:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001578:	2302      	movs	r3, #2
 800157a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800157e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001582:	fa93 f3a3 	rbit	r3, r3
 8001586:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800158a:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <HAL_RCC_OscConfig+0x5d0>)
 800158c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158e:	2202      	movs	r2, #2
 8001590:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001594:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001598:	fa92 f2a2 	rbit	r2, r2
 800159c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80015a0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80015a4:	fab2 f282 	clz	r2, r2
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	f042 0220 	orr.w	r2, r2, #32
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	f002 021f 	and.w	r2, r2, #31
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0af      	beq.n	8001520 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <HAL_RCC_OscConfig+0x5d0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	21f8      	movs	r1, #248	; 0xf8
 80015d6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80015de:	fa91 f1a1 	rbit	r1, r1
 80015e2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80015e6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80015ea:	fab1 f181 	clz	r1, r1
 80015ee:	b2c9      	uxtb	r1, r1
 80015f0:	408b      	lsls	r3, r1
 80015f2:	4921      	ldr	r1, [pc, #132]	; (8001678 <HAL_RCC_OscConfig+0x5d0>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	600b      	str	r3, [r1, #0]
 80015f8:	e06d      	b.n	80016d6 <HAL_RCC_OscConfig+0x62e>
 80015fa:	2301      	movs	r3, #1
 80015fc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001600:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001604:	fa93 f3a3 	rbit	r3, r3
 8001608:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800160c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001610:	fab3 f383 	clz	r3, r3
 8001614:	b2db      	uxtb	r3, r3
 8001616:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800161a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	461a      	mov	r2, r3
 8001622:	2300      	movs	r3, #0
 8001624:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff f9df 	bl	80009e8 <HAL_GetTick>
 800162a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff f9da 	bl	80009e8 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d902      	bls.n	8001646 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	f000 bd7e 	b.w	8002142 <HAL_RCC_OscConfig+0x109a>
 8001646:	2302      	movs	r3, #2
 8001648:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001650:	fa93 f3a3 	rbit	r3, r3
 8001654:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001658:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165c:	fab3 f383 	clz	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b01      	cmp	r3, #1
 800166e:	d105      	bne.n	800167c <HAL_RCC_OscConfig+0x5d4>
 8001670:	4b01      	ldr	r3, [pc, #4]	; (8001678 <HAL_RCC_OscConfig+0x5d0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	e016      	b.n	80016a4 <HAL_RCC_OscConfig+0x5fc>
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	2302      	movs	r3, #2
 800167e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001682:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001686:	fa93 f3a3 	rbit	r3, r3
 800168a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800168e:	2302      	movs	r3, #2
 8001690:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001694:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001698:	fa93 f3a3 	rbit	r3, r3
 800169c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80016a0:	4bbf      	ldr	r3, [pc, #764]	; (80019a0 <HAL_RCC_OscConfig+0x8f8>)
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	2202      	movs	r2, #2
 80016a6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80016aa:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80016ae:	fa92 f2a2 	rbit	r2, r2
 80016b2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80016b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80016ba:	fab2 f282 	clz	r2, r2
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	f042 0220 	orr.w	r2, r2, #32
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	f002 021f 	and.w	r2, r2, #31
 80016ca:	2101      	movs	r1, #1
 80016cc:	fa01 f202 	lsl.w	r2, r1, r2
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1ac      	bne.n	8001630 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8113 	beq.w	8001912 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d07c      	beq.n	80017f6 <HAL_RCC_OscConfig+0x74e>
 80016fc:	2301      	movs	r3, #1
 80016fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001706:	fa93 f3a3 	rbit	r3, r3
 800170a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800170e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001712:	fab3 f383 	clz	r3, r3
 8001716:	b2db      	uxtb	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	4ba2      	ldr	r3, [pc, #648]	; (80019a4 <HAL_RCC_OscConfig+0x8fc>)
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	461a      	mov	r2, r3
 8001722:	2301      	movs	r3, #1
 8001724:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001726:	f7ff f95f 	bl	80009e8 <HAL_GetTick>
 800172a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001730:	f7ff f95a 	bl	80009e8 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d902      	bls.n	8001746 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	f000 bcfe 	b.w	8002142 <HAL_RCC_OscConfig+0x109a>
 8001746:	2302      	movs	r3, #2
 8001748:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001750:	fa93 f2a3 	rbit	r2, r3
 8001754:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001758:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001766:	2202      	movs	r2, #2
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	fa93 f2a3 	rbit	r2, r3
 8001778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800177c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001786:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800178a:	2202      	movs	r2, #2
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001792:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	fa93 f2a3 	rbit	r2, r3
 800179c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80017a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	4b7e      	ldr	r3, [pc, #504]	; (80019a0 <HAL_RCC_OscConfig+0x8f8>)
 80017a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017b2:	2102      	movs	r1, #2
 80017b4:	6019      	str	r1, [r3, #0]
 80017b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	fa93 f1a3 	rbit	r1, r3
 80017c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017cc:	6019      	str	r1, [r3, #0]
  return result;
 80017ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	fab3 f383 	clz	r3, r3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f003 031f 	and.w	r3, r3, #31
 80017e8:	2101      	movs	r1, #1
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d09d      	beq.n	8001730 <HAL_RCC_OscConfig+0x688>
 80017f4:	e08d      	b.n	8001912 <HAL_RCC_OscConfig+0x86a>
 80017f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001806:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	fa93 f2a3 	rbit	r2, r3
 8001810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001814:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001818:	601a      	str	r2, [r3, #0]
  return result;
 800181a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001822:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001824:	fab3 f383 	clz	r3, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	4b5d      	ldr	r3, [pc, #372]	; (80019a4 <HAL_RCC_OscConfig+0x8fc>)
 800182e:	4413      	add	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	461a      	mov	r2, r3
 8001834:	2300      	movs	r3, #0
 8001836:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001838:	f7ff f8d6 	bl	80009e8 <HAL_GetTick>
 800183c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	e00a      	b.n	8001858 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001842:	f7ff f8d1 	bl	80009e8 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d902      	bls.n	8001858 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	f000 bc75 	b.w	8002142 <HAL_RCC_OscConfig+0x109a>
 8001858:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800185c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001860:	2202      	movs	r2, #2
 8001862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001868:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	fa93 f2a3 	rbit	r2, r3
 8001872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001876:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001880:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001884:	2202      	movs	r2, #2
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	fa93 f2a3 	rbit	r2, r3
 8001896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018a8:	2202      	movs	r2, #2
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fa93 f2a3 	rbit	r2, r3
 80018ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80018c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <HAL_RCC_OscConfig+0x8f8>)
 80018c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80018d0:	2102      	movs	r1, #2
 80018d2:	6019      	str	r1, [r3, #0]
 80018d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	fa93 f1a3 	rbit	r1, r3
 80018e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018ea:	6019      	str	r1, [r3, #0]
  return result;
 80018ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	fab3 f383 	clz	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f003 031f 	and.w	r3, r3, #31
 8001906:	2101      	movs	r1, #1
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	4013      	ands	r3, r2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d197      	bne.n	8001842 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001912:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001916:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 81a5 	beq.w	8001c72 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192e:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <HAL_RCC_OscConfig+0x8f8>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d116      	bne.n	8001968 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_RCC_OscConfig+0x8f8>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <HAL_RCC_OscConfig+0x8f8>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	61d3      	str	r3, [r2, #28]
 8001946:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <HAL_RCC_OscConfig+0x8f8>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800194e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001952:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001960:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001962:	2301      	movs	r3, #1
 8001964:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <HAL_RCC_OscConfig+0x900>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001970:	2b00      	cmp	r3, #0
 8001972:	d121      	bne.n	80019b8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <HAL_RCC_OscConfig+0x900>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <HAL_RCC_OscConfig+0x900>)
 800197a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001980:	f7ff f832 	bl	80009e8 <HAL_GetTick>
 8001984:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001988:	e010      	b.n	80019ac <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198a:	f7ff f82d 	bl	80009e8 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d908      	bls.n	80019ac <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e3d1      	b.n	8002142 <HAL_RCC_OscConfig+0x109a>
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	10908120 	.word	0x10908120
 80019a8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ac:	4b8d      	ldr	r3, [pc, #564]	; (8001be4 <HAL_RCC_OscConfig+0xb3c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0e8      	beq.n	800198a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x92e>
 80019c8:	4b87      	ldr	r3, [pc, #540]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	4a86      	ldr	r2, [pc, #536]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6213      	str	r3, [r2, #32]
 80019d4:	e035      	b.n	8001a42 <HAL_RCC_OscConfig+0x99a>
 80019d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x958>
 80019e6:	4b80      	ldr	r3, [pc, #512]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a7f      	ldr	r2, [pc, #508]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6213      	str	r3, [r2, #32]
 80019f2:	4b7d      	ldr	r3, [pc, #500]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4a7c      	ldr	r2, [pc, #496]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 80019f8:	f023 0304 	bic.w	r3, r3, #4
 80019fc:	6213      	str	r3, [r2, #32]
 80019fe:	e020      	b.n	8001a42 <HAL_RCC_OscConfig+0x99a>
 8001a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b05      	cmp	r3, #5
 8001a0e:	d10c      	bne.n	8001a2a <HAL_RCC_OscConfig+0x982>
 8001a10:	4b75      	ldr	r3, [pc, #468]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4a74      	ldr	r2, [pc, #464]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	6213      	str	r3, [r2, #32]
 8001a1c:	4b72      	ldr	r3, [pc, #456]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	4a71      	ldr	r2, [pc, #452]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6213      	str	r3, [r2, #32]
 8001a28:	e00b      	b.n	8001a42 <HAL_RCC_OscConfig+0x99a>
 8001a2a:	4b6f      	ldr	r3, [pc, #444]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	4a6e      	ldr	r2, [pc, #440]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6213      	str	r3, [r2, #32]
 8001a36:	4b6c      	ldr	r3, [pc, #432]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	4a6b      	ldr	r2, [pc, #428]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 8081 	beq.w	8001b56 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a54:	f7fe ffc8 	bl	80009e8 <HAL_GetTick>
 8001a58:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5c:	e00b      	b.n	8001a76 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5e:	f7fe ffc3 	bl	80009e8 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e365      	b.n	8002142 <HAL_RCC_OscConfig+0x109a>
 8001a76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a7e:	2202      	movs	r2, #2
 8001a80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a86:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	fa93 f2a3 	rbit	r2, r3
 8001a90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a9e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001aa2:	2202      	movs	r2, #2
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aaa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	fa93 f2a3 	rbit	r2, r3
 8001ab4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001abc:	601a      	str	r2, [r3, #0]
  return result;
 8001abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ac6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac8:	fab3 f383 	clz	r3, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d102      	bne.n	8001ae2 <HAL_RCC_OscConfig+0xa3a>
 8001adc:	4b42      	ldr	r3, [pc, #264]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	e013      	b.n	8001b0a <HAL_RCC_OscConfig+0xa62>
 8001ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001aea:	2202      	movs	r2, #2
 8001aec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	fa93 f2a3 	rbit	r2, r3
 8001afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b00:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b0e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b12:	2102      	movs	r1, #2
 8001b14:	6011      	str	r1, [r2, #0]
 8001b16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b1a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	fa92 f1a2 	rbit	r1, r2
 8001b24:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b28:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001b2c:	6011      	str	r1, [r2, #0]
  return result;
 8001b2e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b32:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	fab2 f282 	clz	r2, r2
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	f002 021f 	and.w	r2, r2, #31
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d084      	beq.n	8001a5e <HAL_RCC_OscConfig+0x9b6>
 8001b54:	e083      	b.n	8001c5e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b56:	f7fe ff47 	bl	80009e8 <HAL_GetTick>
 8001b5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b5e:	e00b      	b.n	8001b78 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b60:	f7fe ff42 	bl	80009e8 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e2e4      	b.n	8002142 <HAL_RCC_OscConfig+0x109a>
 8001b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b80:	2202      	movs	r2, #2
 8001b82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b88:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	fa93 f2a3 	rbit	r2, r3
 8001b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b96:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	fa93 f2a3 	rbit	r2, r3
 8001bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001bbe:	601a      	str	r2, [r3, #0]
  return result;
 8001bc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001bc8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	095b      	lsrs	r3, r3, #5
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d106      	bne.n	8001bec <HAL_RCC_OscConfig+0xb44>
 8001bde:	4b02      	ldr	r3, [pc, #8]	; (8001be8 <HAL_RCC_OscConfig+0xb40>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	e017      	b.n	8001c14 <HAL_RCC_OscConfig+0xb6c>
 8001be4:	40007000 	.word	0x40007000
 8001be8:	40021000 	.word	0x40021000
 8001bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	fa93 f2a3 	rbit	r2, r3
 8001c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	4bb3      	ldr	r3, [pc, #716]	; (8001ee0 <HAL_RCC_OscConfig+0xe38>)
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c18:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	6011      	str	r1, [r2, #0]
 8001c20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c24:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001c28:	6812      	ldr	r2, [r2, #0]
 8001c2a:	fa92 f1a2 	rbit	r1, r2
 8001c2e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c32:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001c36:	6011      	str	r1, [r2, #0]
  return result;
 8001c38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c3c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	fab2 f282 	clz	r2, r2
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	f002 021f 	and.w	r2, r2, #31
 8001c52:	2101      	movs	r1, #1
 8001c54:	fa01 f202 	lsl.w	r2, r1, r2
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d180      	bne.n	8001b60 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c5e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c66:	4b9e      	ldr	r3, [pc, #632]	; (8001ee0 <HAL_RCC_OscConfig+0xe38>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	4a9d      	ldr	r2, [pc, #628]	; (8001ee0 <HAL_RCC_OscConfig+0xe38>)
 8001c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c70:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c76:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 825e 	beq.w	8002140 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c84:	4b96      	ldr	r3, [pc, #600]	; (8001ee0 <HAL_RCC_OscConfig+0xe38>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	f000 821f 	beq.w	80020d0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	f040 8170 	bne.w	8001f84 <HAL_RCC_OscConfig+0xedc>
 8001ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001cac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	fa93 f2a3 	rbit	r2, r3
 8001cc0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cc4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001cc8:	601a      	str	r2, [r3, #0]
  return result;
 8001cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cce:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001cd2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cea:	f7fe fe7d 	bl	80009e8 <HAL_GetTick>
 8001cee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf2:	e009      	b.n	8001d08 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7fe fe78 	bl	80009e8 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e21c      	b.n	8002142 <HAL_RCC_OscConfig+0x109a>
 8001d08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d0c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d1a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fa93 f2a3 	rbit	r2, r3
 8001d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d28:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d2c:	601a      	str	r2, [r3, #0]
  return result;
 8001d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d32:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001d36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d102      	bne.n	8001d52 <HAL_RCC_OscConfig+0xcaa>
 8001d4c:	4b64      	ldr	r3, [pc, #400]	; (8001ee0 <HAL_RCC_OscConfig+0xe38>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	e027      	b.n	8001da2 <HAL_RCC_OscConfig+0xcfa>
 8001d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d56:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d64:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	fa93 f2a3 	rbit	r2, r3
 8001d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d72:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	fa93 f2a3 	rbit	r2, r3
 8001d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d98:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	4b50      	ldr	r3, [pc, #320]	; (8001ee0 <HAL_RCC_OscConfig+0xe38>)
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001da6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001daa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dae:	6011      	str	r1, [r2, #0]
 8001db0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001db4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001db8:	6812      	ldr	r2, [r2, #0]
 8001dba:	fa92 f1a2 	rbit	r1, r2
 8001dbe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dc2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001dc6:	6011      	str	r1, [r2, #0]
  return result;
 8001dc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dcc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	fab2 f282 	clz	r2, r2
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	f042 0220 	orr.w	r2, r2, #32
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	f002 021f 	and.w	r2, r2, #31
 8001de2:	2101      	movs	r1, #1
 8001de4:	fa01 f202 	lsl.w	r2, r1, r2
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d182      	bne.n	8001cf4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dee:	4b3c      	ldr	r3, [pc, #240]	; (8001ee0 <HAL_RCC_OscConfig+0xe38>)
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	f023 020f 	bic.w	r2, r3, #15
 8001df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	4937      	ldr	r1, [pc, #220]	; (8001ee0 <HAL_RCC_OscConfig+0xe38>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001e08:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <HAL_RCC_OscConfig+0xe38>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6a19      	ldr	r1, [r3, #32]
 8001e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	492d      	ldr	r1, [pc, #180]	; (8001ee0 <HAL_RCC_OscConfig+0xe38>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
 8001e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e34:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e42:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e50:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e54:	601a      	str	r2, [r3, #0]
  return result;
 8001e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001e5e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e60:	fab3 f383 	clz	r3, r3
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	461a      	mov	r2, r3
 8001e72:	2301      	movs	r3, #1
 8001e74:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e76:	f7fe fdb7 	bl	80009e8 <HAL_GetTick>
 8001e7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7e:	e009      	b.n	8001e94 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7fe fdb2 	bl	80009e8 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e156      	b.n	8002142 <HAL_RCC_OscConfig+0x109a>
 8001e94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e98:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001e9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	fa93 f2a3 	rbit	r2, r3
 8001eb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001eb8:	601a      	str	r2, [r3, #0]
  return result;
 8001eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ec2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec4:	fab3 f383 	clz	r3, r3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xe3c>
 8001ed8:	4b01      	ldr	r3, [pc, #4]	; (8001ee0 <HAL_RCC_OscConfig+0xe38>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	e02a      	b.n	8001f34 <HAL_RCC_OscConfig+0xe8c>
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001eec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ef0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	fa93 f2a3 	rbit	r2, r3
 8001f00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f04:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f0e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001f12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	fa93 f2a3 	rbit	r2, r3
 8001f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	4b86      	ldr	r3, [pc, #536]	; (800214c <HAL_RCC_OscConfig+0x10a4>)
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f38:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f40:	6011      	str	r1, [r2, #0]
 8001f42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f46:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	fa92 f1a2 	rbit	r1, r2
 8001f50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f54:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001f58:	6011      	str	r1, [r2, #0]
  return result;
 8001f5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f5e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	fab2 f282 	clz	r2, r2
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	f042 0220 	orr.w	r2, r2, #32
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	f002 021f 	and.w	r2, r2, #31
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f43f af7f 	beq.w	8001e80 <HAL_RCC_OscConfig+0xdd8>
 8001f82:	e0dd      	b.n	8002140 <HAL_RCC_OscConfig+0x1098>
 8001f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f88:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f96:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	fa93 f2a3 	rbit	r2, r3
 8001fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001fa8:	601a      	str	r2, [r3, #0]
  return result;
 8001faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001fb2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	fab3 f383 	clz	r3, r3
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fbe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7fe fd0d 	bl	80009e8 <HAL_GetTick>
 8001fce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd2:	e009      	b.n	8001fe8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7fe fd08 	bl	80009e8 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e0ac      	b.n	8002142 <HAL_RCC_OscConfig+0x109a>
 8001fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ffa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	fa93 f2a3 	rbit	r2, r3
 8002004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002008:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800200c:	601a      	str	r2, [r3, #0]
  return result;
 800200e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002012:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002016:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d102      	bne.n	8002032 <HAL_RCC_OscConfig+0xf8a>
 800202c:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_OscConfig+0x10a4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	e027      	b.n	8002082 <HAL_RCC_OscConfig+0xfda>
 8002032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002036:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800203a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800203e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002044:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	fa93 f2a3 	rbit	r2, r3
 800204e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002052:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800205c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	fa93 f2a3 	rbit	r2, r3
 8002074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002078:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800207c:	601a      	str	r2, [r3, #0]
 800207e:	4b33      	ldr	r3, [pc, #204]	; (800214c <HAL_RCC_OscConfig+0x10a4>)
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002086:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800208a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800208e:	6011      	str	r1, [r2, #0]
 8002090:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002094:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	fa92 f1a2 	rbit	r1, r2
 800209e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020a2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80020a6:	6011      	str	r1, [r2, #0]
  return result;
 80020a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020ac:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	fab2 f282 	clz	r2, r2
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	f042 0220 	orr.w	r2, r2, #32
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	f002 021f 	and.w	r2, r2, #31
 80020c2:	2101      	movs	r1, #1
 80020c4:	fa01 f202 	lsl.w	r2, r1, r2
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d182      	bne.n	8001fd4 <HAL_RCC_OscConfig+0xf2c>
 80020ce:	e037      	b.n	8002140 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e02e      	b.n	8002142 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_RCC_OscConfig+0x10a4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80020ec:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_RCC_OscConfig+0x10a4>)
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80020f8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80020fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002100:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	429a      	cmp	r2, r3
 800210a:	d117      	bne.n	800213c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800210c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002110:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002118:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002120:	429a      	cmp	r2, r3
 8002122:	d10b      	bne.n	800213c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002124:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002128:	f003 020f 	and.w	r2, r3, #15
 800212c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002130:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000

08002150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b09e      	sub	sp, #120	; 0x78
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e162      	b.n	800242e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002168:	4b90      	ldr	r3, [pc, #576]	; (80023ac <HAL_RCC_ClockConfig+0x25c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d910      	bls.n	8002198 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b8d      	ldr	r3, [pc, #564]	; (80023ac <HAL_RCC_ClockConfig+0x25c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 0207 	bic.w	r2, r3, #7
 800217e:	498b      	ldr	r1, [pc, #556]	; (80023ac <HAL_RCC_ClockConfig+0x25c>)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b89      	ldr	r3, [pc, #548]	; (80023ac <HAL_RCC_ClockConfig+0x25c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e14a      	b.n	800242e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a4:	4b82      	ldr	r3, [pc, #520]	; (80023b0 <HAL_RCC_ClockConfig+0x260>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	497f      	ldr	r1, [pc, #508]	; (80023b0 <HAL_RCC_ClockConfig+0x260>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80dc 	beq.w	800237c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d13c      	bne.n	8002246 <HAL_RCC_ClockConfig+0xf6>
 80021cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80021da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021dc:	fab3 f383 	clz	r3, r3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d102      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xa6>
 80021f0:	4b6f      	ldr	r3, [pc, #444]	; (80023b0 <HAL_RCC_ClockConfig+0x260>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	e00f      	b.n	8002216 <HAL_RCC_ClockConfig+0xc6>
 80021f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	667b      	str	r3, [r7, #100]	; 0x64
 8002204:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002208:	663b      	str	r3, [r7, #96]	; 0x60
 800220a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002212:	4b67      	ldr	r3, [pc, #412]	; (80023b0 <HAL_RCC_ClockConfig+0x260>)
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800221a:	65ba      	str	r2, [r7, #88]	; 0x58
 800221c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800221e:	fa92 f2a2 	rbit	r2, r2
 8002222:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002224:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002226:	fab2 f282 	clz	r2, r2
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	f042 0220 	orr.w	r2, r2, #32
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	f002 021f 	and.w	r2, r2, #31
 8002236:	2101      	movs	r1, #1
 8002238:	fa01 f202 	lsl.w	r2, r1, r2
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d17b      	bne.n	800233a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0f3      	b.n	800242e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d13c      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x178>
 800224e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002252:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800225c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d102      	bne.n	8002278 <HAL_RCC_ClockConfig+0x128>
 8002272:	4b4f      	ldr	r3, [pc, #316]	; (80023b0 <HAL_RCC_ClockConfig+0x260>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	e00f      	b.n	8002298 <HAL_RCC_ClockConfig+0x148>
 8002278:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800227c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	647b      	str	r3, [r7, #68]	; 0x44
 8002286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800228a:	643b      	str	r3, [r7, #64]	; 0x40
 800228c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002294:	4b46      	ldr	r3, [pc, #280]	; (80023b0 <HAL_RCC_ClockConfig+0x260>)
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800229c:	63ba      	str	r2, [r7, #56]	; 0x38
 800229e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022a0:	fa92 f2a2 	rbit	r2, r2
 80022a4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80022a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022a8:	fab2 f282 	clz	r2, r2
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	f042 0220 	orr.w	r2, r2, #32
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	f002 021f 	and.w	r2, r2, #31
 80022b8:	2101      	movs	r1, #1
 80022ba:	fa01 f202 	lsl.w	r2, r1, r2
 80022be:	4013      	ands	r3, r2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d13a      	bne.n	800233a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0b2      	b.n	800242e <HAL_RCC_ClockConfig+0x2de>
 80022c8:	2302      	movs	r3, #2
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ce:	fa93 f3a3 	rbit	r3, r3
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d6:	fab3 f383 	clz	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	095b      	lsrs	r3, r3, #5
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d102      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x1a0>
 80022ea:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <HAL_RCC_ClockConfig+0x260>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	e00d      	b.n	800230c <HAL_RCC_ClockConfig+0x1bc>
 80022f0:	2302      	movs	r3, #2
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
 80022fc:	2302      	movs	r3, #2
 80022fe:	623b      	str	r3, [r7, #32]
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <HAL_RCC_ClockConfig+0x260>)
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	2202      	movs	r2, #2
 800230e:	61ba      	str	r2, [r7, #24]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	fa92 f2a2 	rbit	r2, r2
 8002316:	617a      	str	r2, [r7, #20]
  return result;
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	fab2 f282 	clz	r2, r2
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	f042 0220 	orr.w	r2, r2, #32
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	f002 021f 	and.w	r2, r2, #31
 800232a:	2101      	movs	r1, #1
 800232c:	fa01 f202 	lsl.w	r2, r1, r2
 8002330:	4013      	ands	r3, r2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e079      	b.n	800242e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800233a:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCC_ClockConfig+0x260>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f023 0203 	bic.w	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	491a      	ldr	r1, [pc, #104]	; (80023b0 <HAL_RCC_ClockConfig+0x260>)
 8002348:	4313      	orrs	r3, r2
 800234a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800234c:	f7fe fb4c 	bl	80009e8 <HAL_GetTick>
 8002350:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002352:	e00a      	b.n	800236a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002354:	f7fe fb48 	bl	80009e8 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e061      	b.n	800242e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_RCC_ClockConfig+0x260>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 020c 	and.w	r2, r3, #12
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	429a      	cmp	r2, r3
 800237a:	d1eb      	bne.n	8002354 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_ClockConfig+0x25c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d214      	bcs.n	80023b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_RCC_ClockConfig+0x25c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 0207 	bic.w	r2, r3, #7
 8002392:	4906      	ldr	r1, [pc, #24]	; (80023ac <HAL_RCC_ClockConfig+0x25c>)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b04      	ldr	r3, [pc, #16]	; (80023ac <HAL_RCC_ClockConfig+0x25c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e040      	b.n	800242e <HAL_RCC_ClockConfig+0x2de>
 80023ac:	40022000 	.word	0x40022000
 80023b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c0:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_RCC_ClockConfig+0x2e8>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	491a      	ldr	r1, [pc, #104]	; (8002438 <HAL_RCC_ClockConfig+0x2e8>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d009      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023de:	4b16      	ldr	r3, [pc, #88]	; (8002438 <HAL_RCC_ClockConfig+0x2e8>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4912      	ldr	r1, [pc, #72]	; (8002438 <HAL_RCC_ClockConfig+0x2e8>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023f2:	f000 f829 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 80023f6:	4601      	mov	r1, r0
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <HAL_RCC_ClockConfig+0x2e8>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002400:	22f0      	movs	r2, #240	; 0xf0
 8002402:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	fa92 f2a2 	rbit	r2, r2
 800240a:	60fa      	str	r2, [r7, #12]
  return result;
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	fab2 f282 	clz	r2, r2
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	40d3      	lsrs	r3, r2
 8002416:	4a09      	ldr	r2, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x2ec>)
 8002418:	5cd3      	ldrb	r3, [r2, r3]
 800241a:	fa21 f303 	lsr.w	r3, r1, r3
 800241e:	4a08      	ldr	r2, [pc, #32]	; (8002440 <HAL_RCC_ClockConfig+0x2f0>)
 8002420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_RCC_ClockConfig+0x2f4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe fa9a 	bl	8000960 <HAL_InitTick>
  
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3778      	adds	r7, #120	; 0x78
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	08004200 	.word	0x08004200
 8002440:	20000000 	.word	0x20000000
 8002444:	20000004 	.word	0x20000004

08002448 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002462:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b04      	cmp	r3, #4
 8002470:	d002      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0x30>
 8002472:	2b08      	cmp	r3, #8
 8002474:	d003      	beq.n	800247e <HAL_RCC_GetSysClockFreq+0x36>
 8002476:	e029      	b.n	80024cc <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002478:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800247a:	613b      	str	r3, [r7, #16]
      break;
 800247c:	e029      	b.n	80024d2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	0c9b      	lsrs	r3, r3, #18
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	4a18      	ldr	r2, [pc, #96]	; (80024e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002488:	5cd3      	ldrb	r3, [r2, r3]
 800248a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800248c:	4b14      	ldr	r3, [pc, #80]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	4a15      	ldr	r2, [pc, #84]	; (80024ec <HAL_RCC_GetSysClockFreq+0xa4>)
 8002496:	5cd3      	ldrb	r3, [r2, r3]
 8002498:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024a4:	4a0f      	ldr	r2, [pc, #60]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	fb02 f303 	mul.w	r3, r2, r3
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e007      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024b6:	4a0b      	ldr	r2, [pc, #44]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	fb02 f303 	mul.w	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	613b      	str	r3, [r7, #16]
      break;
 80024ca:	e002      	b.n	80024d2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024ce:	613b      	str	r3, [r7, #16]
      break;
 80024d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024d2:	693b      	ldr	r3, [r7, #16]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	371c      	adds	r7, #28
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40021000 	.word	0x40021000
 80024e4:	007a1200 	.word	0x007a1200
 80024e8:	08004218 	.word	0x08004218
 80024ec:	08004228 	.word	0x08004228

080024f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <HAL_RCC_GetHCLKFreq+0x14>)
 80024f6:	681b      	ldr	r3, [r3, #0]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000000 	.word	0x20000000

08002508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800250e:	f7ff ffef 	bl	80024f0 <HAL_RCC_GetHCLKFreq>
 8002512:	4601      	mov	r1, r0
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800251c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002520:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	fa92 f2a2 	rbit	r2, r2
 8002528:	603a      	str	r2, [r7, #0]
  return result;
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	fab2 f282 	clz	r2, r2
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	40d3      	lsrs	r3, r2
 8002534:	4a04      	ldr	r2, [pc, #16]	; (8002548 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002536:	5cd3      	ldrb	r3, [r2, r3]
 8002538:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000
 8002548:	08004210 	.word	0x08004210

0800254c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002552:	f7ff ffcd 	bl	80024f0 <HAL_RCC_GetHCLKFreq>
 8002556:	4601      	mov	r1, r0
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002560:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002564:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	fa92 f2a2 	rbit	r2, r2
 800256c:	603a      	str	r2, [r7, #0]
  return result;
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	fab2 f282 	clz	r2, r2
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	40d3      	lsrs	r3, r2
 8002578:	4a04      	ldr	r2, [pc, #16]	; (800258c <HAL_RCC_GetPCLK2Freq+0x40>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40021000 	.word	0x40021000
 800258c:	08004210 	.word	0x08004210

08002590 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b092      	sub	sp, #72	; 0x48
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 80d4 	beq.w	800275c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b4:	4b4e      	ldr	r3, [pc, #312]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10e      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c0:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	4a4a      	ldr	r2, [pc, #296]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ca:	61d3      	str	r3, [r2, #28]
 80025cc:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025de:	4b45      	ldr	r3, [pc, #276]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d118      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ea:	4b42      	ldr	r3, [pc, #264]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a41      	ldr	r2, [pc, #260]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80025f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f6:	f7fe f9f7 	bl	80009e8 <HAL_GetTick>
 80025fa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fc:	e008      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fe:	f7fe f9f3 	bl	80009e8 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b64      	cmp	r3, #100	; 0x64
 800260a:	d901      	bls.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1d6      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	4b38      	ldr	r3, [pc, #224]	; (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800261c:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002624:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8084 	beq.w	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002638:	429a      	cmp	r2, r3
 800263a:	d07c      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800263c:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800264a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	461a      	mov	r2, r3
 8002666:	2301      	movs	r3, #1
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800266e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	461a      	mov	r2, r3
 800268a:	2300      	movs	r3, #0
 800268c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800268e:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002692:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d04b      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269e:	f7fe f9a3 	bl	80009e8 <HAL_GetTick>
 80026a2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	e00a      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f7fe f99f 	bl	80009e8 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d901      	bls.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e180      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80026bc:	2302      	movs	r3, #2
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
 80026c8:	2302      	movs	r3, #2
 80026ca:	623b      	str	r3, [r7, #32]
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	61fb      	str	r3, [r7, #28]
  return result;
 80026d4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d108      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80026ea:	4b01      	ldr	r3, [pc, #4]	; (80026f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	e00d      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40007000 	.word	0x40007000
 80026f8:	10908100 	.word	0x10908100
 80026fc:	2302      	movs	r3, #2
 80026fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	4b9a      	ldr	r3, [pc, #616]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	2202      	movs	r2, #2
 800270e:	613a      	str	r2, [r7, #16]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	fa92 f2a2 	rbit	r2, r2
 8002716:	60fa      	str	r2, [r7, #12]
  return result;
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	fab2 f282 	clz	r2, r2
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	f002 021f 	and.w	r2, r2, #31
 800272a:	2101      	movs	r1, #1
 800272c:	fa01 f202 	lsl.w	r2, r1, r2
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0b7      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002736:	4b8f      	ldr	r3, [pc, #572]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	498c      	ldr	r1, [pc, #560]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002744:	4313      	orrs	r3, r2
 8002746:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002748:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800274c:	2b01      	cmp	r3, #1
 800274e:	d105      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002750:	4b88      	ldr	r3, [pc, #544]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	4a87      	ldr	r2, [pc, #540]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002768:	4b82      	ldr	r3, [pc, #520]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	f023 0203 	bic.w	r2, r3, #3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	497f      	ldr	r1, [pc, #508]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002776:	4313      	orrs	r3, r2
 8002778:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d008      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002786:	4b7b      	ldr	r3, [pc, #492]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	4978      	ldr	r1, [pc, #480]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027a4:	4b73      	ldr	r3, [pc, #460]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	4970      	ldr	r1, [pc, #448]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027c2:	4b6c      	ldr	r3, [pc, #432]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f023 0210 	bic.w	r2, r3, #16
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	4969      	ldr	r1, [pc, #420]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80027e0:	4b64      	ldr	r3, [pc, #400]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ec:	4961      	ldr	r1, [pc, #388]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d008      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027fe:	4b5d      	ldr	r3, [pc, #372]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f023 0220 	bic.w	r2, r3, #32
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	495a      	ldr	r1, [pc, #360]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800280c:	4313      	orrs	r3, r2
 800280e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800281c:	4b55      	ldr	r3, [pc, #340]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	4952      	ldr	r1, [pc, #328]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d008      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800283a:	4b4e      	ldr	r3, [pc, #312]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	494b      	ldr	r1, [pc, #300]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002858:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	4943      	ldr	r1, [pc, #268]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002872:	2b00      	cmp	r3, #0
 8002874:	d008      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002876:	4b3f      	ldr	r3, [pc, #252]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	493c      	ldr	r1, [pc, #240]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002894:	4b37      	ldr	r3, [pc, #220]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	4934      	ldr	r1, [pc, #208]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028b2:	4b30      	ldr	r3, [pc, #192]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	492d      	ldr	r1, [pc, #180]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028d0:	4b28      	ldr	r3, [pc, #160]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	4925      	ldr	r1, [pc, #148]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d008      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80028ee:	4b21      	ldr	r3, [pc, #132]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	491e      	ldr	r1, [pc, #120]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d008      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002910:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	4916      	ldr	r1, [pc, #88]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800291a:	4313      	orrs	r3, r2
 800291c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	490f      	ldr	r1, [pc, #60]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002954:	4907      	ldr	r1, [pc, #28]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002956:	4313      	orrs	r3, r2
 8002958:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00c      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002966:	4b03      	ldr	r3, [pc, #12]	; (8002974 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	e002      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000
 8002978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297a:	4913      	ldr	r1, [pc, #76]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800297c:	4313      	orrs	r3, r2
 800297e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002998:	490b      	ldr	r1, [pc, #44]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800299a:	4313      	orrs	r3, r2
 800299c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d008      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b6:	4904      	ldr	r1, [pc, #16]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3748      	adds	r7, #72	; 0x48
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000

080029cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e073      	b.n	8002aca <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	7f5b      	ldrb	r3, [r3, #29]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d105      	bne.n	80029f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7fd fd88 	bl	8000508 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	2b10      	cmp	r3, #16
 8002a0a:	d055      	beq.n	8002ab8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	22ca      	movs	r2, #202	; 0xca
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2253      	movs	r2, #83	; 0x53
 8002a1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f87f 	bl	8002b20 <RTC_EnterInitMode>
 8002a22:	4603      	mov	r3, r0
 8002a24:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d12c      	bne.n	8002a86 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002a3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a3e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6899      	ldr	r1, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68d2      	ldr	r2, [r2, #12]
 8002a66:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6919      	ldr	r1, [r3, #16]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	041a      	lsls	r2, r3, #16
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f886 	bl	8002b8e <RTC_ExitInitMode>
 8002a82:	4603      	mov	r3, r0
 8002a84:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d110      	bne.n	8002aae <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699a      	ldr	r2, [r3, #24]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	22ff      	movs	r2, #255	; 0xff
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ab6:	e001      	b.n	8002abc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	; (8002b1c <HAL_RTC_WaitForSynchro+0x48>)
 8002ae6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ae8:	f7fd ff7e 	bl	80009e8 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002aee:	e009      	b.n	8002b04 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002af0:	f7fd ff7a 	bl	80009e8 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002afe:	d901      	bls.n	8002b04 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e007      	b.n	8002b14 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0ee      	beq.n	8002af0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	0001ff5f 	.word	0x0001ff5f

08002b20 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d122      	bne.n	8002b84 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b4c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b4e:	f7fd ff4b 	bl	80009e8 <HAL_GetTick>
 8002b52:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b54:	e00c      	b.n	8002b70 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b56:	f7fd ff47 	bl	80009e8 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b64:	d904      	bls.n	8002b70 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <RTC_EnterInitMode+0x64>
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d1e8      	bne.n	8002b56 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ff8b 	bl	8002ad4 <HAL_RTC_WaitForSynchro>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d004      	beq.n	8002bce <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e040      	b.n	8002c6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fd fd74 	bl	80006e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2224      	movs	r2, #36	; 0x24
 8002c04:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0201 	bic.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fdd0 	bl	80037c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fbf9 	bl	800341c <UART_SetConfig>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e01b      	b.n	8002c6c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fe4f 	bl	8003908 <UART_CheckIdleState>
 8002c6a:	4603      	mov	r3, r0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	; 0x28
 8002c78:	af02      	add	r7, sp, #8
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d178      	bne.n	8002d7e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_UART_Transmit+0x24>
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e071      	b.n	8002d80 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2221      	movs	r2, #33	; 0x21
 8002ca8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002caa:	f7fd fe9d 	bl	80009e8 <HAL_GetTick>
 8002cae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	88fa      	ldrh	r2, [r7, #6]
 8002cb4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	88fa      	ldrh	r2, [r7, #6]
 8002cbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cc8:	d108      	bne.n	8002cdc <HAL_UART_Transmit+0x68>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d104      	bne.n	8002cdc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	61bb      	str	r3, [r7, #24]
 8002cda:	e003      	b.n	8002ce4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ce4:	e030      	b.n	8002d48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2200      	movs	r2, #0
 8002cee:	2180      	movs	r1, #128	; 0x80
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 feb1 	bl	8003a58 <UART_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d004      	beq.n	8002d06 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e03c      	b.n	8002d80 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10b      	bne.n	8002d24 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	881a      	ldrh	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d18:	b292      	uxth	r2, r2
 8002d1a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	3302      	adds	r3, #2
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	e008      	b.n	8002d36 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	781a      	ldrb	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	b292      	uxth	r2, r2
 8002d2e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	3301      	adds	r3, #1
 8002d34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1c8      	bne.n	8002ce6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2140      	movs	r1, #64	; 0x40
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 fe7a 	bl	8003a58 <UART_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d004      	beq.n	8002d74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e005      	b.n	8002d80 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e000      	b.n	8002d80 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002d7e:	2302      	movs	r3, #2
  }
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	; 0x28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d132      	bne.n	8002e06 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_UART_Receive_IT+0x24>
 8002da6:	88fb      	ldrh	r3, [r7, #6]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e02b      	b.n	8002e08 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d018      	beq.n	8002df6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	e853 3f00 	ldrex	r3, [r3]
 8002dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de6:	69f9      	ldr	r1, [r7, #28]
 8002de8:	6a3a      	ldr	r2, [r7, #32]
 8002dea:	e841 2300 	strex	r3, r2, [r1]
 8002dee:	61bb      	str	r3, [r7, #24]
   return(result);
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1e6      	bne.n	8002dc4 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fe99 	bl	8003b34 <UART_Start_Receive_IT>
 8002e02:	4603      	mov	r3, r0
 8002e04:	e000      	b.n	8002e08 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
  }
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3728      	adds	r7, #40	; 0x28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b0ba      	sub	sp, #232	; 0xe8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e3e:	4013      	ands	r3, r2
 8002e40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d115      	bne.n	8002e78 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00f      	beq.n	8002e78 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d009      	beq.n	8002e78 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 82ab 	beq.w	80033c4 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	4798      	blx	r3
      }
      return;
 8002e76:	e2a5      	b.n	80033c4 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 8117 	beq.w	80030b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002e92:	4b85      	ldr	r3, [pc, #532]	; (80030a8 <HAL_UART_IRQHandler+0x298>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 810a 	beq.w	80030b0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d011      	beq.n	8002ecc <HAL_UART_IRQHandler+0xbc>
 8002ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00b      	beq.n	8002ecc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec2:	f043 0201 	orr.w	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d011      	beq.n	8002efc <HAL_UART_IRQHandler+0xec>
 8002ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef2:	f043 0204 	orr.w	r2, r3, #4
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d011      	beq.n	8002f2c <HAL_UART_IRQHandler+0x11c>
 8002f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00b      	beq.n	8002f2c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2204      	movs	r2, #4
 8002f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f22:	f043 0202 	orr.w	r2, r3, #2
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d017      	beq.n	8002f68 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d105      	bne.n	8002f50 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f48:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2208      	movs	r2, #8
 8002f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f5e:	f043 0208 	orr.w	r2, r3, #8
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d012      	beq.n	8002f9a <HAL_UART_IRQHandler+0x18a>
 8002f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00c      	beq.n	8002f9a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f90:	f043 0220 	orr.w	r2, r3, #32
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8211 	beq.w	80033c8 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00d      	beq.n	8002fce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d007      	beq.n	8002fce <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	2b40      	cmp	r3, #64	; 0x40
 8002fe4:	d005      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fea:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d04f      	beq.n	8003092 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fe64 	bl	8003cc0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	d141      	bne.n	800308a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3308      	adds	r3, #8
 800300c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003010:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003014:	e853 3f00 	ldrex	r3, [r3]
 8003018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800301c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3308      	adds	r3, #8
 800302e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003032:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800303e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003042:	e841 2300 	strex	r3, r2, [r1]
 8003046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800304a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1d9      	bne.n	8003006 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003056:	2b00      	cmp	r3, #0
 8003058:	d013      	beq.n	8003082 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305e:	4a13      	ldr	r2, [pc, #76]	; (80030ac <HAL_UART_IRQHandler+0x29c>)
 8003060:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd fe3d 	bl	8000ce6 <HAL_DMA_Abort_IT>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d017      	beq.n	80030a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800307c:	4610      	mov	r0, r2
 800307e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003080:	e00f      	b.n	80030a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f9b4 	bl	80033f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003088:	e00b      	b.n	80030a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f9b0 	bl	80033f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003090:	e007      	b.n	80030a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f9ac 	bl	80033f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80030a0:	e192      	b.n	80033c8 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a2:	bf00      	nop
    return;
 80030a4:	e190      	b.n	80033c8 <HAL_UART_IRQHandler+0x5b8>
 80030a6:	bf00      	nop
 80030a8:	04000120 	.word	0x04000120
 80030ac:	08003d89 	.word	0x08003d89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	f040 814b 	bne.w	8003350 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8144 	beq.w	8003350 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 813d 	beq.w	8003350 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2210      	movs	r2, #16
 80030dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	f040 80b5 	bne.w	8003258 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8164 	beq.w	80033cc <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800310a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800310e:	429a      	cmp	r2, r3
 8003110:	f080 815c 	bcs.w	80033cc <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800311a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b20      	cmp	r3, #32
 8003126:	f000 8086 	beq.w	8003236 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003132:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003136:	e853 3f00 	ldrex	r3, [r3]
 800313a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800313e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003142:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003146:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003154:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003158:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003160:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003164:	e841 2300 	strex	r3, r2, [r1]
 8003168:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800316c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1da      	bne.n	800312a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3308      	adds	r3, #8
 800317a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800317e:	e853 3f00 	ldrex	r3, [r3]
 8003182:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3308      	adds	r3, #8
 8003194:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003198:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800319c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031a0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031a4:	e841 2300 	strex	r3, r2, [r1]
 80031a8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1e1      	bne.n	8003174 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	3308      	adds	r3, #8
 80031b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031ba:	e853 3f00 	ldrex	r3, [r3]
 80031be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3308      	adds	r3, #8
 80031d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031dc:	e841 2300 	strex	r3, r2, [r1]
 80031e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80031e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1e3      	bne.n	80031b0 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fe:	e853 3f00 	ldrex	r3, [r3]
 8003202:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003206:	f023 0310 	bic.w	r3, r3, #16
 800320a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003218:	65bb      	str	r3, [r7, #88]	; 0x58
 800321a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800321e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003220:	e841 2300 	strex	r3, r2, [r1]
 8003224:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e4      	bne.n	80031f6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd fd1a 	bl	8000c6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003248:	b29b      	uxth	r3, r3
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	b29b      	uxth	r3, r3
 800324e:	4619      	mov	r1, r3
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f8d7 	bl	8003404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003256:	e0b9      	b.n	80033cc <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003264:	b29b      	uxth	r3, r3
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003272:	b29b      	uxth	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80ab 	beq.w	80033d0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800327a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 80a6 	beq.w	80033d0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328c:	e853 3f00 	ldrex	r3, [r3]
 8003290:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003294:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003298:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032a6:	647b      	str	r3, [r7, #68]	; 0x44
 80032a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032ae:	e841 2300 	strex	r3, r2, [r1]
 80032b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1e4      	bne.n	8003284 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3308      	adds	r3, #8
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	e853 3f00 	ldrex	r3, [r3]
 80032c8:	623b      	str	r3, [r7, #32]
   return(result);
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3308      	adds	r3, #8
 80032da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032de:	633a      	str	r2, [r7, #48]	; 0x30
 80032e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032e6:	e841 2300 	strex	r3, r2, [r1]
 80032ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1e3      	bne.n	80032ba <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	e853 3f00 	ldrex	r3, [r3]
 8003312:	60fb      	str	r3, [r7, #12]
   return(result);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0310 	bic.w	r3, r3, #16
 800331a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332c:	69b9      	ldr	r1, [r7, #24]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	e841 2300 	strex	r3, r2, [r1]
 8003334:	617b      	str	r3, [r7, #20]
   return(result);
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1e4      	bne.n	8003306 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003342:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003346:	4619      	mov	r1, r3
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f85b 	bl	8003404 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800334e:	e03f      	b.n	80033d0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00e      	beq.n	800337a <HAL_UART_IRQHandler+0x56a>
 800335c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fef0 	bl	8004158 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003378:	e02d      	b.n	80033d6 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800337a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00e      	beq.n	80033a4 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01c      	beq.n	80033d4 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
    }
    return;
 80033a2:	e017      	b.n	80033d4 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d012      	beq.n	80033d6 <HAL_UART_IRQHandler+0x5c6>
 80033b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00c      	beq.n	80033d6 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fcf9 	bl	8003db4 <UART_EndTransmit_IT>
    return;
 80033c2:	e008      	b.n	80033d6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80033c4:	bf00      	nop
 80033c6:	e006      	b.n	80033d6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80033c8:	bf00      	nop
 80033ca:	e004      	b.n	80033d6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80033cc:	bf00      	nop
 80033ce:	e002      	b.n	80033d6 <HAL_UART_IRQHandler+0x5c6>
      return;
 80033d0:	bf00      	nop
 80033d2:	e000      	b.n	80033d6 <HAL_UART_IRQHandler+0x5c6>
    return;
 80033d4:	bf00      	nop
  }

}
 80033d6:	37e8      	adds	r7, #232	; 0xe8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	4b92      	ldr	r3, [pc, #584]	; (8003690 <UART_SetConfig+0x274>)
 8003448:	4013      	ands	r3, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	6979      	ldr	r1, [r7, #20]
 8003450:	430b      	orrs	r3, r1
 8003452:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68da      	ldr	r2, [r3, #12]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	430a      	orrs	r2, r1
 800348c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a80      	ldr	r2, [pc, #512]	; (8003694 <UART_SetConfig+0x278>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d120      	bne.n	80034da <UART_SetConfig+0xbe>
 8003498:	4b7f      	ldr	r3, [pc, #508]	; (8003698 <UART_SetConfig+0x27c>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d817      	bhi.n	80034d4 <UART_SetConfig+0xb8>
 80034a4:	a201      	add	r2, pc, #4	; (adr r2, 80034ac <UART_SetConfig+0x90>)
 80034a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034aa:	bf00      	nop
 80034ac:	080034bd 	.word	0x080034bd
 80034b0:	080034c9 	.word	0x080034c9
 80034b4:	080034cf 	.word	0x080034cf
 80034b8:	080034c3 	.word	0x080034c3
 80034bc:	2301      	movs	r3, #1
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	e0b5      	b.n	800362e <UART_SetConfig+0x212>
 80034c2:	2302      	movs	r3, #2
 80034c4:	77fb      	strb	r3, [r7, #31]
 80034c6:	e0b2      	b.n	800362e <UART_SetConfig+0x212>
 80034c8:	2304      	movs	r3, #4
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	e0af      	b.n	800362e <UART_SetConfig+0x212>
 80034ce:	2308      	movs	r3, #8
 80034d0:	77fb      	strb	r3, [r7, #31]
 80034d2:	e0ac      	b.n	800362e <UART_SetConfig+0x212>
 80034d4:	2310      	movs	r3, #16
 80034d6:	77fb      	strb	r3, [r7, #31]
 80034d8:	e0a9      	b.n	800362e <UART_SetConfig+0x212>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a6f      	ldr	r2, [pc, #444]	; (800369c <UART_SetConfig+0x280>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d124      	bne.n	800352e <UART_SetConfig+0x112>
 80034e4:	4b6c      	ldr	r3, [pc, #432]	; (8003698 <UART_SetConfig+0x27c>)
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034f0:	d011      	beq.n	8003516 <UART_SetConfig+0xfa>
 80034f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034f6:	d817      	bhi.n	8003528 <UART_SetConfig+0x10c>
 80034f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034fc:	d011      	beq.n	8003522 <UART_SetConfig+0x106>
 80034fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003502:	d811      	bhi.n	8003528 <UART_SetConfig+0x10c>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <UART_SetConfig+0xf4>
 8003508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350c:	d006      	beq.n	800351c <UART_SetConfig+0x100>
 800350e:	e00b      	b.n	8003528 <UART_SetConfig+0x10c>
 8003510:	2300      	movs	r3, #0
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e08b      	b.n	800362e <UART_SetConfig+0x212>
 8003516:	2302      	movs	r3, #2
 8003518:	77fb      	strb	r3, [r7, #31]
 800351a:	e088      	b.n	800362e <UART_SetConfig+0x212>
 800351c:	2304      	movs	r3, #4
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e085      	b.n	800362e <UART_SetConfig+0x212>
 8003522:	2308      	movs	r3, #8
 8003524:	77fb      	strb	r3, [r7, #31]
 8003526:	e082      	b.n	800362e <UART_SetConfig+0x212>
 8003528:	2310      	movs	r3, #16
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e07f      	b.n	800362e <UART_SetConfig+0x212>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a5b      	ldr	r2, [pc, #364]	; (80036a0 <UART_SetConfig+0x284>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d124      	bne.n	8003582 <UART_SetConfig+0x166>
 8003538:	4b57      	ldr	r3, [pc, #348]	; (8003698 <UART_SetConfig+0x27c>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003540:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003544:	d011      	beq.n	800356a <UART_SetConfig+0x14e>
 8003546:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800354a:	d817      	bhi.n	800357c <UART_SetConfig+0x160>
 800354c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003550:	d011      	beq.n	8003576 <UART_SetConfig+0x15a>
 8003552:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003556:	d811      	bhi.n	800357c <UART_SetConfig+0x160>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <UART_SetConfig+0x148>
 800355c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003560:	d006      	beq.n	8003570 <UART_SetConfig+0x154>
 8003562:	e00b      	b.n	800357c <UART_SetConfig+0x160>
 8003564:	2300      	movs	r3, #0
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e061      	b.n	800362e <UART_SetConfig+0x212>
 800356a:	2302      	movs	r3, #2
 800356c:	77fb      	strb	r3, [r7, #31]
 800356e:	e05e      	b.n	800362e <UART_SetConfig+0x212>
 8003570:	2304      	movs	r3, #4
 8003572:	77fb      	strb	r3, [r7, #31]
 8003574:	e05b      	b.n	800362e <UART_SetConfig+0x212>
 8003576:	2308      	movs	r3, #8
 8003578:	77fb      	strb	r3, [r7, #31]
 800357a:	e058      	b.n	800362e <UART_SetConfig+0x212>
 800357c:	2310      	movs	r3, #16
 800357e:	77fb      	strb	r3, [r7, #31]
 8003580:	e055      	b.n	800362e <UART_SetConfig+0x212>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a47      	ldr	r2, [pc, #284]	; (80036a4 <UART_SetConfig+0x288>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d124      	bne.n	80035d6 <UART_SetConfig+0x1ba>
 800358c:	4b42      	ldr	r3, [pc, #264]	; (8003698 <UART_SetConfig+0x27c>)
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003594:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003598:	d011      	beq.n	80035be <UART_SetConfig+0x1a2>
 800359a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800359e:	d817      	bhi.n	80035d0 <UART_SetConfig+0x1b4>
 80035a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035a4:	d011      	beq.n	80035ca <UART_SetConfig+0x1ae>
 80035a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035aa:	d811      	bhi.n	80035d0 <UART_SetConfig+0x1b4>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <UART_SetConfig+0x19c>
 80035b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035b4:	d006      	beq.n	80035c4 <UART_SetConfig+0x1a8>
 80035b6:	e00b      	b.n	80035d0 <UART_SetConfig+0x1b4>
 80035b8:	2300      	movs	r3, #0
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e037      	b.n	800362e <UART_SetConfig+0x212>
 80035be:	2302      	movs	r3, #2
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e034      	b.n	800362e <UART_SetConfig+0x212>
 80035c4:	2304      	movs	r3, #4
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e031      	b.n	800362e <UART_SetConfig+0x212>
 80035ca:	2308      	movs	r3, #8
 80035cc:	77fb      	strb	r3, [r7, #31]
 80035ce:	e02e      	b.n	800362e <UART_SetConfig+0x212>
 80035d0:	2310      	movs	r3, #16
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	e02b      	b.n	800362e <UART_SetConfig+0x212>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a33      	ldr	r2, [pc, #204]	; (80036a8 <UART_SetConfig+0x28c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d124      	bne.n	800362a <UART_SetConfig+0x20e>
 80035e0:	4b2d      	ldr	r3, [pc, #180]	; (8003698 <UART_SetConfig+0x27c>)
 80035e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80035e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035ec:	d011      	beq.n	8003612 <UART_SetConfig+0x1f6>
 80035ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035f2:	d817      	bhi.n	8003624 <UART_SetConfig+0x208>
 80035f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035f8:	d011      	beq.n	800361e <UART_SetConfig+0x202>
 80035fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035fe:	d811      	bhi.n	8003624 <UART_SetConfig+0x208>
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <UART_SetConfig+0x1f0>
 8003604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003608:	d006      	beq.n	8003618 <UART_SetConfig+0x1fc>
 800360a:	e00b      	b.n	8003624 <UART_SetConfig+0x208>
 800360c:	2300      	movs	r3, #0
 800360e:	77fb      	strb	r3, [r7, #31]
 8003610:	e00d      	b.n	800362e <UART_SetConfig+0x212>
 8003612:	2302      	movs	r3, #2
 8003614:	77fb      	strb	r3, [r7, #31]
 8003616:	e00a      	b.n	800362e <UART_SetConfig+0x212>
 8003618:	2304      	movs	r3, #4
 800361a:	77fb      	strb	r3, [r7, #31]
 800361c:	e007      	b.n	800362e <UART_SetConfig+0x212>
 800361e:	2308      	movs	r3, #8
 8003620:	77fb      	strb	r3, [r7, #31]
 8003622:	e004      	b.n	800362e <UART_SetConfig+0x212>
 8003624:	2310      	movs	r3, #16
 8003626:	77fb      	strb	r3, [r7, #31]
 8003628:	e001      	b.n	800362e <UART_SetConfig+0x212>
 800362a:	2310      	movs	r3, #16
 800362c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003636:	d16b      	bne.n	8003710 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003638:	7ffb      	ldrb	r3, [r7, #31]
 800363a:	2b08      	cmp	r3, #8
 800363c:	d838      	bhi.n	80036b0 <UART_SetConfig+0x294>
 800363e:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <UART_SetConfig+0x228>)
 8003640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003644:	08003669 	.word	0x08003669
 8003648:	08003671 	.word	0x08003671
 800364c:	08003679 	.word	0x08003679
 8003650:	080036b1 	.word	0x080036b1
 8003654:	0800367f 	.word	0x0800367f
 8003658:	080036b1 	.word	0x080036b1
 800365c:	080036b1 	.word	0x080036b1
 8003660:	080036b1 	.word	0x080036b1
 8003664:	08003687 	.word	0x08003687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003668:	f7fe ff4e 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 800366c:	61b8      	str	r0, [r7, #24]
        break;
 800366e:	e024      	b.n	80036ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003670:	f7fe ff6c 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 8003674:	61b8      	str	r0, [r7, #24]
        break;
 8003676:	e020      	b.n	80036ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <UART_SetConfig+0x290>)
 800367a:	61bb      	str	r3, [r7, #24]
        break;
 800367c:	e01d      	b.n	80036ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800367e:	f7fe fee3 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 8003682:	61b8      	str	r0, [r7, #24]
        break;
 8003684:	e019      	b.n	80036ba <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800368a:	61bb      	str	r3, [r7, #24]
        break;
 800368c:	e015      	b.n	80036ba <UART_SetConfig+0x29e>
 800368e:	bf00      	nop
 8003690:	efff69f3 	.word	0xefff69f3
 8003694:	40013800 	.word	0x40013800
 8003698:	40021000 	.word	0x40021000
 800369c:	40004400 	.word	0x40004400
 80036a0:	40004800 	.word	0x40004800
 80036a4:	40004c00 	.word	0x40004c00
 80036a8:	40005000 	.word	0x40005000
 80036ac:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	77bb      	strb	r3, [r7, #30]
        break;
 80036b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d073      	beq.n	80037a8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	005a      	lsls	r2, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	085b      	lsrs	r3, r3, #1
 80036ca:	441a      	add	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b0f      	cmp	r3, #15
 80036da:	d916      	bls.n	800370a <UART_SetConfig+0x2ee>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e2:	d212      	bcs.n	800370a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	f023 030f 	bic.w	r3, r3, #15
 80036ec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	89fb      	ldrh	r3, [r7, #14]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	89fa      	ldrh	r2, [r7, #14]
 8003706:	60da      	str	r2, [r3, #12]
 8003708:	e04e      	b.n	80037a8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	77bb      	strb	r3, [r7, #30]
 800370e:	e04b      	b.n	80037a8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003710:	7ffb      	ldrb	r3, [r7, #31]
 8003712:	2b08      	cmp	r3, #8
 8003714:	d827      	bhi.n	8003766 <UART_SetConfig+0x34a>
 8003716:	a201      	add	r2, pc, #4	; (adr r2, 800371c <UART_SetConfig+0x300>)
 8003718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371c:	08003741 	.word	0x08003741
 8003720:	08003749 	.word	0x08003749
 8003724:	08003751 	.word	0x08003751
 8003728:	08003767 	.word	0x08003767
 800372c:	08003757 	.word	0x08003757
 8003730:	08003767 	.word	0x08003767
 8003734:	08003767 	.word	0x08003767
 8003738:	08003767 	.word	0x08003767
 800373c:	0800375f 	.word	0x0800375f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003740:	f7fe fee2 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8003744:	61b8      	str	r0, [r7, #24]
        break;
 8003746:	e013      	b.n	8003770 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003748:	f7fe ff00 	bl	800254c <HAL_RCC_GetPCLK2Freq>
 800374c:	61b8      	str	r0, [r7, #24]
        break;
 800374e:	e00f      	b.n	8003770 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003750:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <UART_SetConfig+0x3a4>)
 8003752:	61bb      	str	r3, [r7, #24]
        break;
 8003754:	e00c      	b.n	8003770 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003756:	f7fe fe77 	bl	8002448 <HAL_RCC_GetSysClockFreq>
 800375a:	61b8      	str	r0, [r7, #24]
        break;
 800375c:	e008      	b.n	8003770 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800375e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003762:	61bb      	str	r3, [r7, #24]
        break;
 8003764:	e004      	b.n	8003770 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	77bb      	strb	r3, [r7, #30]
        break;
 800376e:	bf00      	nop
    }

    if (pclk != 0U)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d018      	beq.n	80037a8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	085a      	lsrs	r2, r3, #1
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	441a      	add	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	2b0f      	cmp	r3, #15
 800378e:	d909      	bls.n	80037a4 <UART_SetConfig+0x388>
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003796:	d205      	bcs.n	80037a4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	b29a      	uxth	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	e001      	b.n	80037a8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80037b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3720      	adds	r7, #32
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	007a1200 	.word	0x007a1200

080037c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d01a      	beq.n	80038da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c2:	d10a      	bne.n	80038da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	605a      	str	r2, [r3, #4]
  }
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b098      	sub	sp, #96	; 0x60
 800390c:	af02      	add	r7, sp, #8
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003918:	f7fd f866 	bl	80009e8 <HAL_GetTick>
 800391c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b08      	cmp	r3, #8
 800392a:	d12e      	bne.n	800398a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800392c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003934:	2200      	movs	r2, #0
 8003936:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f88c 	bl	8003a58 <UART_WaitOnFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d021      	beq.n	800398a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394e:	e853 3f00 	ldrex	r3, [r3]
 8003952:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800395a:	653b      	str	r3, [r7, #80]	; 0x50
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003964:	647b      	str	r3, [r7, #68]	; 0x44
 8003966:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800396a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800396c:	e841 2300 	strex	r3, r2, [r1]
 8003970:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e6      	bne.n	8003946 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e062      	b.n	8003a50 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b04      	cmp	r3, #4
 8003996:	d149      	bne.n	8003a2c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a0:	2200      	movs	r2, #0
 80039a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f856 	bl	8003a58 <UART_WaitOnFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d03c      	beq.n	8003a2c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	e853 3f00 	ldrex	r3, [r3]
 80039be:	623b      	str	r3, [r7, #32]
   return(result);
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d0:	633b      	str	r3, [r7, #48]	; 0x30
 80039d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d8:	e841 2300 	strex	r3, r2, [r1]
 80039dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e6      	bne.n	80039b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3308      	adds	r3, #8
 80039ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	e853 3f00 	ldrex	r3, [r3]
 80039f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3308      	adds	r3, #8
 8003a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a04:	61fa      	str	r2, [r7, #28]
 8003a06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a08:	69b9      	ldr	r1, [r7, #24]
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	e841 2300 	strex	r3, r2, [r1]
 8003a10:	617b      	str	r3, [r7, #20]
   return(result);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1e5      	bne.n	80039e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e011      	b.n	8003a50 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3758      	adds	r7, #88	; 0x58
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a68:	e04f      	b.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a70:	d04b      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a72:	f7fc ffb9 	bl	80009e8 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d302      	bcc.n	8003a88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e04e      	b.n	8003b2a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d037      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2b80      	cmp	r3, #128	; 0x80
 8003a9e:	d034      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b40      	cmp	r3, #64	; 0x40
 8003aa4:	d031      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d110      	bne.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2208      	movs	r2, #8
 8003aba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f8ff 	bl	8003cc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e029      	b.n	8003b2a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae4:	d111      	bne.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003aee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f8e5 	bl	8003cc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2220      	movs	r2, #32
 8003afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e00f      	b.n	8003b2a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	bf0c      	ite	eq
 8003b1a:	2301      	moveq	r3, #1
 8003b1c:	2300      	movne	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d0a0      	beq.n	8003a6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b097      	sub	sp, #92	; 0x5c
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	88fa      	ldrh	r2, [r7, #6]
 8003b4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	88fa      	ldrh	r2, [r7, #6]
 8003b54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b66:	d10e      	bne.n	8003b86 <UART_Start_Receive_IT+0x52>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <UART_Start_Receive_IT+0x48>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b7a:	e02d      	b.n	8003bd8 <UART_Start_Receive_IT+0xa4>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	22ff      	movs	r2, #255	; 0xff
 8003b80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b84:	e028      	b.n	8003bd8 <UART_Start_Receive_IT+0xa4>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10d      	bne.n	8003baa <UART_Start_Receive_IT+0x76>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d104      	bne.n	8003ba0 <UART_Start_Receive_IT+0x6c>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	22ff      	movs	r2, #255	; 0xff
 8003b9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b9e:	e01b      	b.n	8003bd8 <UART_Start_Receive_IT+0xa4>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	227f      	movs	r2, #127	; 0x7f
 8003ba4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ba8:	e016      	b.n	8003bd8 <UART_Start_Receive_IT+0xa4>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bb2:	d10d      	bne.n	8003bd0 <UART_Start_Receive_IT+0x9c>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d104      	bne.n	8003bc6 <UART_Start_Receive_IT+0x92>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	227f      	movs	r2, #127	; 0x7f
 8003bc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bc4:	e008      	b.n	8003bd8 <UART_Start_Receive_IT+0xa4>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	223f      	movs	r2, #63	; 0x3f
 8003bca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bce:	e003      	b.n	8003bd8 <UART_Start_Receive_IT+0xa4>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2222      	movs	r2, #34	; 0x22
 8003be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3308      	adds	r3, #8
 8003bee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf2:	e853 3f00 	ldrex	r3, [r3]
 8003bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	657b      	str	r3, [r7, #84]	; 0x54
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	3308      	adds	r3, #8
 8003c06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c08:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c0a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e5      	bne.n	8003be8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c24:	d107      	bne.n	8003c36 <UART_Start_Receive_IT+0x102>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d103      	bne.n	8003c36 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4a21      	ldr	r2, [pc, #132]	; (8003cb8 <UART_Start_Receive_IT+0x184>)
 8003c32:	669a      	str	r2, [r3, #104]	; 0x68
 8003c34:	e002      	b.n	8003c3c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4a20      	ldr	r2, [pc, #128]	; (8003cbc <UART_Start_Receive_IT+0x188>)
 8003c3a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d019      	beq.n	8003c78 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	e853 3f00 	ldrex	r3, [r3]
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003c58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c62:	637b      	str	r3, [r7, #52]	; 0x34
 8003c64:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e6      	bne.n	8003c44 <UART_Start_Receive_IT+0x110>
 8003c76:	e018      	b.n	8003caa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	613b      	str	r3, [r7, #16]
   return(result);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f043 0320 	orr.w	r3, r3, #32
 8003c8c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c96:	623b      	str	r3, [r7, #32]
 8003c98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	69f9      	ldr	r1, [r7, #28]
 8003c9c:	6a3a      	ldr	r2, [r7, #32]
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e6      	bne.n	8003c78 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	375c      	adds	r7, #92	; 0x5c
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	08003fb1 	.word	0x08003fb1
 8003cbc:	08003e09 	.word	0x08003e09

08003cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b095      	sub	sp, #84	; 0x54
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ce6:	643b      	str	r3, [r7, #64]	; 0x40
 8003ce8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e6      	bne.n	8003cc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3308      	adds	r3, #8
 8003d00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3308      	adds	r3, #8
 8003d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e5      	bne.n	8003cfa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d118      	bne.n	8003d68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f023 0310 	bic.w	r3, r3, #16
 8003d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d54:	61bb      	str	r3, [r7, #24]
 8003d56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6979      	ldr	r1, [r7, #20]
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	613b      	str	r3, [r7, #16]
   return(result);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e6      	bne.n	8003d36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d7c:	bf00      	nop
 8003d7e:	3754      	adds	r7, #84	; 0x54
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f7ff fb22 	bl	80033f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dac:	bf00      	nop
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	e853 3f00 	ldrex	r3, [r3]
 8003dc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dde:	6979      	ldr	r1, [r7, #20]
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	613b      	str	r3, [r7, #16]
   return(result);
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e6      	bne.n	8003dbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff faee 	bl	80033dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e00:	bf00      	nop
 8003e02:	3720      	adds	r7, #32
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b09c      	sub	sp, #112	; 0x70
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e16:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e20:	2b22      	cmp	r3, #34	; 0x22
 8003e22:	f040 80b9 	bne.w	8003f98 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e2c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e30:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003e34:	b2d9      	uxtb	r1, r3
 8003e36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e40:	400a      	ands	r2, r1
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f040 809c 	bne.w	8003fa8 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e84:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e90:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e6      	bne.n	8003e70 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3308      	adds	r3, #8
 8003ea8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	e853 3f00 	ldrex	r3, [r3]
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	667b      	str	r3, [r7, #100]	; 0x64
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ec2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ec4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ec8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e5      	bne.n	8003ea2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d018      	beq.n	8003f2a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	623b      	str	r3, [r7, #32]
   return(result);
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f0c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	461a      	mov	r2, r3
 8003f14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f16:	633b      	str	r3, [r7, #48]	; 0x30
 8003f18:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e6      	bne.n	8003ef8 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d12e      	bne.n	8003f90 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f023 0310 	bic.w	r3, r3, #16
 8003f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f56:	61fb      	str	r3, [r7, #28]
 8003f58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5a:	69b9      	ldr	r1, [r7, #24]
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	617b      	str	r3, [r7, #20]
   return(result);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e6      	bne.n	8003f38 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d103      	bne.n	8003f80 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2210      	movs	r2, #16
 8003f7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f86:	4619      	mov	r1, r3
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff fa3b 	bl	8003404 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f8e:	e00b      	b.n	8003fa8 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7fc fc71 	bl	8000878 <HAL_UART_RxCpltCallback>
}
 8003f96:	e007      	b.n	8003fa8 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0208 	orr.w	r2, r2, #8
 8003fa6:	619a      	str	r2, [r3, #24]
}
 8003fa8:	bf00      	nop
 8003faa:	3770      	adds	r7, #112	; 0x70
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b09c      	sub	sp, #112	; 0x70
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fbe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fc8:	2b22      	cmp	r3, #34	; 0x22
 8003fca:	f040 80b9 	bne.w	8004140 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003fde:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8003fe2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	1c9a      	adds	r2, r3, #2
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	b29a      	uxth	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004010:	b29b      	uxth	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	f040 809c 	bne.w	8004150 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004028:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800402c:	667b      	str	r3, [r7, #100]	; 0x64
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004036:	657b      	str	r3, [r7, #84]	; 0x54
 8004038:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800403c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e6      	bne.n	8004018 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	3308      	adds	r3, #8
 8004050:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	f023 0301 	bic.w	r3, r3, #1
 8004060:	663b      	str	r3, [r7, #96]	; 0x60
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3308      	adds	r3, #8
 8004068:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800406a:	643a      	str	r2, [r7, #64]	; 0x40
 800406c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004070:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e5      	bne.n	800404a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d018      	beq.n	80040d2 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e6      	bne.n	80040a0 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d12e      	bne.n	8004138 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f023 0310 	bic.w	r3, r3, #16
 80040f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	6979      	ldr	r1, [r7, #20]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	613b      	str	r3, [r7, #16]
   return(result);
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e6      	bne.n	80040e0 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b10      	cmp	r3, #16
 800411e:	d103      	bne.n	8004128 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2210      	movs	r2, #16
 8004126:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800412e:	4619      	mov	r1, r3
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff f967 	bl	8003404 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004136:	e00b      	b.n	8004150 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7fc fb9d 	bl	8000878 <HAL_UART_RxCpltCallback>
}
 800413e:	e007      	b.n	8004150 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0208 	orr.w	r2, r2, #8
 800414e:	619a      	str	r2, [r3, #24]
}
 8004150:	bf00      	nop
 8004152:	3770      	adds	r7, #112	; 0x70
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <memset>:
 800416c:	4402      	add	r2, r0
 800416e:	4603      	mov	r3, r0
 8004170:	4293      	cmp	r3, r2
 8004172:	d100      	bne.n	8004176 <memset+0xa>
 8004174:	4770      	bx	lr
 8004176:	f803 1b01 	strb.w	r1, [r3], #1
 800417a:	e7f9      	b.n	8004170 <memset+0x4>

0800417c <__libc_init_array>:
 800417c:	b570      	push	{r4, r5, r6, lr}
 800417e:	4d0d      	ldr	r5, [pc, #52]	; (80041b4 <__libc_init_array+0x38>)
 8004180:	4c0d      	ldr	r4, [pc, #52]	; (80041b8 <__libc_init_array+0x3c>)
 8004182:	1b64      	subs	r4, r4, r5
 8004184:	10a4      	asrs	r4, r4, #2
 8004186:	2600      	movs	r6, #0
 8004188:	42a6      	cmp	r6, r4
 800418a:	d109      	bne.n	80041a0 <__libc_init_array+0x24>
 800418c:	4d0b      	ldr	r5, [pc, #44]	; (80041bc <__libc_init_array+0x40>)
 800418e:	4c0c      	ldr	r4, [pc, #48]	; (80041c0 <__libc_init_array+0x44>)
 8004190:	f000 f826 	bl	80041e0 <_init>
 8004194:	1b64      	subs	r4, r4, r5
 8004196:	10a4      	asrs	r4, r4, #2
 8004198:	2600      	movs	r6, #0
 800419a:	42a6      	cmp	r6, r4
 800419c:	d105      	bne.n	80041aa <__libc_init_array+0x2e>
 800419e:	bd70      	pop	{r4, r5, r6, pc}
 80041a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a4:	4798      	blx	r3
 80041a6:	3601      	adds	r6, #1
 80041a8:	e7ee      	b.n	8004188 <__libc_init_array+0xc>
 80041aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ae:	4798      	blx	r3
 80041b0:	3601      	adds	r6, #1
 80041b2:	e7f2      	b.n	800419a <__libc_init_array+0x1e>
 80041b4:	08004238 	.word	0x08004238
 80041b8:	08004238 	.word	0x08004238
 80041bc:	08004238 	.word	0x08004238
 80041c0:	0800423c 	.word	0x0800423c

080041c4 <memcpy>:
 80041c4:	440a      	add	r2, r1
 80041c6:	4291      	cmp	r1, r2
 80041c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80041cc:	d100      	bne.n	80041d0 <memcpy+0xc>
 80041ce:	4770      	bx	lr
 80041d0:	b510      	push	{r4, lr}
 80041d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041da:	4291      	cmp	r1, r2
 80041dc:	d1f9      	bne.n	80041d2 <memcpy+0xe>
 80041de:	bd10      	pop	{r4, pc}

080041e0 <_init>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	bf00      	nop
 80041e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e6:	bc08      	pop	{r3}
 80041e8:	469e      	mov	lr, r3
 80041ea:	4770      	bx	lr

080041ec <_fini>:
 80041ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ee:	bf00      	nop
 80041f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041f2:	bc08      	pop	{r3}
 80041f4:	469e      	mov	lr, r3
 80041f6:	4770      	bx	lr
