
Experiencia_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000620c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080063a0  080063a0  000163a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063d8  080063d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080063d8  080063d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063d8  080063d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063d8  080063d8  000163d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080063e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000039c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a8  200003a8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000dacf  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000229a  00000000  00000000  0002db4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a00  00000000  00000000  0002fde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000793  00000000  00000000  000307e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000212be  00000000  00000000  00030f7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f32d  00000000  00000000  00052239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c864e  00000000  00000000  00061566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002764  00000000  00000000  00129bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0012c318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006388 	.word	0x08006388

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08006388 	.word	0x08006388

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b08c      	sub	sp, #48	; 0x30
 80001e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ea:	f107 031c 	add.w	r3, r7, #28
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]
 80001f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001fa:	4b47      	ldr	r3, [pc, #284]	; (8000318 <MX_GPIO_Init+0x134>)
 80001fc:	695b      	ldr	r3, [r3, #20]
 80001fe:	4a46      	ldr	r2, [pc, #280]	; (8000318 <MX_GPIO_Init+0x134>)
 8000200:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000204:	6153      	str	r3, [r2, #20]
 8000206:	4b44      	ldr	r3, [pc, #272]	; (8000318 <MX_GPIO_Init+0x134>)
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800020e:	61bb      	str	r3, [r7, #24]
 8000210:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000212:	4b41      	ldr	r3, [pc, #260]	; (8000318 <MX_GPIO_Init+0x134>)
 8000214:	695b      	ldr	r3, [r3, #20]
 8000216:	4a40      	ldr	r2, [pc, #256]	; (8000318 <MX_GPIO_Init+0x134>)
 8000218:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800021c:	6153      	str	r3, [r2, #20]
 800021e:	4b3e      	ldr	r3, [pc, #248]	; (8000318 <MX_GPIO_Init+0x134>)
 8000220:	695b      	ldr	r3, [r3, #20]
 8000222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000226:	617b      	str	r3, [r7, #20]
 8000228:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800022a:	4b3b      	ldr	r3, [pc, #236]	; (8000318 <MX_GPIO_Init+0x134>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	4a3a      	ldr	r2, [pc, #232]	; (8000318 <MX_GPIO_Init+0x134>)
 8000230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000234:	6153      	str	r3, [r2, #20]
 8000236:	4b38      	ldr	r3, [pc, #224]	; (8000318 <MX_GPIO_Init+0x134>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800023e:	613b      	str	r3, [r7, #16]
 8000240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000242:	4b35      	ldr	r3, [pc, #212]	; (8000318 <MX_GPIO_Init+0x134>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	4a34      	ldr	r2, [pc, #208]	; (8000318 <MX_GPIO_Init+0x134>)
 8000248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800024c:	6153      	str	r3, [r2, #20]
 800024e:	4b32      	ldr	r3, [pc, #200]	; (8000318 <MX_GPIO_Init+0x134>)
 8000250:	695b      	ldr	r3, [r3, #20]
 8000252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800025a:	4b2f      	ldr	r3, [pc, #188]	; (8000318 <MX_GPIO_Init+0x134>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	4a2e      	ldr	r2, [pc, #184]	; (8000318 <MX_GPIO_Init+0x134>)
 8000260:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000264:	6153      	str	r3, [r2, #20]
 8000266:	4b2c      	ldr	r3, [pc, #176]	; (8000318 <MX_GPIO_Init+0x134>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800026e:	60bb      	str	r3, [r7, #8]
 8000270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	4b29      	ldr	r3, [pc, #164]	; (8000318 <MX_GPIO_Init+0x134>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	4a28      	ldr	r2, [pc, #160]	; (8000318 <MX_GPIO_Init+0x134>)
 8000278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800027c:	6153      	str	r3, [r2, #20]
 800027e:	4b26      	ldr	r3, [pc, #152]	; (8000318 <MX_GPIO_Init+0x134>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000290:	4822      	ldr	r0, [pc, #136]	; (800031c <MX_GPIO_Init+0x138>)
 8000292:	f000 fda5 	bl	8000de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	2140      	movs	r1, #64	; 0x40
 800029a:	4821      	ldr	r0, [pc, #132]	; (8000320 <MX_GPIO_Init+0x13c>)
 800029c:	f000 fda0 	bl	8000de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80002a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80002aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ac:	2300      	movs	r3, #0
 80002ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80002b0:	f107 031c 	add.w	r3, r7, #28
 80002b4:	4619      	mov	r1, r3
 80002b6:	481b      	ldr	r0, [pc, #108]	; (8000324 <MX_GPIO_Init+0x140>)
 80002b8:	f000 fc08 	bl	8000acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80002bc:	f244 0381 	movw	r3, #16513	; 0x4081
 80002c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c2:	2301      	movs	r3, #1
 80002c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c6:	2300      	movs	r3, #0
 80002c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ca:	2300      	movs	r3, #0
 80002cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ce:	f107 031c 	add.w	r3, r7, #28
 80002d2:	4619      	mov	r1, r3
 80002d4:	4811      	ldr	r0, [pc, #68]	; (800031c <MX_GPIO_Init+0x138>)
 80002d6:	f000 fbf9 	bl	8000acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80002da:	2340      	movs	r3, #64	; 0x40
 80002dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002de:	2301      	movs	r3, #1
 80002e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e2:	2300      	movs	r3, #0
 80002e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e6:	2300      	movs	r3, #0
 80002e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80002ea:	f107 031c 	add.w	r3, r7, #28
 80002ee:	4619      	mov	r1, r3
 80002f0:	480b      	ldr	r0, [pc, #44]	; (8000320 <MX_GPIO_Init+0x13c>)
 80002f2:	f000 fbeb 	bl	8000acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80002f6:	2380      	movs	r3, #128	; 0x80
 80002f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002fa:	2300      	movs	r3, #0
 80002fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fe:	2300      	movs	r3, #0
 8000300:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000302:	f107 031c 	add.w	r3, r7, #28
 8000306:	4619      	mov	r1, r3
 8000308:	4805      	ldr	r0, [pc, #20]	; (8000320 <MX_GPIO_Init+0x13c>)
 800030a:	f000 fbdf 	bl	8000acc <HAL_GPIO_Init>

}
 800030e:	bf00      	nop
 8000310:	3730      	adds	r7, #48	; 0x30
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40021000 	.word	0x40021000
 800031c:	48000400 	.word	0x48000400
 8000320:	48001800 	.word	0x48001800
 8000324:	48000800 	.word	0x48000800

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032e:	f000 fa55 	bl	80007dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000332:	f000 f81b 	bl	800036c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000336:	f7ff ff55 	bl	80001e4 <MX_GPIO_Init>
  MX_RTC_Init();
 800033a:	f000 f885 	bl	8000448 <MX_RTC_Init>
  MX_USART3_UART_Init();
 800033e:	f000 f939 	bl	80005b4 <MX_USART3_UART_Init>
  MX_USB_PCD_Init();
 8000342:	f000 f9d5 	bl	80006f0 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_MspInit(&huart3);
 8000346:	4808      	ldr	r0, [pc, #32]	; (8000368 <main+0x40>)
 8000348:	f000 f964 	bl	8000614 <HAL_UART_MspInit>
  char message[5] = {0};
 800034c:	2300      	movs	r3, #0
 800034e:	603b      	str	r3, [r7, #0]
 8000350:	2300      	movs	r3, #0
 8000352:	713b      	strb	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	USART_receive_data(message, 1);
 8000354:	463b      	mov	r3, r7
 8000356:	2101      	movs	r1, #1
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f9b5 	bl	80006c8 <USART_receive_data>
	USART_transmit_data(message);
 800035e:	463b      	mov	r3, r7
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f99b 	bl	800069c <USART_transmit_data>
	USART_receive_data(message, 1);
 8000366:	e7f5      	b.n	8000354 <main+0x2c>
 8000368:	20000048 	.word	0x20000048

0800036c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b0a6      	sub	sp, #152	; 0x98
 8000370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000372:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000376:	2228      	movs	r2, #40	; 0x28
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f005 ffd8 	bl	8006330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000380:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000384:	2200      	movs	r2, #0
 8000386:	601a      	str	r2, [r3, #0]
 8000388:	605a      	str	r2, [r3, #4]
 800038a:	609a      	str	r2, [r3, #8]
 800038c:	60da      	str	r2, [r3, #12]
 800038e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000390:	1d3b      	adds	r3, r7, #4
 8000392:	2258      	movs	r2, #88	; 0x58
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f005 ffca 	bl	8006330 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800039c:	2309      	movs	r3, #9
 800039e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80003a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80003a4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a6:	2301      	movs	r3, #1
 80003a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80003aa:	2301      	movs	r3, #1
 80003ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b0:	2302      	movs	r3, #2
 80003b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003be:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003d0:	4618      	mov	r0, r3
 80003d2:	f001 ffe7 	bl	80023a4 <HAL_RCC_OscConfig>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80003dc:	f000 f82e 	bl	800043c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e0:	230f      	movs	r3, #15
 80003e2:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e4:	2302      	movs	r3, #2
 80003e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e8:	2300      	movs	r3, #0
 80003ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003fa:	2102      	movs	r1, #2
 80003fc:	4618      	mov	r0, r3
 80003fe:	f003 f825 	bl	800344c <HAL_RCC_ClockConfig>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000408:	f000 f818 	bl	800043c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART3
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <SystemClock_Config+0xcc>)
 800040e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000418:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800041a:	2300      	movs	r3, #0
 800041c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	4618      	mov	r0, r3
 8000422:	f003 fa33 	bl	800388c <HAL_RCCEx_PeriphCLKConfig>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800042c:	f000 f806 	bl	800043c <Error_Handler>
  }
}
 8000430:	bf00      	nop
 8000432:	3798      	adds	r7, #152	; 0x98
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	00030004 	.word	0x00030004

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000444:	e7fe      	b.n	8000444 <Error_Handler+0x8>
	...

08000448 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800044c:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_RTC_Init+0x44>)
 800044e:	4a10      	ldr	r2, [pc, #64]	; (8000490 <MX_RTC_Init+0x48>)
 8000450:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <MX_RTC_Init+0x44>)
 8000454:	2200      	movs	r2, #0
 8000456:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000458:	4b0c      	ldr	r3, [pc, #48]	; (800048c <MX_RTC_Init+0x44>)
 800045a:	227f      	movs	r2, #127	; 0x7f
 800045c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <MX_RTC_Init+0x44>)
 8000460:	22ff      	movs	r2, #255	; 0xff
 8000462:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000464:	4b09      	ldr	r3, [pc, #36]	; (800048c <MX_RTC_Init+0x44>)
 8000466:	2200      	movs	r2, #0
 8000468:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800046a:	4b08      	ldr	r3, [pc, #32]	; (800048c <MX_RTC_Init+0x44>)
 800046c:	2200      	movs	r2, #0
 800046e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_RTC_Init+0x44>)
 8000472:	2200      	movs	r2, #0
 8000474:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000476:	4805      	ldr	r0, [pc, #20]	; (800048c <MX_RTC_Init+0x44>)
 8000478:	f003 fc26 	bl	8003cc8 <HAL_RTC_Init>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000482:	f7ff ffdb 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000028 	.word	0x20000028
 8000490:	40002800 	.word	0x40002800

08000494 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a0d      	ldr	r2, [pc, #52]	; (80004d8 <HAL_RTC_MspInit+0x44>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d111      	bne.n	80004ca <HAL_RTC_MspInit+0x36>
 80004a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004aa:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	fa93 f3a3 	rbit	r3, r3
 80004b2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80004b4:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80004b6:	fab3 f383 	clz	r3, r3
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	461a      	mov	r2, r3
 80004be:	4b07      	ldr	r3, [pc, #28]	; (80004dc <HAL_RTC_MspInit+0x48>)
 80004c0:	4413      	add	r3, r2
 80004c2:	009b      	lsls	r3, r3, #2
 80004c4:	461a      	mov	r2, r3
 80004c6:	2301      	movs	r3, #1
 80004c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40002800 	.word	0x40002800
 80004dc:	10908100 	.word	0x10908100

080004e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <HAL_MspInit+0x44>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_MspInit+0x44>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <HAL_MspInit+0x44>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <HAL_MspInit+0x44>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	4a08      	ldr	r2, [pc, #32]	; (8000524 <HAL_MspInit+0x44>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000508:	61d3      	str	r3, [r2, #28]
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <HAL_MspInit+0x44>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	40021000 	.word	0x40021000

08000528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800052c:	e7fe      	b.n	800052c <NMI_Handler+0x4>

0800052e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <HardFault_Handler+0x4>

08000534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <MemManage_Handler+0x4>

0800053a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <BusFault_Handler+0x4>

08000540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <UsageFault_Handler+0x4>

08000546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000574:	f000 f978 	bl	8000868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}

0800057c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000582:	f000 fd0c 	bl	8000f9e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	200000d0 	.word	0x200000d0

08000590 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <SystemInit+0x20>)
 8000596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800059a:	4a05      	ldr	r2, [pc, #20]	; (80005b0 <SystemInit+0x20>)
 800059c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_USART3_UART_Init+0x58>)
 80005ba:	4a15      	ldr	r2, [pc, #84]	; (8000610 <MX_USART3_UART_Init+0x5c>)
 80005bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <MX_USART3_UART_Init+0x58>)
 80005c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_USART3_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_USART3_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_USART3_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_USART3_UART_Init+0x58>)
 80005da:	220c      	movs	r2, #12
 80005dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_USART3_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_USART3_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_USART3_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_USART3_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_USART3_UART_Init+0x58>)
 80005f8:	f003 fc6c 	bl	8003ed4 <HAL_UART_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000602:	f7ff ff1b 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000048 	.word	0x20000048
 8000610:	40004800 	.word	0x40004800

08000614 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a17      	ldr	r2, [pc, #92]	; (8000690 <HAL_UART_MspInit+0x7c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d128      	bne.n	8000688 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <HAL_UART_MspInit+0x80>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a16      	ldr	r2, [pc, #88]	; (8000694 <HAL_UART_MspInit+0x80>)
 800063c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <HAL_UART_MspInit+0x80>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <HAL_UART_MspInit+0x80>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a10      	ldr	r2, [pc, #64]	; (8000694 <HAL_UART_MspInit+0x80>)
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <HAL_UART_MspInit+0x80>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000666:	f44f 7340 	mov.w	r3, #768	; 0x300
 800066a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000674:	2303      	movs	r3, #3
 8000676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000678:	2307      	movs	r3, #7
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <HAL_UART_MspInit+0x84>)
 8000684:	f000 fa22 	bl	8000acc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000688:	bf00      	nop
 800068a:	3728      	adds	r7, #40	; 0x28
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40004800 	.word	0x40004800
 8000694:	40021000 	.word	0x40021000
 8000698:	48000c00 	.word	0x48000c00

0800069c <USART_transmit_data>:
  }
}

/* USER CODE BEGIN 1 */
void USART_transmit_data(char* message)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	uint32_t size = strlen(message);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff fd95 	bl	80001d4 <strlen>
 80006aa:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart3, (uint8_t *) message, size, 1000);
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	4803      	ldr	r0, [pc, #12]	; (80006c4 <USART_transmit_data+0x28>)
 80006b8:	f003 fc5a 	bl	8003f70 <HAL_UART_Transmit>
}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000048 	.word	0x20000048

080006c8 <USART_receive_data>:

void USART_receive_data(char* message, uint32_t size)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive(&huart3, (uint8_t *) message, size, 100000);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <USART_receive_data+0x20>)
 80006d8:	6879      	ldr	r1, [r7, #4]
 80006da:	4804      	ldr	r0, [pc, #16]	; (80006ec <USART_receive_data+0x24>)
 80006dc:	f003 fcd2 	bl	8004084 <HAL_UART_Receive>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	000186a0 	.word	0x000186a0
 80006ec:	20000048 	.word	0x20000048

080006f0 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_USB_PCD_Init+0x44>)
 80006f6:	4a10      	ldr	r2, [pc, #64]	; (8000738 <MX_USB_PCD_Init+0x48>)
 80006f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USB_PCD_Init+0x44>)
 80006fc:	2208      	movs	r2, #8
 80006fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USB_PCD_Init+0x44>)
 8000702:	2202      	movs	r2, #2
 8000704:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USB_PCD_Init+0x44>)
 8000708:	2202      	movs	r2, #2
 800070a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USB_PCD_Init+0x44>)
 800070e:	2200      	movs	r2, #0
 8000710:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USB_PCD_Init+0x44>)
 8000714:	2200      	movs	r2, #0
 8000716:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USB_PCD_Init+0x44>)
 800071a:	2200      	movs	r2, #0
 800071c:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USB_PCD_Init+0x44>)
 8000720:	f000 fb76 	bl	8000e10 <HAL_PCD_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 800072a:	f7ff fe87 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000d0 	.word	0x200000d0
 8000738:	40005c00 	.word	0x40005c00

0800073c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <HAL_PCD_MspInit+0x44>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d113      	bne.n	8000776 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_PCD_MspInit+0x48>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <HAL_PCD_MspInit+0x48>)
 8000754:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <HAL_PCD_MspInit+0x48>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]

    /* USB interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	2014      	movs	r0, #20
 800076c:	f000 f977 	bl	8000a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8000770:	2014      	movs	r0, #20
 8000772:	f000 f990 	bl	8000a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40005c00 	.word	0x40005c00
 8000784:	40021000 	.word	0x40021000

08000788 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007c0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800078c:	f7ff ff00 	bl	8000590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000792:	490d      	ldr	r1, [pc, #52]	; (80007c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000794:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <LoopForever+0xe>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800079c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007a8:	4c0a      	ldr	r4, [pc, #40]	; (80007d4 <LoopForever+0x16>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007b6:	f005 fdc3 	bl	8006340 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ba:	f7ff fdb5 	bl	8000328 <main>

080007be <LoopForever>:

LoopForever:
    b LoopForever
 80007be:	e7fe      	b.n	80007be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007cc:	080063e0 	.word	0x080063e0
  ldr r2, =_sbss
 80007d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007d4:	200003a8 	.word	0x200003a8

080007d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007d8:	e7fe      	b.n	80007d8 <ADC1_2_IRQHandler>
	...

080007dc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_Init+0x28>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a07      	ldr	r2, [pc, #28]	; (8000804 <HAL_Init+0x28>)
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f000 f92b 	bl	8000a48 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 f808 	bl	8000808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f8:	f7ff fe72 	bl	80004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40022000 	.word	0x40022000

08000808 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_InitTick+0x54>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_InitTick+0x58>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000822:	fbb2 f3f3 	udiv	r3, r2, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f943 	bl	8000ab2 <HAL_SYSTICK_Config>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	e00e      	b.n	8000854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b0f      	cmp	r3, #15
 800083a:	d80a      	bhi.n	8000852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800083c:	2200      	movs	r2, #0
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	f04f 30ff 	mov.w	r0, #4294967295
 8000844:	f000 f90b 	bl	8000a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <HAL_InitTick+0x5c>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800084e:	2300      	movs	r3, #0
 8000850:	e000      	b.n	8000854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000000 	.word	0x20000000
 8000860:	20000008 	.word	0x20000008
 8000864:	20000004 	.word	0x20000004

08000868 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_IncTick+0x20>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_IncTick+0x24>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4413      	add	r3, r2
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_IncTick+0x24>)
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000008 	.word	0x20000008
 800088c:	200003a4 	.word	0x200003a4

08000890 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return uwTick;  
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_GetTick+0x14>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	200003a4 	.word	0x200003a4

080008a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	60d3      	str	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <__NVIC_GetPriorityGrouping+0x18>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 0307 	and.w	r3, r3, #7
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db0b      	blt.n	8000936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 021f 	and.w	r2, r3, #31
 8000924:	4907      	ldr	r1, [pc, #28]	; (8000944 <__NVIC_EnableIRQ+0x38>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	2001      	movs	r0, #1
 800092e:	fa00 f202 	lsl.w	r2, r0, r2
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000e100 	.word	0xe000e100

08000948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	6039      	str	r1, [r7, #0]
 8000952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	db0a      	blt.n	8000972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	b2da      	uxtb	r2, r3
 8000960:	490c      	ldr	r1, [pc, #48]	; (8000994 <__NVIC_SetPriority+0x4c>)
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	0112      	lsls	r2, r2, #4
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	440b      	add	r3, r1
 800096c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000970:	e00a      	b.n	8000988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	b2da      	uxtb	r2, r3
 8000976:	4908      	ldr	r1, [pc, #32]	; (8000998 <__NVIC_SetPriority+0x50>)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	3b04      	subs	r3, #4
 8000980:	0112      	lsls	r2, r2, #4
 8000982:	b2d2      	uxtb	r2, r2
 8000984:	440b      	add	r3, r1
 8000986:	761a      	strb	r2, [r3, #24]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000e100 	.word	0xe000e100
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800099c:	b480      	push	{r7}
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 0307 	and.w	r3, r3, #7
 80009ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	f1c3 0307 	rsb	r3, r3, #7
 80009b6:	2b04      	cmp	r3, #4
 80009b8:	bf28      	it	cs
 80009ba:	2304      	movcs	r3, #4
 80009bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3304      	adds	r3, #4
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d902      	bls.n	80009cc <NVIC_EncodePriority+0x30>
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	3b03      	subs	r3, #3
 80009ca:	e000      	b.n	80009ce <NVIC_EncodePriority+0x32>
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	f04f 32ff 	mov.w	r2, #4294967295
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43da      	mvns	r2, r3
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	401a      	ands	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e4:	f04f 31ff 	mov.w	r1, #4294967295
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	fa01 f303 	lsl.w	r3, r1, r3
 80009ee:	43d9      	mvns	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	4313      	orrs	r3, r2
         );
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3724      	adds	r7, #36	; 0x24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
	...

08000a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a14:	d301      	bcc.n	8000a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a16:	2301      	movs	r3, #1
 8000a18:	e00f      	b.n	8000a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <SysTick_Config+0x40>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a22:	210f      	movs	r1, #15
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f7ff ff8e 	bl	8000948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a2c:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <SysTick_Config+0x40>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SysTick_Config+0x40>)
 8000a34:	2207      	movs	r2, #7
 8000a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	e000e010 	.word	0xe000e010

08000a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f7ff ff29 	bl	80008a8 <__NVIC_SetPriorityGrouping>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b086      	sub	sp, #24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a70:	f7ff ff3e 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	68b9      	ldr	r1, [r7, #8]
 8000a7a:	6978      	ldr	r0, [r7, #20]
 8000a7c:	f7ff ff8e 	bl	800099c <NVIC_EncodePriority>
 8000a80:	4602      	mov	r2, r0
 8000a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff ff5d 	bl	8000948 <__NVIC_SetPriority>
}
 8000a8e:	bf00      	nop
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff31 	bl	800090c <__NVIC_EnableIRQ>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff ffa2 	bl	8000a04 <SysTick_Config>
 8000ac0:	4603      	mov	r3, r0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b087      	sub	sp, #28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ada:	e160      	b.n	8000d9e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 8152 	beq.w	8000d98 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d005      	beq.n	8000b0c <HAL_GPIO_Init+0x40>
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f003 0303 	and.w	r3, r3, #3
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d130      	bne.n	8000b6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	2203      	movs	r2, #3
 8000b18:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68da      	ldr	r2, [r3, #12]
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	4313      	orrs	r3, r2
 8000b34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b42:	2201      	movs	r2, #1
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	4013      	ands	r3, r2
 8000b50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	091b      	lsrs	r3, r3, #4
 8000b58:	f003 0201 	and.w	r2, r3, #1
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 0303 	and.w	r3, r3, #3
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	d017      	beq.n	8000baa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	68db      	ldr	r3, [r3, #12]
 8000b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	2203      	movs	r2, #3
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0303 	and.w	r3, r3, #3
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d123      	bne.n	8000bfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	08da      	lsrs	r2, r3, #3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	3208      	adds	r2, #8
 8000bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	220f      	movs	r2, #15
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	691a      	ldr	r2, [r3, #16]
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f003 0307 	and.w	r3, r3, #7
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	08da      	lsrs	r2, r3, #3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3208      	adds	r2, #8
 8000bf8:	6939      	ldr	r1, [r7, #16]
 8000bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0203 	and.w	r2, r3, #3
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f000 80ac 	beq.w	8000d98 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c40:	4b5e      	ldr	r3, [pc, #376]	; (8000dbc <HAL_GPIO_Init+0x2f0>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a5d      	ldr	r2, [pc, #372]	; (8000dbc <HAL_GPIO_Init+0x2f0>)
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b5b      	ldr	r3, [pc, #364]	; (8000dbc <HAL_GPIO_Init+0x2f0>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c58:	4a59      	ldr	r2, [pc, #356]	; (8000dc0 <HAL_GPIO_Init+0x2f4>)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	089b      	lsrs	r3, r3, #2
 8000c5e:	3302      	adds	r3, #2
 8000c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	220f      	movs	r2, #15
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c82:	d025      	beq.n	8000cd0 <HAL_GPIO_Init+0x204>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a4f      	ldr	r2, [pc, #316]	; (8000dc4 <HAL_GPIO_Init+0x2f8>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d01f      	beq.n	8000ccc <HAL_GPIO_Init+0x200>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a4e      	ldr	r2, [pc, #312]	; (8000dc8 <HAL_GPIO_Init+0x2fc>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d019      	beq.n	8000cc8 <HAL_GPIO_Init+0x1fc>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a4d      	ldr	r2, [pc, #308]	; (8000dcc <HAL_GPIO_Init+0x300>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d013      	beq.n	8000cc4 <HAL_GPIO_Init+0x1f8>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a4c      	ldr	r2, [pc, #304]	; (8000dd0 <HAL_GPIO_Init+0x304>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d00d      	beq.n	8000cc0 <HAL_GPIO_Init+0x1f4>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a4b      	ldr	r2, [pc, #300]	; (8000dd4 <HAL_GPIO_Init+0x308>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d007      	beq.n	8000cbc <HAL_GPIO_Init+0x1f0>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a4a      	ldr	r2, [pc, #296]	; (8000dd8 <HAL_GPIO_Init+0x30c>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d101      	bne.n	8000cb8 <HAL_GPIO_Init+0x1ec>
 8000cb4:	2306      	movs	r3, #6
 8000cb6:	e00c      	b.n	8000cd2 <HAL_GPIO_Init+0x206>
 8000cb8:	2307      	movs	r3, #7
 8000cba:	e00a      	b.n	8000cd2 <HAL_GPIO_Init+0x206>
 8000cbc:	2305      	movs	r3, #5
 8000cbe:	e008      	b.n	8000cd2 <HAL_GPIO_Init+0x206>
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	e006      	b.n	8000cd2 <HAL_GPIO_Init+0x206>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	e004      	b.n	8000cd2 <HAL_GPIO_Init+0x206>
 8000cc8:	2302      	movs	r3, #2
 8000cca:	e002      	b.n	8000cd2 <HAL_GPIO_Init+0x206>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e000      	b.n	8000cd2 <HAL_GPIO_Init+0x206>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	f002 0203 	and.w	r2, r2, #3
 8000cd8:	0092      	lsls	r2, r2, #2
 8000cda:	4093      	lsls	r3, r2
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ce2:	4937      	ldr	r1, [pc, #220]	; (8000dc0 <HAL_GPIO_Init+0x2f4>)
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	3302      	adds	r3, #2
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cf0:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <HAL_GPIO_Init+0x310>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d14:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <HAL_GPIO_Init+0x310>)
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d1a:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <HAL_GPIO_Init+0x310>)
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d003      	beq.n	8000d3e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d3e:	4a27      	ldr	r2, [pc, #156]	; (8000ddc <HAL_GPIO_Init+0x310>)
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d44:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <HAL_GPIO_Init+0x310>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d68:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <HAL_GPIO_Init+0x310>)
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_GPIO_Init+0x310>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <HAL_GPIO_Init+0x310>)
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	fa22 f303 	lsr.w	r3, r2, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f47f ae97 	bne.w	8000adc <HAL_GPIO_Init+0x10>
  }
}
 8000dae:	bf00      	nop
 8000db0:	bf00      	nop
 8000db2:	371c      	adds	r7, #28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010000 	.word	0x40010000
 8000dc4:	48000400 	.word	0x48000400
 8000dc8:	48000800 	.word	0x48000800
 8000dcc:	48000c00 	.word	0x48000c00
 8000dd0:	48001000 	.word	0x48001000
 8000dd4:	48001400 	.word	0x48001400
 8000dd8:	48001800 	.word	0x48001800
 8000ddc:	40010400 	.word	0x40010400

08000de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	807b      	strh	r3, [r7, #2]
 8000dec:	4613      	mov	r3, r2
 8000dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000df0:	787b      	ldrb	r3, [r7, #1]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000df6:	887a      	ldrh	r2, [r7, #2]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dfc:	e002      	b.n	8000e04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dfe:	887a      	ldrh	r2, [r7, #2]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e0b9      	b.n	8000f96 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d106      	bne.n	8000e3c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff fc80 	bl	800073c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2203      	movs	r2, #3
 8000e40:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 fdd4 	bl	80049f6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	73fb      	strb	r3, [r7, #15]
 8000e52:	e03e      	b.n	8000ed2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e54:	7bfa      	ldrb	r2, [r7, #15]
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	440b      	add	r3, r1
 8000e62:	3311      	adds	r3, #17
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e68:	7bfa      	ldrb	r2, [r7, #15]
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4413      	add	r3, r2
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	440b      	add	r3, r1
 8000e76:	3310      	adds	r3, #16
 8000e78:	7bfa      	ldrb	r2, [r7, #15]
 8000e7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e7c:	7bfa      	ldrb	r2, [r7, #15]
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	4613      	mov	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4413      	add	r3, r2
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	440b      	add	r3, r1
 8000e8a:	3313      	adds	r3, #19
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e90:	7bfa      	ldrb	r2, [r7, #15]
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	4613      	mov	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	440b      	add	r3, r1
 8000e9e:	3320      	adds	r3, #32
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ea4:	7bfa      	ldrb	r2, [r7, #15]
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3324      	adds	r3, #36	; 0x24
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	1c5a      	adds	r2, r3, #1
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	73fb      	strb	r3, [r7, #15]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	791b      	ldrb	r3, [r3, #4]
 8000ed6:	7bfa      	ldrb	r2, [r7, #15]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d3bb      	bcc.n	8000e54 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e044      	b.n	8000f6c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	4413      	add	r3, r2
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	440b      	add	r3, r1
 8000ef0:	f203 1351 	addw	r3, r3, #337	; 0x151
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ef8:	7bfa      	ldrb	r2, [r7, #15]
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f0e:	7bfa      	ldrb	r2, [r7, #15]
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	4613      	mov	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	4413      	add	r3, r2
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	440b      	add	r3, r1
 8000f32:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	440b      	add	r3, r1
 8000f48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	4613      	mov	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	440b      	add	r3, r1
 8000f5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	73fb      	strb	r3, [r7, #15]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	791b      	ldrb	r3, [r3, #4]
 8000f70:	7bfa      	ldrb	r2, [r7, #15]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d3b5      	bcc.n	8000ee2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000f82:	f003 fd53 	bl	8004a2c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b084      	sub	sp, #16
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f005 f922 	bl	80061f4 <USB_ReadInterrupts>
 8000fb0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 f930 	bl	8001222 <PCD_EP_ISR_Handler>

    return;
 8000fc2:	e0bd      	b.n	8001140 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d013      	beq.n	8000ff6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fe0:	b292      	uxth	r2, r2
 8000fe2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f8d9 	bl	800119e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000fec:	2100      	movs	r1, #0
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f8f3 	bl	80011da <HAL_PCD_SetAddress>

    return;
 8000ff4:	e0a4      	b.n	8001140 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00c      	beq.n	800101a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001008:	b29a      	uxth	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001012:	b292      	uxth	r2, r2
 8001014:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001018:	e092      	b.n	8001140 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00c      	beq.n	800103e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800102c:	b29a      	uxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001036:	b292      	uxth	r2, r2
 8001038:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800103c:	e080      	b.n	8001140 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d027      	beq.n	8001098 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001050:	b29a      	uxth	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 0204 	bic.w	r2, r2, #4
 800105a:	b292      	uxth	r2, r2
 800105c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0208 	bic.w	r2, r2, #8
 8001072:	b292      	uxth	r2, r2
 8001074:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f8a4 	bl	80011c6 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001086:	b29a      	uxth	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001090:	b292      	uxth	r2, r2
 8001092:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001096:	e053      	b.n	8001140 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d027      	beq.n	80010f2 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f042 0208 	orr.w	r2, r2, #8
 80010b4:	b292      	uxth	r2, r2
 80010b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010cc:	b292      	uxth	r2, r2
 80010ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010da:	b29a      	uxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f042 0204 	orr.w	r2, r2, #4
 80010e4:	b292      	uxth	r2, r2
 80010e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f861 	bl	80011b2 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80010f0:	e026      	b.n	8001140 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00f      	beq.n	800111c <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001104:	b29a      	uxth	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800110e:	b292      	uxth	r2, r2
 8001110:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f838 	bl	800118a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800111a:	e011      	b.n	8001140 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001122:	2b00      	cmp	r3, #0
 8001124:	d00c      	beq.n	8001140 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800112e:	b29a      	uxth	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001138:	b292      	uxth	r2, r2
 800113a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800113e:	bf00      	nop
  }
}
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	460b      	mov	r3, r1
 8001150:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	460b      	mov	r3, r1
 80011e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <HAL_PCD_SetAddress+0x1a>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e012      	b.n	800121a <HAL_PCD_SetAddress+0x40>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	78fa      	ldrb	r2, [r7, #3]
 8001200:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	78fa      	ldrb	r2, [r7, #3]
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f004 ffde 	bl	80061cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b096      	sub	sp, #88	; 0x58
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800122a:	e3ae      	b.n	800198a <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001234:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001238:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800123c:	b2db      	uxtb	r3, r3
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (epindex == 0U)
 8001246:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800124a:	2b00      	cmp	r3, #0
 800124c:	f040 8170 	bne.w	8001530 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001250:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	2b00      	cmp	r3, #0
 800125a:	d14d      	bne.n	80012f8 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800126c:	81fb      	strh	r3, [r7, #14]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	89fb      	ldrh	r3, [r7, #14]
 8001274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800127c:	b29b      	uxth	r3, r3
 800127e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3310      	adds	r3, #16
 8001284:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800128e:	b29b      	uxth	r3, r3
 8001290:	461a      	mov	r2, r3
 8001292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4413      	add	r3, r2
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80012aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80012ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b0:	695a      	ldr	r2, [r3, #20]
 80012b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	441a      	add	r2, r3
 80012b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80012bc:	2100      	movs	r1, #0
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ff4d 	bl	800115e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7b1b      	ldrb	r3, [r3, #12]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 835d 	beq.w	800198a <PCD_EP_ISR_Handler+0x768>
 80012d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f040 8358 	bne.w	800198a <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7b1b      	ldrb	r3, [r3, #12]
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	b292      	uxth	r2, r2
 80012ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	731a      	strb	r2, [r3, #12]
 80012f6:	e348      	b.n	800198a <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80012fe:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800130a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800130e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001312:	2b00      	cmp	r3, #0
 8001314:	d032      	beq.n	800137c <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800131e:	b29b      	uxth	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4413      	add	r3, r2
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	4413      	add	r3, r2
 8001330:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800133a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800133c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8001348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800134a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800134c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800134e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001350:	b29b      	uxth	r3, r3
 8001352:	f004 ffa1 	bl	8006298 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	b29a      	uxth	r2, r3
 800135e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001362:	4013      	ands	r3, r2
 8001364:	823b      	strh	r3, [r7, #16]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	8a3a      	ldrh	r2, [r7, #16]
 800136c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001370:	b292      	uxth	r2, r2
 8001372:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fefe 	bl	8001176 <HAL_PCD_SetupStageCallback>
 800137a:	e306      	b.n	800198a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800137c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001380:	2b00      	cmp	r3, #0
 8001382:	f280 8302 	bge.w	800198a <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	b29a      	uxth	r2, r3
 800138e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001392:	4013      	ands	r3, r2
 8001394:	83fb      	strh	r3, [r7, #30]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	8bfa      	ldrh	r2, [r7, #30]
 800139c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013a0:	b292      	uxth	r2, r2
 80013a2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	461a      	mov	r2, r3
 80013b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4413      	add	r3, r2
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6812      	ldr	r2, [r2, #0]
 80013bc:	4413      	add	r3, r2
 80013be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80013c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ca:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80013cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d019      	beq.n	8001408 <PCD_EP_ISR_Handler+0x1e6>
 80013d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d015      	beq.n	8001408 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e2:	6959      	ldr	r1, [r3, #20]
 80013e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80013e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ea:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	f004 ff53 	bl	8006298 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80013f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	441a      	add	r2, r3
 80013fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013fe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001400:	2100      	movs	r1, #0
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fe9f 	bl	8001146 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001412:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800141a:	2b00      	cmp	r3, #0
 800141c:	f040 82b5 	bne.w	800198a <PCD_EP_ISR_Handler+0x768>
 8001420:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001424:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001428:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800142c:	f000 82ad 	beq.w	800198a <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800143e:	b29b      	uxth	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4413      	add	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800145a:	b29a      	uxth	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	801a      	strh	r2, [r3, #0]
 8001460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10a      	bne.n	800147e <PCD_EP_ISR_Handler+0x25c>
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	b29b      	uxth	r3, r3
 800146e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001476:	b29a      	uxth	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	801a      	strh	r2, [r3, #0]
 800147c:	e039      	b.n	80014f2 <PCD_EP_ISR_Handler+0x2d0>
 800147e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	2b3e      	cmp	r3, #62	; 0x3e
 8001484:	d818      	bhi.n	80014b8 <PCD_EP_ISR_Handler+0x296>
 8001486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	085b      	lsrs	r3, r3, #1
 800148c:	647b      	str	r3, [r7, #68]	; 0x44
 800148e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <PCD_EP_ISR_Handler+0x27e>
 800149a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800149c:	3301      	adds	r3, #1
 800149e:	647b      	str	r3, [r7, #68]	; 0x44
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	029b      	lsls	r3, r3, #10
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	801a      	strh	r2, [r3, #0]
 80014b6:	e01c      	b.n	80014f2 <PCD_EP_ISR_Handler+0x2d0>
 80014b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	095b      	lsrs	r3, r3, #5
 80014be:	647b      	str	r3, [r7, #68]	; 0x44
 80014c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	f003 031f 	and.w	r3, r3, #31
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <PCD_EP_ISR_Handler+0x2b0>
 80014cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014ce:	3b01      	subs	r3, #1
 80014d0:	647b      	str	r3, [r7, #68]	; 0x44
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014da:	b29b      	uxth	r3, r3
 80014dc:	029b      	lsls	r3, r3, #10
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80014e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001502:	827b      	strh	r3, [r7, #18]
 8001504:	8a7b      	ldrh	r3, [r7, #18]
 8001506:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800150a:	827b      	strh	r3, [r7, #18]
 800150c:	8a7b      	ldrh	r3, [r7, #18]
 800150e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001512:	827b      	strh	r3, [r7, #18]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	8a7b      	ldrh	r3, [r7, #18]
 800151a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800151e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800152a:	b29b      	uxth	r3, r3
 800152c:	8013      	strh	r3, [r2, #0]
 800152e:	e22c      	b.n	800198a <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001544:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001548:	2b00      	cmp	r3, #0
 800154a:	f280 80f6 	bge.w	800173a <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	881b      	ldrh	r3, [r3, #0]
 800155e:	b29a      	uxth	r2, r3
 8001560:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001564:	4013      	ands	r3, r2
 8001566:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800157c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001580:	b292      	uxth	r2, r2
 8001582:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001584:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	4413      	add	r3, r2
 8001598:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800159a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800159c:	7b1b      	ldrb	r3, [r3, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d123      	bne.n	80015ea <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4413      	add	r3, r2
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015c6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80015ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 808e 	beq.w	80016f0 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015da:	6959      	ldr	r1, [r3, #20]
 80015dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015de:	88da      	ldrh	r2, [r3, #6]
 80015e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80015e4:	f004 fe58 	bl	8006298 <USB_ReadPMA>
 80015e8:	e082      	b.n	80016f0 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80015ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ec:	78db      	ldrb	r3, [r3, #3]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d10a      	bne.n	8001608 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80015f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80015f6:	461a      	mov	r2, r3
 80015f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f9d3 	bl	80019a6 <HAL_PCD_EP_DB_Receive>
 8001600:	4603      	mov	r3, r0
 8001602:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001606:	e073      	b.n	80016f0 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	b29b      	uxth	r3, r3
 800161a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800161e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001622:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	441a      	add	r2, r3
 8001634:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800163c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001640:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001644:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001648:	b29b      	uxth	r3, r3
 800164a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	881b      	ldrh	r3, [r3, #0]
 800165c:	b29b      	uxth	r3, r3
 800165e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d022      	beq.n	80016ac <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800166e:	b29b      	uxth	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4413      	add	r3, r2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	4413      	add	r3, r2
 8001680:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800168a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800168e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001692:	2b00      	cmp	r3, #0
 8001694:	d02c      	beq.n	80016f0 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6818      	ldr	r0, [r3, #0]
 800169a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800169c:	6959      	ldr	r1, [r3, #20]
 800169e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a0:	891a      	ldrh	r2, [r3, #8]
 80016a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80016a6:	f004 fdf7 	bl	8006298 <USB_ReadPMA>
 80016aa:	e021      	b.n	80016f0 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	461a      	mov	r2, r3
 80016b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4413      	add	r3, r2
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	4413      	add	r3, r2
 80016c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016d0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80016d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d009      	beq.n	80016f0 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016e2:	6959      	ldr	r1, [r3, #20]
 80016e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016e6:	895a      	ldrh	r2, [r3, #10]
 80016e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80016ec:	f004 fdd4 	bl	8006298 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80016f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016f2:	69da      	ldr	r2, [r3, #28]
 80016f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80016f8:	441a      	add	r2, r3
 80016fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016fc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80016fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001700:	695a      	ldr	r2, [r3, #20]
 8001702:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001706:	441a      	add	r2, r3
 8001708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800170a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800170c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <PCD_EP_ISR_Handler+0x4fe>
 8001714:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	429a      	cmp	r2, r3
 800171e:	d206      	bcs.n	800172e <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fd0d 	bl	8001146 <HAL_PCD_DataOutStageCallback>
 800172c:	e005      	b.n	800173a <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001734:	4618      	mov	r0, r3
 8001736:	f003 f997 	bl	8004a68 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800173a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800173e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 8121 	beq.w	800198a <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8001748:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	3310      	adds	r3, #16
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	b29b      	uxth	r3, r3
 800176e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001776:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	441a      	add	r2, r3
 8001788:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800178c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001794:	b29b      	uxth	r3, r3
 8001796:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800179a:	78db      	ldrb	r3, [r3, #3]
 800179c:	2b01      	cmp	r3, #1
 800179e:	f040 80a2 	bne.w	80018e6 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 80017a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80017a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017aa:	7b1b      	ldrb	r3, [r3, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 8093 	beq.w	80018d8 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80017b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80017b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d046      	beq.n	800184c <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80017be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c0:	785b      	ldrb	r3, [r3, #1]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d126      	bne.n	8001814 <PCD_EP_ISR_Handler+0x5f2>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	4413      	add	r3, r2
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
 80017de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	00da      	lsls	r2, r3, #3
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	4413      	add	r3, r2
 80017e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80017ec:	623b      	str	r3, [r7, #32]
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	801a      	strh	r2, [r3, #0]
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	b29b      	uxth	r3, r3
 8001804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800180c:	b29a      	uxth	r2, r3
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	801a      	strh	r2, [r3, #0]
 8001812:	e061      	b.n	80018d8 <PCD_EP_ISR_Handler+0x6b6>
 8001814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001816:	785b      	ldrb	r3, [r3, #1]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d15d      	bne.n	80018d8 <PCD_EP_ISR_Handler+0x6b6>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800182a:	b29b      	uxth	r3, r3
 800182c:	461a      	mov	r2, r3
 800182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001830:	4413      	add	r3, r2
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	00da      	lsls	r2, r3, #3
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	4413      	add	r3, r2
 800183e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001842:	62bb      	str	r3, [r7, #40]	; 0x28
 8001844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001846:	2200      	movs	r2, #0
 8001848:	801a      	strh	r2, [r3, #0]
 800184a:	e045      	b.n	80018d8 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001854:	785b      	ldrb	r3, [r3, #1]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d126      	bne.n	80018a8 <PCD_EP_ISR_Handler+0x686>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	637b      	str	r3, [r7, #52]	; 0x34
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001868:	b29b      	uxth	r3, r3
 800186a:	461a      	mov	r2, r3
 800186c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800186e:	4413      	add	r3, r2
 8001870:	637b      	str	r3, [r7, #52]	; 0x34
 8001872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	00da      	lsls	r2, r3, #3
 8001878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187a:	4413      	add	r3, r2
 800187c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001880:	633b      	str	r3, [r7, #48]	; 0x30
 8001882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	b29b      	uxth	r3, r3
 8001888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800188c:	b29a      	uxth	r2, r3
 800188e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001890:	801a      	strh	r2, [r3, #0]
 8001892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	b29b      	uxth	r3, r3
 8001898:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800189c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a4:	801a      	strh	r2, [r3, #0]
 80018a6:	e017      	b.n	80018d8 <PCD_EP_ISR_Handler+0x6b6>
 80018a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018aa:	785b      	ldrb	r3, [r3, #1]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d113      	bne.n	80018d8 <PCD_EP_ISR_Handler+0x6b6>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018be:	4413      	add	r3, r2
 80018c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	00da      	lsls	r2, r3, #3
 80018c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ca:	4413      	add	r3, r2
 80018cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80018d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80018d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d4:	2200      	movs	r2, #0
 80018d6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80018d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fc3d 	bl	800115e <HAL_PCD_DataInStageCallback>
 80018e4:	e051      	b.n	800198a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80018e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d144      	bne.n	800197c <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4413      	add	r3, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	4413      	add	r3, r2
 800190c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001916:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800191a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800191c:	699a      	ldr	r2, [r3, #24]
 800191e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001922:	429a      	cmp	r2, r3
 8001924:	d907      	bls.n	8001936 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8001926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001928:	699a      	ldr	r2, [r3, #24]
 800192a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800192e:	1ad2      	subs	r2, r2, r3
 8001930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001932:	619a      	str	r2, [r3, #24]
 8001934:	e002      	b.n	800193c <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800193c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d106      	bne.n	8001952 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff fc07 	bl	800115e <HAL_PCD_DataInStageCallback>
 8001950:	e01b      	b.n	800198a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800195a:	441a      	add	r2, r3
 800195c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001962:	69da      	ldr	r2, [r3, #28]
 8001964:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001968:	441a      	add	r2, r3
 800196a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800196c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001974:	4618      	mov	r0, r3
 8001976:	f003 f877 	bl	8004a68 <USB_EPStartXfer>
 800197a:	e006      	b.n	800198a <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800197c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001980:	461a      	mov	r2, r3
 8001982:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 f917 	bl	8001bb8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001992:	b29b      	uxth	r3, r3
 8001994:	b21b      	sxth	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	f6ff ac48 	blt.w	800122c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3758      	adds	r7, #88	; 0x58
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b088      	sub	sp, #32
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	4613      	mov	r3, r2
 80019b2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d07c      	beq.n	8001ab8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4413      	add	r3, r2
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019e2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	699a      	ldr	r2, [r3, #24]
 80019e8:	8b7b      	ldrh	r3, [r7, #26]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d306      	bcc.n	80019fc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	8b7b      	ldrh	r3, [r7, #26]
 80019f4:	1ad2      	subs	r2, r2, r3
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	619a      	str	r2, [r3, #24]
 80019fa:	e002      	b.n	8001a02 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d123      	bne.n	8001a52 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a24:	833b      	strh	r3, [r7, #24]
 8001a26:	8b3b      	ldrh	r3, [r7, #24]
 8001a28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001a2c:	833b      	strh	r3, [r7, #24]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	441a      	add	r2, r3
 8001a3c:	8b3b      	ldrh	r3, [r7, #24]
 8001a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d01f      	beq.n	8001a9c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a76:	82fb      	strh	r3, [r7, #22]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	441a      	add	r2, r3
 8001a86:	8afb      	ldrh	r3, [r7, #22]
 8001a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001a9c:	8b7b      	ldrh	r3, [r7, #26]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 8085 	beq.w	8001bae <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6818      	ldr	r0, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	6959      	ldr	r1, [r3, #20]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	891a      	ldrh	r2, [r3, #8]
 8001ab0:	8b7b      	ldrh	r3, [r7, #26]
 8001ab2:	f004 fbf1 	bl	8006298 <USB_ReadPMA>
 8001ab6:	e07a      	b.n	8001bae <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	4413      	add	r3, r2
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001adc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	699a      	ldr	r2, [r3, #24]
 8001ae2:	8b7b      	ldrh	r3, [r7, #26]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d306      	bcc.n	8001af6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	699a      	ldr	r2, [r3, #24]
 8001aec:	8b7b      	ldrh	r3, [r7, #26]
 8001aee:	1ad2      	subs	r2, r2, r3
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	619a      	str	r2, [r3, #24]
 8001af4:	e002      	b.n	8001afc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d123      	bne.n	8001b4c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b1e:	83fb      	strh	r3, [r7, #30]
 8001b20:	8bfb      	ldrh	r3, [r7, #30]
 8001b22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b26:	83fb      	strh	r3, [r7, #30]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	441a      	add	r2, r3
 8001b36:	8bfb      	ldrh	r3, [r7, #30]
 8001b38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d11f      	bne.n	8001b96 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b70:	83bb      	strh	r3, [r7, #28]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	441a      	add	r2, r3
 8001b80:	8bbb      	ldrh	r3, [r7, #28]
 8001b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b96:	8b7b      	ldrh	r3, [r7, #26]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	6959      	ldr	r1, [r3, #20]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	895a      	ldrh	r2, [r3, #10]
 8001ba8:	8b7b      	ldrh	r3, [r7, #26]
 8001baa:	f004 fb75 	bl	8006298 <USB_ReadPMA>
    }
  }

  return count;
 8001bae:	8b7b      	ldrh	r3, [r7, #26]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b0a4      	sub	sp, #144	; 0x90
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 81db 	beq.w	8001f88 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bf6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len > TxPctSize)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	699a      	ldr	r2, [r3, #24]
 8001bfe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d907      	bls.n	8001c16 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	699a      	ldr	r2, [r3, #24]
 8001c0a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001c0e:	1ad2      	subs	r2, r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	619a      	str	r2, [r3, #24]
 8001c14:	e002      	b.n	8001c1c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 80b9 	bne.w	8001d98 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	785b      	ldrb	r3, [r3, #1]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d126      	bne.n	8001c7c <HAL_PCD_EP_DB_Transmit+0xc4>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c42:	4413      	add	r3, r2
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	00da      	lsls	r2, r3, #3
 8001c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4e:	4413      	add	r3, r2
 8001c50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c64:	801a      	strh	r2, [r3, #0]
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c78:	801a      	strh	r2, [r3, #0]
 8001c7a:	e01a      	b.n	8001cb2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	785b      	ldrb	r3, [r3, #1]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d116      	bne.n	8001cb2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	637b      	str	r3, [r7, #52]	; 0x34
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c98:	4413      	add	r3, r2
 8001c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	00da      	lsls	r2, r3, #3
 8001ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30
 8001cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cae:	2200      	movs	r2, #0
 8001cb0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	785b      	ldrb	r3, [r3, #1]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d126      	bne.n	8001d0e <HAL_PCD_EP_DB_Transmit+0x156>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	00da      	lsls	r2, r3, #3
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	801a      	strh	r2, [r3, #0]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	801a      	strh	r2, [r3, #0]
 8001d0c:	e017      	b.n	8001d3e <HAL_PCD_EP_DB_Transmit+0x186>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	785b      	ldrb	r3, [r3, #1]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d113      	bne.n	8001d3e <HAL_PCD_EP_DB_Transmit+0x186>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	4413      	add	r3, r2
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	00da      	lsls	r2, r3, #3
 8001d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d30:	4413      	add	r3, r2
 8001d32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d36:	623b      	str	r3, [r7, #32]
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	4619      	mov	r1, r3
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f7ff fa0a 	bl	800115e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 82fa 	beq.w	800234a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d70:	82fb      	strh	r3, [r7, #22]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	441a      	add	r2, r3
 8001d80:	8afb      	ldrh	r3, [r7, #22]
 8001d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	8013      	strh	r3, [r2, #0]
 8001d96:	e2d8      	b.n	800234a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d021      	beq.n	8001de6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dbc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	441a      	add	r2, r3
 8001dce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	f040 82ac 	bne.w	800234a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001dfa:	441a      	add	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	69da      	ldr	r2, [r3, #28]
 8001e04:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001e08:	441a      	add	r2, r3
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	6a1a      	ldr	r2, [r3, #32]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d30b      	bcc.n	8001e32 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	6a1a      	ldr	r2, [r3, #32]
 8001e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e2a:	1ad2      	subs	r2, r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	621a      	str	r2, [r3, #32]
 8001e30:	e017      	b.n	8001e62 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d108      	bne.n	8001e4c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8001e3a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001e3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e4a:	e00a      	b.n	8001e62 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	785b      	ldrb	r3, [r3, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d165      	bne.n	8001f36 <HAL_PCD_EP_DB_Transmit+0x37e>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e7e:	4413      	add	r3, r2
 8001e80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	00da      	lsls	r2, r3, #3
 8001e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e90:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea0:	801a      	strh	r2, [r3, #0]
 8001ea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10a      	bne.n	8001ec0 <HAL_PCD_EP_DB_Transmit+0x308>
 8001eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ebc:	801a      	strh	r2, [r3, #0]
 8001ebe:	e057      	b.n	8001f70 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ec4:	2b3e      	cmp	r3, #62	; 0x3e
 8001ec6:	d818      	bhi.n	8001efa <HAL_PCD_EP_DB_Transmit+0x342>
 8001ec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_PCD_EP_DB_Transmit+0x32a>
 8001edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ede:	3301      	adds	r3, #1
 8001ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	029b      	lsls	r3, r3, #10
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef6:	801a      	strh	r2, [r3, #0]
 8001ef8:	e03a      	b.n	8001f70 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001efe:	095b      	lsrs	r3, r3, #5
 8001f00:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <HAL_PCD_EP_DB_Transmit+0x35c>
 8001f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f10:	3b01      	subs	r3, #1
 8001f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	029b      	lsls	r3, r3, #10
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4313      	orrs	r3, r2
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f32:	801a      	strh	r2, [r3, #0]
 8001f34:	e01c      	b.n	8001f70 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	785b      	ldrb	r3, [r3, #1]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d118      	bne.n	8001f70 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	647b      	str	r3, [r7, #68]	; 0x44
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f52:	4413      	add	r3, r2
 8001f54:	647b      	str	r3, [r7, #68]	; 0x44
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	00da      	lsls	r2, r3, #3
 8001f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f5e:	4413      	add	r3, r2
 8001f60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f64:	643b      	str	r3, [r7, #64]	; 0x40
 8001f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f6e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	6959      	ldr	r1, [r3, #20]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	891a      	ldrh	r2, [r3, #8]
 8001f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	f004 f947 	bl	8006214 <USB_WritePMA>
 8001f86:	e1e0      	b.n	800234a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fac:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len >= TxPctSize)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	699a      	ldr	r2, [r3, #24]
 8001fb4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d307      	bcc.n	8001fcc <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	699a      	ldr	r2, [r3, #24]
 8001fc0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001fc4:	1ad2      	subs	r2, r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	619a      	str	r2, [r3, #24]
 8001fca:	e002      	b.n	8001fd2 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 80c0 	bne.w	800215c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	785b      	ldrb	r3, [r3, #1]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d126      	bne.n	8002032 <HAL_PCD_EP_DB_Transmit+0x47a>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ff8:	4413      	add	r3, r2
 8001ffa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	00da      	lsls	r2, r3, #3
 8002002:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002004:	4413      	add	r3, r2
 8002006:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800200a:	67bb      	str	r3, [r7, #120]	; 0x78
 800200c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	b29b      	uxth	r3, r3
 8002012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002016:	b29a      	uxth	r2, r3
 8002018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800201a:	801a      	strh	r2, [r3, #0]
 800201c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	b29b      	uxth	r3, r3
 8002022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800202a:	b29a      	uxth	r2, r3
 800202c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800202e:	801a      	strh	r2, [r3, #0]
 8002030:	e01a      	b.n	8002068 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	785b      	ldrb	r3, [r3, #1]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d116      	bne.n	8002068 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	667b      	str	r3, [r7, #100]	; 0x64
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002048:	b29b      	uxth	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800204e:	4413      	add	r3, r2
 8002050:	667b      	str	r3, [r7, #100]	; 0x64
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	00da      	lsls	r2, r3, #3
 8002058:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800205a:	4413      	add	r3, r2
 800205c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002060:	663b      	str	r3, [r7, #96]	; 0x60
 8002062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002064:	2200      	movs	r2, #0
 8002066:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	677b      	str	r3, [r7, #116]	; 0x74
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	785b      	ldrb	r3, [r3, #1]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d12b      	bne.n	80020ce <HAL_PCD_EP_DB_Transmit+0x516>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002084:	b29b      	uxth	r3, r3
 8002086:	461a      	mov	r2, r3
 8002088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800208a:	4413      	add	r3, r2
 800208c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	00da      	lsls	r2, r3, #3
 8002094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002096:	4413      	add	r3, r2
 8002098:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800209c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80020a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020b2:	801a      	strh	r2, [r3, #0]
 80020b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020ca:	801a      	strh	r2, [r3, #0]
 80020cc:	e017      	b.n	80020fe <HAL_PCD_EP_DB_Transmit+0x546>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	785b      	ldrb	r3, [r3, #1]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d113      	bne.n	80020fe <HAL_PCD_EP_DB_Transmit+0x546>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020de:	b29b      	uxth	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020e4:	4413      	add	r3, r2
 80020e6:	677b      	str	r3, [r7, #116]	; 0x74
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	00da      	lsls	r2, r3, #3
 80020ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020f0:	4413      	add	r3, r2
 80020f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020f6:	673b      	str	r3, [r7, #112]	; 0x70
 80020f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020fa:	2200      	movs	r2, #0
 80020fc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	4619      	mov	r1, r3
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7ff f82a 	bl	800115e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f040 811a 	bne.w	800234a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	461a      	mov	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800212c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002130:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	441a      	add	r2, r3
 8002142:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800214a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800214e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002156:	b29b      	uxth	r3, r3
 8002158:	8013      	strh	r3, [r2, #0]
 800215a:	e0f6      	b.n	800234a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d121      	bne.n	80021aa <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	b29b      	uxth	r3, r3
 8002178:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800217c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002180:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	441a      	add	r2, r3
 8002192:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800219a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800219e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	f040 80ca 	bne.w	800234a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80021be:	441a      	add	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80021cc:	441a      	add	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	6a1a      	ldr	r2, [r3, #32]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d30b      	bcc.n	80021f6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	6a1a      	ldr	r2, [r3, #32]
 80021ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021ee:	1ad2      	subs	r2, r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	621a      	str	r2, [r3, #32]
 80021f4:	e017      	b.n	8002226 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d108      	bne.n	8002210 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80021fe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800220e:	e00a      	b.n	8002226 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2200      	movs	r2, #0
 800221c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	657b      	str	r3, [r7, #84]	; 0x54
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	785b      	ldrb	r3, [r3, #1]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d165      	bne.n	8002300 <HAL_PCD_EP_DB_Transmit+0x748>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	65fb      	str	r3, [r7, #92]	; 0x5c
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002242:	b29b      	uxth	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002248:	4413      	add	r3, r2
 800224a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	00da      	lsls	r2, r3, #3
 8002252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002254:	4413      	add	r3, r2
 8002256:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800225a:	65bb      	str	r3, [r7, #88]	; 0x58
 800225c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b29b      	uxth	r3, r3
 8002262:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002266:	b29a      	uxth	r2, r3
 8002268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800226a:	801a      	strh	r2, [r3, #0]
 800226c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10a      	bne.n	800228a <HAL_PCD_EP_DB_Transmit+0x6d2>
 8002274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800227e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002282:	b29a      	uxth	r2, r3
 8002284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002286:	801a      	strh	r2, [r3, #0]
 8002288:	e054      	b.n	8002334 <HAL_PCD_EP_DB_Transmit+0x77c>
 800228a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800228e:	2b3e      	cmp	r3, #62	; 0x3e
 8002290:	d818      	bhi.n	80022c4 <HAL_PCD_EP_DB_Transmit+0x70c>
 8002292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002296:	085b      	lsrs	r3, r3, #1
 8002298:	66bb      	str	r3, [r7, #104]	; 0x68
 800229a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <HAL_PCD_EP_DB_Transmit+0x6f4>
 80022a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022a8:	3301      	adds	r3, #1
 80022aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80022ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	029b      	lsls	r3, r3, #10
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	4313      	orrs	r3, r2
 80022bc:	b29a      	uxth	r2, r3
 80022be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022c0:	801a      	strh	r2, [r3, #0]
 80022c2:	e037      	b.n	8002334 <HAL_PCD_EP_DB_Transmit+0x77c>
 80022c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80022cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d0:	f003 031f 	and.w	r3, r3, #31
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d102      	bne.n	80022de <HAL_PCD_EP_DB_Transmit+0x726>
 80022d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022da:	3b01      	subs	r3, #1
 80022dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80022de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	029b      	lsls	r3, r3, #10
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	4313      	orrs	r3, r2
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022fc:	801a      	strh	r2, [r3, #0]
 80022fe:	e019      	b.n	8002334 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	785b      	ldrb	r3, [r3, #1]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d115      	bne.n	8002334 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002310:	b29b      	uxth	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002316:	4413      	add	r3, r2
 8002318:	657b      	str	r3, [r7, #84]	; 0x54
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	00da      	lsls	r2, r3, #3
 8002320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002322:	4413      	add	r3, r2
 8002324:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002328:	653b      	str	r3, [r7, #80]	; 0x50
 800232a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800232e:	b29a      	uxth	r2, r3
 8002330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002332:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	6959      	ldr	r1, [r3, #20]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	895a      	ldrh	r2, [r3, #10]
 8002340:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002344:	b29b      	uxth	r3, r3
 8002346:	f003 ff65 	bl	8006214 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29b      	uxth	r3, r3
 800235c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002364:	82bb      	strh	r3, [r7, #20]
 8002366:	8abb      	ldrh	r3, [r7, #20]
 8002368:	f083 0310 	eor.w	r3, r3, #16
 800236c:	82bb      	strh	r3, [r7, #20]
 800236e:	8abb      	ldrh	r3, [r7, #20]
 8002370:	f083 0320 	eor.w	r3, r3, #32
 8002374:	82bb      	strh	r3, [r7, #20]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	441a      	add	r2, r3
 8002384:	8abb      	ldrh	r3, [r7, #20]
 8002386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800238a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800238e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002396:	b29b      	uxth	r3, r3
 8002398:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3790      	adds	r7, #144	; 0x90
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023b4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	f001 b83a 	b.w	800343e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 816f 	beq.w	80026be <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80023e0:	4bb5      	ldr	r3, [pc, #724]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d00c      	beq.n	8002406 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023ec:	4bb2      	ldr	r3, [pc, #712]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d15c      	bne.n	80024b2 <HAL_RCC_OscConfig+0x10e>
 80023f8:	4baf      	ldr	r3, [pc, #700]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002404:	d155      	bne.n	80024b2 <HAL_RCC_OscConfig+0x10e>
 8002406:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800240a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 800241a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d102      	bne.n	8002438 <HAL_RCC_OscConfig+0x94>
 8002432:	4ba1      	ldr	r3, [pc, #644]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	e015      	b.n	8002464 <HAL_RCC_OscConfig+0xc0>
 8002438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800243c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800244c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002450:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002454:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002458:	fa93 f3a3 	rbit	r3, r3
 800245c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002460:	4b95      	ldr	r3, [pc, #596]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002468:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800246c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002470:	fa92 f2a2 	rbit	r2, r2
 8002474:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002478:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800247c:	fab2 f282 	clz	r2, r2
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	f042 0220 	orr.w	r2, r2, #32
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	f002 021f 	and.w	r2, r2, #31
 800248c:	2101      	movs	r1, #1
 800248e:	fa01 f202 	lsl.w	r2, r1, r2
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 8111 	beq.w	80026bc <HAL_RCC_OscConfig+0x318>
 800249a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800249e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 8108 	bne.w	80026bc <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f000 bfc6 	b.w	800343e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c2:	d106      	bne.n	80024d2 <HAL_RCC_OscConfig+0x12e>
 80024c4:	4b7c      	ldr	r3, [pc, #496]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a7b      	ldr	r2, [pc, #492]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 80024ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ce:	6013      	str	r3, [r2, #0]
 80024d0:	e036      	b.n	8002540 <HAL_RCC_OscConfig+0x19c>
 80024d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x158>
 80024e2:	4b75      	ldr	r3, [pc, #468]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a74      	ldr	r2, [pc, #464]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 80024e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b72      	ldr	r3, [pc, #456]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a71      	ldr	r2, [pc, #452]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 80024f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e021      	b.n	8002540 <HAL_RCC_OscConfig+0x19c>
 80024fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002500:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x184>
 800250e:	4b6a      	ldr	r3, [pc, #424]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a69      	ldr	r2, [pc, #420]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 8002514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b67      	ldr	r3, [pc, #412]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a66      	ldr	r2, [pc, #408]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0x19c>
 8002528:	4b63      	ldr	r3, [pc, #396]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a62      	ldr	r2, [pc, #392]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 800252e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b60      	ldr	r3, [pc, #384]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a5f      	ldr	r2, [pc, #380]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 800253a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002544:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d059      	beq.n	8002604 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe f99e 	bl	8000890 <HAL_GetTick>
 8002554:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255a:	f7fe f999 	bl	8000890 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d902      	bls.n	8002570 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	f000 bf67 	b.w	800343e <HAL_RCC_OscConfig+0x109a>
 8002570:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002574:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002584:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002588:	fab3 f383 	clz	r3, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d102      	bne.n	80025a2 <HAL_RCC_OscConfig+0x1fe>
 800259c:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	e015      	b.n	80025ce <HAL_RCC_OscConfig+0x22a>
 80025a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80025ae:	fa93 f3a3 	rbit	r3, r3
 80025b2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80025b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ba:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80025be:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80025ca:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025d2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80025d6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80025da:	fa92 f2a2 	rbit	r2, r2
 80025de:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80025e2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80025e6:	fab2 f282 	clz	r2, r2
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	f042 0220 	orr.w	r2, r2, #32
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	f002 021f 	and.w	r2, r2, #31
 80025f6:	2101      	movs	r1, #1
 80025f8:	fa01 f202 	lsl.w	r2, r1, r2
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0ab      	beq.n	800255a <HAL_RCC_OscConfig+0x1b6>
 8002602:	e05c      	b.n	80026be <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002604:	f7fe f944 	bl	8000890 <HAL_GetTick>
 8002608:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260c:	e00a      	b.n	8002624 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260e:	f7fe f93f 	bl	8000890 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b64      	cmp	r3, #100	; 0x64
 800261c:	d902      	bls.n	8002624 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	f000 bf0d 	b.w	800343e <HAL_RCC_OscConfig+0x109a>
 8002624:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002628:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002638:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	d102      	bne.n	8002656 <HAL_RCC_OscConfig+0x2b2>
 8002650:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	e015      	b.n	8002682 <HAL_RCC_OscConfig+0x2de>
 8002656:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800265a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800266a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800266e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002672:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <HAL_RCC_OscConfig+0x314>)
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002686:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800268a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800268e:	fa92 f2a2 	rbit	r2, r2
 8002692:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002696:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800269a:	fab2 f282 	clz	r2, r2
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	f042 0220 	orr.w	r2, r2, #32
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	f002 021f 	and.w	r2, r2, #31
 80026aa:	2101      	movs	r1, #1
 80026ac:	fa01 f202 	lsl.w	r2, r1, r2
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1ab      	bne.n	800260e <HAL_RCC_OscConfig+0x26a>
 80026b6:	e002      	b.n	80026be <HAL_RCC_OscConfig+0x31a>
 80026b8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 817f 	beq.w	80029d2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026d4:	4ba7      	ldr	r3, [pc, #668]	; (8002974 <HAL_RCC_OscConfig+0x5d0>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 030c 	and.w	r3, r3, #12
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00c      	beq.n	80026fa <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026e0:	4ba4      	ldr	r3, [pc, #656]	; (8002974 <HAL_RCC_OscConfig+0x5d0>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d173      	bne.n	80027d4 <HAL_RCC_OscConfig+0x430>
 80026ec:	4ba1      	ldr	r3, [pc, #644]	; (8002974 <HAL_RCC_OscConfig+0x5d0>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80026f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026f8:	d16c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x430>
 80026fa:	2302      	movs	r3, #2
 80026fc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800270c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002710:	fab3 f383 	clz	r3, r3
 8002714:	b2db      	uxtb	r3, r3
 8002716:	095b      	lsrs	r3, r3, #5
 8002718:	b2db      	uxtb	r3, r3
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b01      	cmp	r3, #1
 8002722:	d102      	bne.n	800272a <HAL_RCC_OscConfig+0x386>
 8002724:	4b93      	ldr	r3, [pc, #588]	; (8002974 <HAL_RCC_OscConfig+0x5d0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	e013      	b.n	8002752 <HAL_RCC_OscConfig+0x3ae>
 800272a:	2302      	movs	r3, #2
 800272c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002734:	fa93 f3a3 	rbit	r3, r3
 8002738:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800273c:	2302      	movs	r3, #2
 800273e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002742:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800274e:	4b89      	ldr	r3, [pc, #548]	; (8002974 <HAL_RCC_OscConfig+0x5d0>)
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	2202      	movs	r2, #2
 8002754:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002758:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800275c:	fa92 f2a2 	rbit	r2, r2
 8002760:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002764:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002768:	fab2 f282 	clz	r2, r2
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f042 0220 	orr.w	r2, r2, #32
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	f002 021f 	and.w	r2, r2, #31
 8002778:	2101      	movs	r1, #1
 800277a:	fa01 f202 	lsl.w	r2, r1, r2
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCC_OscConfig+0x3f6>
 8002784:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002788:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d002      	beq.n	800279a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	f000 be52 	b.w	800343e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279a:	4b76      	ldr	r3, [pc, #472]	; (8002974 <HAL_RCC_OscConfig+0x5d0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	21f8      	movs	r1, #248	; 0xf8
 80027b0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80027b8:	fa91 f1a1 	rbit	r1, r1
 80027bc:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80027c0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80027c4:	fab1 f181 	clz	r1, r1
 80027c8:	b2c9      	uxtb	r1, r1
 80027ca:	408b      	lsls	r3, r1
 80027cc:	4969      	ldr	r1, [pc, #420]	; (8002974 <HAL_RCC_OscConfig+0x5d0>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d2:	e0fe      	b.n	80029d2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 8088 	beq.w	80028f6 <HAL_RCC_OscConfig+0x552>
 80027e6:	2301      	movs	r3, #1
 80027e8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80027f8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002806:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	461a      	mov	r2, r3
 800280e:	2301      	movs	r3, #1
 8002810:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002812:	f7fe f83d 	bl	8000890 <HAL_GetTick>
 8002816:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281a:	e00a      	b.n	8002832 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281c:	f7fe f838 	bl	8000890 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d902      	bls.n	8002832 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	f000 be06 	b.w	800343e <HAL_RCC_OscConfig+0x109a>
 8002832:	2302      	movs	r3, #2
 8002834:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8002844:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d102      	bne.n	8002862 <HAL_RCC_OscConfig+0x4be>
 800285c:	4b45      	ldr	r3, [pc, #276]	; (8002974 <HAL_RCC_OscConfig+0x5d0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	e013      	b.n	800288a <HAL_RCC_OscConfig+0x4e6>
 8002862:	2302      	movs	r3, #2
 8002864:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002874:	2302      	movs	r3, #2
 8002876:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800287a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002886:	4b3b      	ldr	r3, [pc, #236]	; (8002974 <HAL_RCC_OscConfig+0x5d0>)
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2202      	movs	r2, #2
 800288c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002890:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002894:	fa92 f2a2 	rbit	r2, r2
 8002898:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800289c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028a0:	fab2 f282 	clz	r2, r2
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	f042 0220 	orr.w	r2, r2, #32
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	f002 021f 	and.w	r2, r2, #31
 80028b0:	2101      	movs	r1, #1
 80028b2:	fa01 f202 	lsl.w	r2, r1, r2
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0af      	beq.n	800281c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028bc:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_RCC_OscConfig+0x5d0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	21f8      	movs	r1, #248	; 0xf8
 80028d2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80028da:	fa91 f1a1 	rbit	r1, r1
 80028de:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80028e2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80028e6:	fab1 f181 	clz	r1, r1
 80028ea:	b2c9      	uxtb	r1, r1
 80028ec:	408b      	lsls	r3, r1
 80028ee:	4921      	ldr	r1, [pc, #132]	; (8002974 <HAL_RCC_OscConfig+0x5d0>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	600b      	str	r3, [r1, #0]
 80028f4:	e06d      	b.n	80029d2 <HAL_RCC_OscConfig+0x62e>
 80028f6:	2301      	movs	r3, #1
 80028f8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002908:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002916:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	461a      	mov	r2, r3
 800291e:	2300      	movs	r3, #0
 8002920:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002922:	f7fd ffb5 	bl	8000890 <HAL_GetTick>
 8002926:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800292c:	f7fd ffb0 	bl	8000890 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d902      	bls.n	8002942 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	f000 bd7e 	b.w	800343e <HAL_RCC_OscConfig+0x109a>
 8002942:	2302      	movs	r3, #2
 8002944:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002954:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b01      	cmp	r3, #1
 800296a:	d105      	bne.n	8002978 <HAL_RCC_OscConfig+0x5d4>
 800296c:	4b01      	ldr	r3, [pc, #4]	; (8002974 <HAL_RCC_OscConfig+0x5d0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	e016      	b.n	80029a0 <HAL_RCC_OscConfig+0x5fc>
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000
 8002978:	2302      	movs	r3, #2
 800297a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800298a:	2302      	movs	r3, #2
 800298c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002990:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800299c:	4bbf      	ldr	r3, [pc, #764]	; (8002c9c <HAL_RCC_OscConfig+0x8f8>)
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	2202      	movs	r2, #2
 80029a2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80029a6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80029aa:	fa92 f2a2 	rbit	r2, r2
 80029ae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80029b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80029b6:	fab2 f282 	clz	r2, r2
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	f042 0220 	orr.w	r2, r2, #32
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	f002 021f 	and.w	r2, r2, #31
 80029c6:	2101      	movs	r1, #1
 80029c8:	fa01 f202 	lsl.w	r2, r1, r2
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1ac      	bne.n	800292c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8113 	beq.w	8002c0e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029ec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d07c      	beq.n	8002af2 <HAL_RCC_OscConfig+0x74e>
 80029f8:	2301      	movs	r3, #1
 80029fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002a0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	4ba2      	ldr	r3, [pc, #648]	; (8002ca0 <HAL_RCC_OscConfig+0x8fc>)
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2301      	movs	r3, #1
 8002a20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a22:	f7fd ff35 	bl	8000890 <HAL_GetTick>
 8002a26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a2c:	f7fd ff30 	bl	8000890 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d902      	bls.n	8002a42 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	f000 bcfe 	b.w	800343e <HAL_RCC_OscConfig+0x109a>
 8002a42:	2302      	movs	r3, #2
 8002a44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a4c:	fa93 f2a3 	rbit	r2, r3
 8002a50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a54:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a62:	2202      	movs	r2, #2
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	fa93 f2a3 	rbit	r2, r3
 8002a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a86:	2202      	movs	r2, #2
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a8e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	fa93 f2a3 	rbit	r2, r3
 8002a98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a9c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002aa0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa2:	4b7e      	ldr	r3, [pc, #504]	; (8002c9c <HAL_RCC_OscConfig+0x8f8>)
 8002aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002aaa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002aae:	2102      	movs	r1, #2
 8002ab0:	6019      	str	r1, [r3, #0]
 8002ab2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ab6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	fa93 f1a3 	rbit	r1, r3
 8002ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ac4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ac8:	6019      	str	r1, [r3, #0]
  return result;
 8002aca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ace:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d09d      	beq.n	8002a2c <HAL_RCC_OscConfig+0x688>
 8002af0:	e08d      	b.n	8002c0e <HAL_RCC_OscConfig+0x86a>
 8002af2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b02:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	fa93 f2a3 	rbit	r2, r3
 8002b0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b10:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b14:	601a      	str	r2, [r3, #0]
  return result;
 8002b16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b1a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002b1e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <HAL_RCC_OscConfig+0x8fc>)
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	461a      	mov	r2, r3
 8002b30:	2300      	movs	r3, #0
 8002b32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b34:	f7fd feac 	bl	8000890 <HAL_GetTick>
 8002b38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b3e:	f7fd fea7 	bl	8000890 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d902      	bls.n	8002b54 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	f000 bc75 	b.w	800343e <HAL_RCC_OscConfig+0x109a>
 8002b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b64:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	fa93 f2a3 	rbit	r2, r3
 8002b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b72:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b80:	2202      	movs	r2, #2
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	fa93 f2a3 	rbit	r2, r3
 8002b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	fa93 f2a3 	rbit	r2, r3
 8002bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002bbe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc0:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <HAL_RCC_OscConfig+0x8f8>)
 8002bc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bc8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bcc:	2102      	movs	r1, #2
 8002bce:	6019      	str	r1, [r3, #0]
 8002bd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bd4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	fa93 f1a3 	rbit	r1, r3
 8002bde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002be6:	6019      	str	r1, [r3, #0]
  return result;
 8002be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	2101      	movs	r1, #1
 8002c04:	fa01 f303 	lsl.w	r3, r1, r3
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d197      	bne.n	8002b3e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 81a5 	beq.w	8002f6e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c2a:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <HAL_RCC_OscConfig+0x8f8>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d116      	bne.n	8002c64 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_OscConfig+0x8f8>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <HAL_RCC_OscConfig+0x8f8>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c40:	61d3      	str	r3, [r2, #28]
 8002c42:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <HAL_RCC_OscConfig+0x8f8>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c5c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <HAL_RCC_OscConfig+0x900>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d121      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_RCC_OscConfig+0x900>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a0b      	ldr	r2, [pc, #44]	; (8002ca4 <HAL_RCC_OscConfig+0x900>)
 8002c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7c:	f7fd fe08 	bl	8000890 <HAL_GetTick>
 8002c80:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	e010      	b.n	8002ca8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c86:	f7fd fe03 	bl	8000890 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	; 0x64
 8002c94:	d908      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e3d1      	b.n	800343e <HAL_RCC_OscConfig+0x109a>
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	10908120 	.word	0x10908120
 8002ca4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	4b8d      	ldr	r3, [pc, #564]	; (8002ee0 <HAL_RCC_OscConfig+0xb3c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0e8      	beq.n	8002c86 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d106      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x92e>
 8002cc4:	4b87      	ldr	r3, [pc, #540]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	4a86      	ldr	r2, [pc, #536]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6213      	str	r3, [r2, #32]
 8002cd0:	e035      	b.n	8002d3e <HAL_RCC_OscConfig+0x99a>
 8002cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0x958>
 8002ce2:	4b80      	ldr	r3, [pc, #512]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	4a7f      	ldr	r2, [pc, #508]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	6213      	str	r3, [r2, #32]
 8002cee:	4b7d      	ldr	r3, [pc, #500]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a7c      	ldr	r2, [pc, #496]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002cf4:	f023 0304 	bic.w	r3, r3, #4
 8002cf8:	6213      	str	r3, [r2, #32]
 8002cfa:	e020      	b.n	8002d3e <HAL_RCC_OscConfig+0x99a>
 8002cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b05      	cmp	r3, #5
 8002d0a:	d10c      	bne.n	8002d26 <HAL_RCC_OscConfig+0x982>
 8002d0c:	4b75      	ldr	r3, [pc, #468]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	4a74      	ldr	r2, [pc, #464]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002d12:	f043 0304 	orr.w	r3, r3, #4
 8002d16:	6213      	str	r3, [r2, #32]
 8002d18:	4b72      	ldr	r3, [pc, #456]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	4a71      	ldr	r2, [pc, #452]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6213      	str	r3, [r2, #32]
 8002d24:	e00b      	b.n	8002d3e <HAL_RCC_OscConfig+0x99a>
 8002d26:	4b6f      	ldr	r3, [pc, #444]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4a6e      	ldr	r2, [pc, #440]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	6213      	str	r3, [r2, #32]
 8002d32:	4b6c      	ldr	r3, [pc, #432]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4a6b      	ldr	r2, [pc, #428]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8081 	beq.w	8002e52 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d50:	f7fd fd9e 	bl	8000890 <HAL_GetTick>
 8002d54:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d58:	e00b      	b.n	8002d72 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d5a:	f7fd fd99 	bl	8000890 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e365      	b.n	800343e <HAL_RCC_OscConfig+0x109a>
 8002d72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d76:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d82:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	fa93 f2a3 	rbit	r2, r3
 8002d8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d90:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d9a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002d9e:	2202      	movs	r2, #2
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	fa93 f2a3 	rbit	r2, r3
 8002db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002db4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002db8:	601a      	str	r2, [r3, #0]
  return result;
 8002dba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dbe:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002dc2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc4:	fab3 f383 	clz	r3, r3
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	f043 0302 	orr.w	r3, r3, #2
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d102      	bne.n	8002dde <HAL_RCC_OscConfig+0xa3a>
 8002dd8:	4b42      	ldr	r3, [pc, #264]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	e013      	b.n	8002e06 <HAL_RCC_OscConfig+0xa62>
 8002dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002de6:	2202      	movs	r2, #2
 8002de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	fa93 f2a3 	rbit	r2, r3
 8002df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dfc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	4b38      	ldr	r3, [pc, #224]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e0a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e0e:	2102      	movs	r1, #2
 8002e10:	6011      	str	r1, [r2, #0]
 8002e12:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e16:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	fa92 f1a2 	rbit	r1, r2
 8002e20:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e24:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002e28:	6011      	str	r1, [r2, #0]
  return result;
 8002e2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002e2e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	fab2 f282 	clz	r2, r2
 8002e38:	b2d2      	uxtb	r2, r2
 8002e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	f002 021f 	and.w	r2, r2, #31
 8002e44:	2101      	movs	r1, #1
 8002e46:	fa01 f202 	lsl.w	r2, r1, r2
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d084      	beq.n	8002d5a <HAL_RCC_OscConfig+0x9b6>
 8002e50:	e083      	b.n	8002f5a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e52:	f7fd fd1d 	bl	8000890 <HAL_GetTick>
 8002e56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5a:	e00b      	b.n	8002e74 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5c:	f7fd fd18 	bl	8000890 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e2e4      	b.n	800343e <HAL_RCC_OscConfig+0x109a>
 8002e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e78:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e84:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	fa93 f2a3 	rbit	r2, r3
 8002e8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e92:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e9c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	fa93 f2a3 	rbit	r2, r3
 8002eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002eba:	601a      	str	r2, [r3, #0]
  return result;
 8002ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ec0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002ec4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d106      	bne.n	8002ee8 <HAL_RCC_OscConfig+0xb44>
 8002eda:	4b02      	ldr	r3, [pc, #8]	; (8002ee4 <HAL_RCC_OscConfig+0xb40>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	e017      	b.n	8002f10 <HAL_RCC_OscConfig+0xb6c>
 8002ee0:	40007000 	.word	0x40007000
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ef8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	fa93 f2a3 	rbit	r2, r3
 8002f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f06:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	4bb3      	ldr	r3, [pc, #716]	; (80031dc <HAL_RCC_OscConfig+0xe38>)
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f14:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f18:	2102      	movs	r1, #2
 8002f1a:	6011      	str	r1, [r2, #0]
 8002f1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f20:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	fa92 f1a2 	rbit	r1, r2
 8002f2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f2e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002f32:	6011      	str	r1, [r2, #0]
  return result;
 8002f34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002f38:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	fab2 f282 	clz	r2, r2
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	f002 021f 	and.w	r2, r2, #31
 8002f4e:	2101      	movs	r1, #1
 8002f50:	fa01 f202 	lsl.w	r2, r1, r2
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d180      	bne.n	8002e5c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f5a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d105      	bne.n	8002f6e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f62:	4b9e      	ldr	r3, [pc, #632]	; (80031dc <HAL_RCC_OscConfig+0xe38>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	4a9d      	ldr	r2, [pc, #628]	; (80031dc <HAL_RCC_OscConfig+0xe38>)
 8002f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 825e 	beq.w	800343c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f80:	4b96      	ldr	r3, [pc, #600]	; (80031dc <HAL_RCC_OscConfig+0xe38>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 030c 	and.w	r3, r3, #12
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	f000 821f 	beq.w	80033cc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	f040 8170 	bne.w	8003280 <HAL_RCC_OscConfig+0xedc>
 8002fa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fa4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fb2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	fa93 f2a3 	rbit	r2, r3
 8002fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fc0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002fc4:	601a      	str	r2, [r3, #0]
  return result;
 8002fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fca:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002fce:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd0:	fab3 f383 	clz	r3, r3
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7fd fc53 	bl	8000890 <HAL_GetTick>
 8002fea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fee:	e009      	b.n	8003004 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fd fc4e 	bl	8000890 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e21c      	b.n	800343e <HAL_RCC_OscConfig+0x109a>
 8003004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003008:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800300c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003016:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	fa93 f2a3 	rbit	r2, r3
 8003020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003024:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003028:	601a      	str	r2, [r3, #0]
  return result;
 800302a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800302e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003032:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	d102      	bne.n	800304e <HAL_RCC_OscConfig+0xcaa>
 8003048:	4b64      	ldr	r3, [pc, #400]	; (80031dc <HAL_RCC_OscConfig+0xe38>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	e027      	b.n	800309e <HAL_RCC_OscConfig+0xcfa>
 800304e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003052:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003056:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800305a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003060:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	fa93 f2a3 	rbit	r2, r3
 800306a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800306e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003078:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800307c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003086:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	fa93 f2a3 	rbit	r2, r3
 8003090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003094:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	4b50      	ldr	r3, [pc, #320]	; (80031dc <HAL_RCC_OscConfig+0xe38>)
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030a2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030aa:	6011      	str	r1, [r2, #0]
 80030ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030b0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	fa92 f1a2 	rbit	r1, r2
 80030ba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030be:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80030c2:	6011      	str	r1, [r2, #0]
  return result;
 80030c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80030c8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	fab2 f282 	clz	r2, r2
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	f042 0220 	orr.w	r2, r2, #32
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	f002 021f 	and.w	r2, r2, #31
 80030de:	2101      	movs	r1, #1
 80030e0:	fa01 f202 	lsl.w	r2, r1, r2
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d182      	bne.n	8002ff0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ea:	4b3c      	ldr	r3, [pc, #240]	; (80031dc <HAL_RCC_OscConfig+0xe38>)
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	f023 020f 	bic.w	r2, r3, #15
 80030f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	4937      	ldr	r1, [pc, #220]	; (80031dc <HAL_RCC_OscConfig+0xe38>)
 8003100:	4313      	orrs	r3, r2
 8003102:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003104:	4b35      	ldr	r3, [pc, #212]	; (80031dc <HAL_RCC_OscConfig+0xe38>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800310c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003110:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6a19      	ldr	r1, [r3, #32]
 8003118:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800311c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	430b      	orrs	r3, r1
 8003126:	492d      	ldr	r1, [pc, #180]	; (80031dc <HAL_RCC_OscConfig+0xe38>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]
 800312c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003130:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003134:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800313e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	fa93 f2a3 	rbit	r2, r3
 8003148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800314c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003150:	601a      	str	r2, [r3, #0]
  return result;
 8003152:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003156:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800315a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800315c:	fab3 f383 	clz	r3, r3
 8003160:	b2db      	uxtb	r3, r3
 8003162:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003166:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	461a      	mov	r2, r3
 800316e:	2301      	movs	r3, #1
 8003170:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003172:	f7fd fb8d 	bl	8000890 <HAL_GetTick>
 8003176:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800317a:	e009      	b.n	8003190 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317c:	f7fd fb88 	bl	8000890 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e156      	b.n	800343e <HAL_RCC_OscConfig+0x109a>
 8003190:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003194:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003198:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800319c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	fa93 f2a3 	rbit	r2, r3
 80031ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031b0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031b4:	601a      	str	r2, [r3, #0]
  return result;
 80031b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031ba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80031be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d105      	bne.n	80031e0 <HAL_RCC_OscConfig+0xe3c>
 80031d4:	4b01      	ldr	r3, [pc, #4]	; (80031dc <HAL_RCC_OscConfig+0xe38>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	e02a      	b.n	8003230 <HAL_RCC_OscConfig+0xe8c>
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031e4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80031e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	fa93 f2a3 	rbit	r2, r3
 80031fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003200:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800320a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800320e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003218:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	fa93 f2a3 	rbit	r2, r3
 8003222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003226:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	4b86      	ldr	r3, [pc, #536]	; (8003448 <HAL_RCC_OscConfig+0x10a4>)
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003234:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003238:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800323c:	6011      	str	r1, [r2, #0]
 800323e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003242:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	fa92 f1a2 	rbit	r1, r2
 800324c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003250:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003254:	6011      	str	r1, [r2, #0]
  return result;
 8003256:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800325a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	fab2 f282 	clz	r2, r2
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	f042 0220 	orr.w	r2, r2, #32
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	f002 021f 	and.w	r2, r2, #31
 8003270:	2101      	movs	r1, #1
 8003272:	fa01 f202 	lsl.w	r2, r1, r2
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	f43f af7f 	beq.w	800317c <HAL_RCC_OscConfig+0xdd8>
 800327e:	e0dd      	b.n	800343c <HAL_RCC_OscConfig+0x1098>
 8003280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003284:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003288:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800328c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003292:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	fa93 f2a3 	rbit	r2, r3
 800329c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032a0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032a4:	601a      	str	r2, [r3, #0]
  return result;
 80032a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032aa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80032ae:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b0:	fab3 f383 	clz	r3, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	461a      	mov	r2, r3
 80032c2:	2300      	movs	r3, #0
 80032c4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7fd fae3 	bl	8000890 <HAL_GetTick>
 80032ca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ce:	e009      	b.n	80032e4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d0:	f7fd fade 	bl	8000890 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e0ac      	b.n	800343e <HAL_RCC_OscConfig+0x109a>
 80032e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032f6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	fa93 f2a3 	rbit	r2, r3
 8003300:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003304:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003308:	601a      	str	r2, [r3, #0]
  return result;
 800330a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800330e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003312:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d102      	bne.n	800332e <HAL_RCC_OscConfig+0xf8a>
 8003328:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_OscConfig+0x10a4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	e027      	b.n	800337e <HAL_RCC_OscConfig+0xfda>
 800332e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003332:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003336:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800333a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003340:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	fa93 f2a3 	rbit	r2, r3
 800334a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800334e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003358:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800335c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003366:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	fa93 f2a3 	rbit	r2, r3
 8003370:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003374:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	4b33      	ldr	r3, [pc, #204]	; (8003448 <HAL_RCC_OscConfig+0x10a4>)
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003382:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003386:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800338a:	6011      	str	r1, [r2, #0]
 800338c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003390:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003394:	6812      	ldr	r2, [r2, #0]
 8003396:	fa92 f1a2 	rbit	r1, r2
 800339a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800339e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80033a2:	6011      	str	r1, [r2, #0]
  return result;
 80033a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80033a8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	fab2 f282 	clz	r2, r2
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	f042 0220 	orr.w	r2, r2, #32
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	f002 021f 	and.w	r2, r2, #31
 80033be:	2101      	movs	r1, #1
 80033c0:	fa01 f202 	lsl.w	r2, r1, r2
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d182      	bne.n	80032d0 <HAL_RCC_OscConfig+0xf2c>
 80033ca:	e037      	b.n	800343c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e02e      	b.n	800343e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_RCC_OscConfig+0x10a4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80033e8:	4b17      	ldr	r3, [pc, #92]	; (8003448 <HAL_RCC_OscConfig+0x10a4>)
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80033f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80033f4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80033f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	429a      	cmp	r2, r3
 8003406:	d117      	bne.n	8003438 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003408:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800340c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003410:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003414:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800341c:	429a      	cmp	r2, r3
 800341e:	d10b      	bne.n	8003438 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003420:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003424:	f003 020f 	and.w	r2, r3, #15
 8003428:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800342c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003434:	429a      	cmp	r2, r3
 8003436:	d001      	beq.n	800343c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40021000 	.word	0x40021000

0800344c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b09e      	sub	sp, #120	; 0x78
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e162      	b.n	800372a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003464:	4b90      	ldr	r3, [pc, #576]	; (80036a8 <HAL_RCC_ClockConfig+0x25c>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d910      	bls.n	8003494 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b8d      	ldr	r3, [pc, #564]	; (80036a8 <HAL_RCC_ClockConfig+0x25c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 0207 	bic.w	r2, r3, #7
 800347a:	498b      	ldr	r1, [pc, #556]	; (80036a8 <HAL_RCC_ClockConfig+0x25c>)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003482:	4b89      	ldr	r3, [pc, #548]	; (80036a8 <HAL_RCC_ClockConfig+0x25c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e14a      	b.n	800372a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a0:	4b82      	ldr	r3, [pc, #520]	; (80036ac <HAL_RCC_ClockConfig+0x260>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	497f      	ldr	r1, [pc, #508]	; (80036ac <HAL_RCC_ClockConfig+0x260>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 80dc 	beq.w	8003678 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d13c      	bne.n	8003542 <HAL_RCC_ClockConfig+0xf6>
 80034c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034d0:	fa93 f3a3 	rbit	r3, r3
 80034d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80034d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d8:	fab3 f383 	clz	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d102      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xa6>
 80034ec:	4b6f      	ldr	r3, [pc, #444]	; (80036ac <HAL_RCC_ClockConfig+0x260>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	e00f      	b.n	8003512 <HAL_RCC_ClockConfig+0xc6>
 80034f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034fa:	fa93 f3a3 	rbit	r3, r3
 80034fe:	667b      	str	r3, [r7, #100]	; 0x64
 8003500:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003504:	663b      	str	r3, [r7, #96]	; 0x60
 8003506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003508:	fa93 f3a3 	rbit	r3, r3
 800350c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800350e:	4b67      	ldr	r3, [pc, #412]	; (80036ac <HAL_RCC_ClockConfig+0x260>)
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003516:	65ba      	str	r2, [r7, #88]	; 0x58
 8003518:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800351a:	fa92 f2a2 	rbit	r2, r2
 800351e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003520:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003522:	fab2 f282 	clz	r2, r2
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	f042 0220 	orr.w	r2, r2, #32
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	f002 021f 	and.w	r2, r2, #31
 8003532:	2101      	movs	r1, #1
 8003534:	fa01 f202 	lsl.w	r2, r1, r2
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d17b      	bne.n	8003636 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e0f3      	b.n	800372a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d13c      	bne.n	80035c4 <HAL_RCC_ClockConfig+0x178>
 800354a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800354e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355a:	fab3 f383 	clz	r3, r3
 800355e:	b2db      	uxtb	r3, r3
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d102      	bne.n	8003574 <HAL_RCC_ClockConfig+0x128>
 800356e:	4b4f      	ldr	r3, [pc, #316]	; (80036ac <HAL_RCC_ClockConfig+0x260>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	e00f      	b.n	8003594 <HAL_RCC_ClockConfig+0x148>
 8003574:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003578:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	647b      	str	r3, [r7, #68]	; 0x44
 8003582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003586:	643b      	str	r3, [r7, #64]	; 0x40
 8003588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800358a:	fa93 f3a3 	rbit	r3, r3
 800358e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003590:	4b46      	ldr	r3, [pc, #280]	; (80036ac <HAL_RCC_ClockConfig+0x260>)
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003598:	63ba      	str	r2, [r7, #56]	; 0x38
 800359a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800359c:	fa92 f2a2 	rbit	r2, r2
 80035a0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80035a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035a4:	fab2 f282 	clz	r2, r2
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	f042 0220 	orr.w	r2, r2, #32
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	f002 021f 	and.w	r2, r2, #31
 80035b4:	2101      	movs	r1, #1
 80035b6:	fa01 f202 	lsl.w	r2, r1, r2
 80035ba:	4013      	ands	r3, r2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d13a      	bne.n	8003636 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0b2      	b.n	800372a <HAL_RCC_ClockConfig+0x2de>
 80035c4:	2302      	movs	r3, #2
 80035c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d102      	bne.n	80035ec <HAL_RCC_ClockConfig+0x1a0>
 80035e6:	4b31      	ldr	r3, [pc, #196]	; (80036ac <HAL_RCC_ClockConfig+0x260>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	e00d      	b.n	8003608 <HAL_RCC_ClockConfig+0x1bc>
 80035ec:	2302      	movs	r3, #2
 80035ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	627b      	str	r3, [r7, #36]	; 0x24
 80035f8:	2302      	movs	r3, #2
 80035fa:	623b      	str	r3, [r7, #32]
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	fa93 f3a3 	rbit	r3, r3
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	4b29      	ldr	r3, [pc, #164]	; (80036ac <HAL_RCC_ClockConfig+0x260>)
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	2202      	movs	r2, #2
 800360a:	61ba      	str	r2, [r7, #24]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	fa92 f2a2 	rbit	r2, r2
 8003612:	617a      	str	r2, [r7, #20]
  return result;
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	fab2 f282 	clz	r2, r2
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	f042 0220 	orr.w	r2, r2, #32
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	f002 021f 	and.w	r2, r2, #31
 8003626:	2101      	movs	r1, #1
 8003628:	fa01 f202 	lsl.w	r2, r1, r2
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e079      	b.n	800372a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003636:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <HAL_RCC_ClockConfig+0x260>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f023 0203 	bic.w	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	491a      	ldr	r1, [pc, #104]	; (80036ac <HAL_RCC_ClockConfig+0x260>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003648:	f7fd f922 	bl	8000890 <HAL_GetTick>
 800364c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	e00a      	b.n	8003666 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003650:	f7fd f91e 	bl	8000890 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	; 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e061      	b.n	800372a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	4b11      	ldr	r3, [pc, #68]	; (80036ac <HAL_RCC_ClockConfig+0x260>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 020c 	and.w	r2, r3, #12
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	429a      	cmp	r2, r3
 8003676:	d1eb      	bne.n	8003650 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_RCC_ClockConfig+0x25c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d214      	bcs.n	80036b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <HAL_RCC_ClockConfig+0x25c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 0207 	bic.w	r2, r3, #7
 800368e:	4906      	ldr	r1, [pc, #24]	; (80036a8 <HAL_RCC_ClockConfig+0x25c>)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003696:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <HAL_RCC_ClockConfig+0x25c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e040      	b.n	800372a <HAL_RCC_ClockConfig+0x2de>
 80036a8:	40022000 	.word	0x40022000
 80036ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036bc:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <HAL_RCC_ClockConfig+0x2e8>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	491a      	ldr	r1, [pc, #104]	; (8003734 <HAL_RCC_ClockConfig+0x2e8>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d009      	beq.n	80036ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036da:	4b16      	ldr	r3, [pc, #88]	; (8003734 <HAL_RCC_ClockConfig+0x2e8>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4912      	ldr	r1, [pc, #72]	; (8003734 <HAL_RCC_ClockConfig+0x2e8>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036ee:	f000 f829 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 80036f2:	4601      	mov	r1, r0
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <HAL_RCC_ClockConfig+0x2e8>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036fc:	22f0      	movs	r2, #240	; 0xf0
 80036fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	fa92 f2a2 	rbit	r2, r2
 8003706:	60fa      	str	r2, [r7, #12]
  return result;
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	fab2 f282 	clz	r2, r2
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	40d3      	lsrs	r3, r2
 8003712:	4a09      	ldr	r2, [pc, #36]	; (8003738 <HAL_RCC_ClockConfig+0x2ec>)
 8003714:	5cd3      	ldrb	r3, [r2, r3]
 8003716:	fa21 f303 	lsr.w	r3, r1, r3
 800371a:	4a08      	ldr	r2, [pc, #32]	; (800373c <HAL_RCC_ClockConfig+0x2f0>)
 800371c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800371e:	4b08      	ldr	r3, [pc, #32]	; (8003740 <HAL_RCC_ClockConfig+0x2f4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fd f870 	bl	8000808 <HAL_InitTick>
  
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3778      	adds	r7, #120	; 0x78
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000
 8003738:	080063a0 	.word	0x080063a0
 800373c:	20000000 	.word	0x20000000
 8003740:	20000004 	.word	0x20000004

08003744 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	2300      	movs	r3, #0
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	2300      	movs	r3, #0
 8003758:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800375e:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <HAL_RCC_GetSysClockFreq+0x98>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b04      	cmp	r3, #4
 800376c:	d002      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x30>
 800376e:	2b08      	cmp	r3, #8
 8003770:	d003      	beq.n	800377a <HAL_RCC_GetSysClockFreq+0x36>
 8003772:	e029      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003774:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003776:	613b      	str	r3, [r7, #16]
      break;
 8003778:	e029      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	0c9b      	lsrs	r3, r3, #18
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	4a18      	ldr	r2, [pc, #96]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003784:	5cd3      	ldrb	r3, [r2, r3]
 8003786:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <HAL_RCC_GetSysClockFreq+0x98>)
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	4a15      	ldr	r2, [pc, #84]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003792:	5cd3      	ldrb	r3, [r2, r3]
 8003794:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037a0:	4a0f      	ldr	r2, [pc, #60]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	e007      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037b2:	4a0b      	ldr	r2, [pc, #44]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	fb02 f303 	mul.w	r3, r2, r3
 80037c0:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	613b      	str	r3, [r7, #16]
      break;
 80037c6:	e002      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80037ca:	613b      	str	r3, [r7, #16]
      break;
 80037cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ce:	693b      	ldr	r3, [r7, #16]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	371c      	adds	r7, #28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	40021000 	.word	0x40021000
 80037e0:	007a1200 	.word	0x007a1200
 80037e4:	080063b8 	.word	0x080063b8
 80037e8:	080063c8 	.word	0x080063c8

080037ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <HAL_RCC_GetHCLKFreq+0x14>)
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000000 	.word	0x20000000

08003804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800380a:	f7ff ffef 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 800380e:	4601      	mov	r1, r0
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003818:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800381c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	fa92 f2a2 	rbit	r2, r2
 8003824:	603a      	str	r2, [r7, #0]
  return result;
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	fab2 f282 	clz	r2, r2
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	40d3      	lsrs	r3, r2
 8003830:	4a04      	ldr	r2, [pc, #16]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003832:	5cd3      	ldrb	r3, [r2, r3]
 8003834:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000
 8003844:	080063b0 	.word	0x080063b0

08003848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800384e:	f7ff ffcd 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8003852:	4601      	mov	r1, r0
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800385c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003860:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	fa92 f2a2 	rbit	r2, r2
 8003868:	603a      	str	r2, [r7, #0]
  return result;
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	fab2 f282 	clz	r2, r2
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	40d3      	lsrs	r3, r2
 8003874:	4a04      	ldr	r2, [pc, #16]	; (8003888 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003876:	5cd3      	ldrb	r3, [r2, r3]
 8003878:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40021000 	.word	0x40021000
 8003888:	080063b0 	.word	0x080063b0

0800388c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b092      	sub	sp, #72	; 0x48
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800389c:	2300      	movs	r3, #0
 800389e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 80d4 	beq.w	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b0:	4b4e      	ldr	r3, [pc, #312]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10e      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038bc:	4b4b      	ldr	r3, [pc, #300]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	4a4a      	ldr	r2, [pc, #296]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c6:	61d3      	str	r3, [r2, #28]
 80038c8:	4b48      	ldr	r3, [pc, #288]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038da:	4b45      	ldr	r3, [pc, #276]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d118      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e6:	4b42      	ldr	r3, [pc, #264]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a41      	ldr	r2, [pc, #260]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038f2:	f7fc ffcd 	bl	8000890 <HAL_GetTick>
 80038f6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f8:	e008      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fa:	f7fc ffc9 	bl	8000890 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b64      	cmp	r3, #100	; 0x64
 8003906:	d901      	bls.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e1d6      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390c:	4b38      	ldr	r3, [pc, #224]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003918:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003920:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8084 	beq.w	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003932:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003934:	429a      	cmp	r2, r3
 8003936:	d07c      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003938:	4b2c      	ldr	r3, [pc, #176]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003946:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394a:	fa93 f3a3 	rbit	r3, r3
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003952:	fab3 f383 	clz	r3, r3
 8003956:	b2db      	uxtb	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	461a      	mov	r2, r3
 8003962:	2301      	movs	r3, #1
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800396a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	461a      	mov	r2, r3
 8003986:	2300      	movs	r3, #0
 8003988:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800398a:	4a18      	ldr	r2, [pc, #96]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800398e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d04b      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399a:	f7fc ff79 	bl	8000890 <HAL_GetTick>
 800399e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a0:	e00a      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7fc ff75 	bl	8000890 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e180      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80039b8:	2302      	movs	r3, #2
 80039ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
 80039c4:	2302      	movs	r3, #2
 80039c6:	623b      	str	r3, [r7, #32]
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	fa93 f3a3 	rbit	r3, r3
 80039ce:	61fb      	str	r3, [r7, #28]
  return result;
 80039d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d2:	fab3 f383 	clz	r3, r3
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	095b      	lsrs	r3, r3, #5
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	f043 0302 	orr.w	r3, r3, #2
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d108      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80039e6:	4b01      	ldr	r3, [pc, #4]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	e00d      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40007000 	.word	0x40007000
 80039f4:	10908100 	.word	0x10908100
 80039f8:	2302      	movs	r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	fa93 f3a3 	rbit	r3, r3
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	4b9a      	ldr	r3, [pc, #616]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	2202      	movs	r2, #2
 8003a0a:	613a      	str	r2, [r7, #16]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	fa92 f2a2 	rbit	r2, r2
 8003a12:	60fa      	str	r2, [r7, #12]
  return result;
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	fab2 f282 	clz	r2, r2
 8003a1a:	b2d2      	uxtb	r2, r2
 8003a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	f002 021f 	and.w	r2, r2, #31
 8003a26:	2101      	movs	r1, #1
 8003a28:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0b7      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a32:	4b8f      	ldr	r3, [pc, #572]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	498c      	ldr	r1, [pc, #560]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d105      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4c:	4b88      	ldr	r3, [pc, #544]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	4a87      	ldr	r2, [pc, #540]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a64:	4b82      	ldr	r3, [pc, #520]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a68:	f023 0203 	bic.w	r2, r3, #3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	497f      	ldr	r1, [pc, #508]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a82:	4b7b      	ldr	r3, [pc, #492]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	4978      	ldr	r1, [pc, #480]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003aa0:	4b73      	ldr	r3, [pc, #460]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	4970      	ldr	r1, [pc, #448]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003abe:	4b6c      	ldr	r3, [pc, #432]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	f023 0210 	bic.w	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	4969      	ldr	r1, [pc, #420]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003adc:	4b64      	ldr	r3, [pc, #400]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae8:	4961      	ldr	r1, [pc, #388]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d008      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003afa:	4b5d      	ldr	r3, [pc, #372]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	f023 0220 	bic.w	r2, r3, #32
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
 8003b06:	495a      	ldr	r1, [pc, #360]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d008      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b18:	4b55      	ldr	r3, [pc, #340]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	4952      	ldr	r1, [pc, #328]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b36:	4b4e      	ldr	r3, [pc, #312]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	494b      	ldr	r1, [pc, #300]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b54:	4b46      	ldr	r3, [pc, #280]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	4943      	ldr	r1, [pc, #268]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b72:	4b3f      	ldr	r3, [pc, #252]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	493c      	ldr	r1, [pc, #240]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b90:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	4934      	ldr	r1, [pc, #208]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d008      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003bae:	4b30      	ldr	r3, [pc, #192]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	492d      	ldr	r1, [pc, #180]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d008      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003bcc:	4b28      	ldr	r3, [pc, #160]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd8:	4925      	ldr	r1, [pc, #148]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d008      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003bea:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	491e      	ldr	r1, [pc, #120]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003c08:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c14:	4916      	ldr	r1, [pc, #88]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d008      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003c26:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	490f      	ldr	r1, [pc, #60]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003c44:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c50:	4907      	ldr	r1, [pc, #28]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00c      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003c62:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	e002      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003c6e:	bf00      	nop
 8003c70:	40021000 	.word	0x40021000
 8003c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c76:	4913      	ldr	r1, [pc, #76]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003c88:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c94:	490b      	ldr	r1, [pc, #44]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003ca6:	4b07      	ldr	r3, [pc, #28]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb2:	4904      	ldr	r1, [pc, #16]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3748      	adds	r7, #72	; 0x48
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e073      	b.n	8003dc6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	7f5b      	ldrb	r3, [r3, #29]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fc fbd0 	bl	8000494 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b10      	cmp	r3, #16
 8003d06:	d055      	beq.n	8003db4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	22ca      	movs	r2, #202	; 0xca
 8003d0e:	625a      	str	r2, [r3, #36]	; 0x24
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2253      	movs	r2, #83	; 0x53
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f87f 	bl	8003e1c <RTC_EnterInitMode>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d12c      	bne.n	8003d82 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d3a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6899      	ldr	r1, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68d2      	ldr	r2, [r2, #12]
 8003d62:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6919      	ldr	r1, [r3, #16]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	041a      	lsls	r2, r3, #16
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f886 	bl	8003e8a <RTC_ExitInitMode>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d110      	bne.n	8003daa <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d96:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	22ff      	movs	r2, #255	; 0xff
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24
 8003db2:	e001      	b.n	8003db8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d102      	bne.n	8003dc4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a0d      	ldr	r2, [pc, #52]	; (8003e18 <HAL_RTC_WaitForSynchro+0x48>)
 8003de2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003de4:	f7fc fd54 	bl	8000890 <HAL_GetTick>
 8003de8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003dea:	e009      	b.n	8003e00 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003dec:	f7fc fd50 	bl	8000890 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dfa:	d901      	bls.n	8003e00 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e007      	b.n	8003e10 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f003 0320 	and.w	r3, r3, #32
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0ee      	beq.n	8003dec <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	0001ff5f 	.word	0x0001ff5f

08003e1c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d122      	bne.n	8003e80 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e48:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e4a:	f7fc fd21 	bl	8000890 <HAL_GetTick>
 8003e4e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e50:	e00c      	b.n	8003e6c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003e52:	f7fc fd1d 	bl	8000890 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e60:	d904      	bls.n	8003e6c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2204      	movs	r2, #4
 8003e66:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d102      	bne.n	8003e80 <RTC_EnterInitMode+0x64>
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d1e8      	bne.n	8003e52 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff ff8b 	bl	8003dd0 <HAL_RTC_WaitForSynchro>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d004      	beq.n	8003eca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e040      	b.n	8003f68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fc fb8c 	bl	8000614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2224      	movs	r2, #36	; 0x24
 8003f00:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 fb50 	bl	80045c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f979 	bl	8004218 <UART_SetConfig>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e01b      	b.n	8003f68 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 fbcf 	bl	8004704 <UART_CheckIdleState>
 8003f66:	4603      	mov	r3, r0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	; 0x28
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d178      	bne.n	800407a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_UART_Transmit+0x24>
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e071      	b.n	800407c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2221      	movs	r2, #33	; 0x21
 8003fa4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fa6:	f7fc fc73 	bl	8000890 <HAL_GetTick>
 8003faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	88fa      	ldrh	r2, [r7, #6]
 8003fb0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
 8003fb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc4:	d108      	bne.n	8003fd8 <HAL_UART_Transmit+0x68>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d104      	bne.n	8003fd8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	61bb      	str	r3, [r7, #24]
 8003fd6:	e003      	b.n	8003fe0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fe0:	e030      	b.n	8004044 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 fc31 	bl	8004854 <UART_WaitOnFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d004      	beq.n	8004002 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e03c      	b.n	800407c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	881a      	ldrh	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004014:	b292      	uxth	r2, r2
 8004016:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	3302      	adds	r3, #2
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	e008      	b.n	8004032 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	781a      	ldrb	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	b292      	uxth	r2, r2
 800402a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	3301      	adds	r3, #1
 8004030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004038:	b29b      	uxth	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1c8      	bne.n	8003fe2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2200      	movs	r2, #0
 8004058:	2140      	movs	r1, #64	; 0x40
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 fbfa 	bl	8004854 <UART_WaitOnFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e005      	b.n	800407c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	e000      	b.n	800407c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800407a:	2302      	movs	r3, #2
  }
}
 800407c:	4618      	mov	r0, r3
 800407e:	3720      	adds	r7, #32
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	4613      	mov	r3, r2
 8004092:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800409a:	2b20      	cmp	r3, #32
 800409c:	f040 80b6 	bne.w	800420c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <HAL_UART_Receive+0x28>
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0ae      	b.n	800420e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2222      	movs	r2, #34	; 0x22
 80040bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040c6:	f7fc fbe3 	bl	8000890 <HAL_GetTick>
 80040ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	88fa      	ldrh	r2, [r7, #6]
 80040d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	88fa      	ldrh	r2, [r7, #6]
 80040d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e4:	d10e      	bne.n	8004104 <HAL_UART_Receive+0x80>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d105      	bne.n	80040fa <HAL_UART_Receive+0x76>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040f8:	e02d      	b.n	8004156 <HAL_UART_Receive+0xd2>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	22ff      	movs	r2, #255	; 0xff
 80040fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004102:	e028      	b.n	8004156 <HAL_UART_Receive+0xd2>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10d      	bne.n	8004128 <HAL_UART_Receive+0xa4>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d104      	bne.n	800411e <HAL_UART_Receive+0x9a>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	22ff      	movs	r2, #255	; 0xff
 8004118:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800411c:	e01b      	b.n	8004156 <HAL_UART_Receive+0xd2>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	227f      	movs	r2, #127	; 0x7f
 8004122:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004126:	e016      	b.n	8004156 <HAL_UART_Receive+0xd2>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004130:	d10d      	bne.n	800414e <HAL_UART_Receive+0xca>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d104      	bne.n	8004144 <HAL_UART_Receive+0xc0>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	227f      	movs	r2, #127	; 0x7f
 800413e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004142:	e008      	b.n	8004156 <HAL_UART_Receive+0xd2>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	223f      	movs	r2, #63	; 0x3f
 8004148:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800414c:	e003      	b.n	8004156 <HAL_UART_Receive+0xd2>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800415c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004166:	d108      	bne.n	800417a <HAL_UART_Receive+0xf6>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d104      	bne.n	800417a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	e003      	b.n	8004182 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800417e:	2300      	movs	r3, #0
 8004180:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004182:	e037      	b.n	80041f4 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	2200      	movs	r2, #0
 800418c:	2120      	movs	r1, #32
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fb60 	bl	8004854 <UART_WaitOnFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d005      	beq.n	80041a6 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2220      	movs	r2, #32
 800419e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e033      	b.n	800420e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10c      	bne.n	80041c6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	8a7b      	ldrh	r3, [r7, #18]
 80041b6:	4013      	ands	r3, r2
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	3302      	adds	r3, #2
 80041c2:	61bb      	str	r3, [r7, #24]
 80041c4:	e00d      	b.n	80041e2 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	8a7b      	ldrh	r3, [r7, #18]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	4013      	ands	r3, r2
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	3301      	adds	r3, #1
 80041e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1c1      	bne.n	8004184 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	e000      	b.n	800420e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800420c:	2302      	movs	r3, #2
  }
}
 800420e:	4618      	mov	r0, r3
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	431a      	orrs	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b92      	ldr	r3, [pc, #584]	; (800448c <UART_SetConfig+0x274>)
 8004244:	4013      	ands	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	6979      	ldr	r1, [r7, #20]
 800424c:	430b      	orrs	r3, r1
 800424e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	430a      	orrs	r2, r1
 8004288:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a80      	ldr	r2, [pc, #512]	; (8004490 <UART_SetConfig+0x278>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d120      	bne.n	80042d6 <UART_SetConfig+0xbe>
 8004294:	4b7f      	ldr	r3, [pc, #508]	; (8004494 <UART_SetConfig+0x27c>)
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	2b03      	cmp	r3, #3
 800429e:	d817      	bhi.n	80042d0 <UART_SetConfig+0xb8>
 80042a0:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <UART_SetConfig+0x90>)
 80042a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a6:	bf00      	nop
 80042a8:	080042b9 	.word	0x080042b9
 80042ac:	080042c5 	.word	0x080042c5
 80042b0:	080042cb 	.word	0x080042cb
 80042b4:	080042bf 	.word	0x080042bf
 80042b8:	2301      	movs	r3, #1
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e0b5      	b.n	800442a <UART_SetConfig+0x212>
 80042be:	2302      	movs	r3, #2
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e0b2      	b.n	800442a <UART_SetConfig+0x212>
 80042c4:	2304      	movs	r3, #4
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e0af      	b.n	800442a <UART_SetConfig+0x212>
 80042ca:	2308      	movs	r3, #8
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e0ac      	b.n	800442a <UART_SetConfig+0x212>
 80042d0:	2310      	movs	r3, #16
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e0a9      	b.n	800442a <UART_SetConfig+0x212>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a6f      	ldr	r2, [pc, #444]	; (8004498 <UART_SetConfig+0x280>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d124      	bne.n	800432a <UART_SetConfig+0x112>
 80042e0:	4b6c      	ldr	r3, [pc, #432]	; (8004494 <UART_SetConfig+0x27c>)
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042ec:	d011      	beq.n	8004312 <UART_SetConfig+0xfa>
 80042ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042f2:	d817      	bhi.n	8004324 <UART_SetConfig+0x10c>
 80042f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042f8:	d011      	beq.n	800431e <UART_SetConfig+0x106>
 80042fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042fe:	d811      	bhi.n	8004324 <UART_SetConfig+0x10c>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <UART_SetConfig+0xf4>
 8004304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004308:	d006      	beq.n	8004318 <UART_SetConfig+0x100>
 800430a:	e00b      	b.n	8004324 <UART_SetConfig+0x10c>
 800430c:	2300      	movs	r3, #0
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e08b      	b.n	800442a <UART_SetConfig+0x212>
 8004312:	2302      	movs	r3, #2
 8004314:	77fb      	strb	r3, [r7, #31]
 8004316:	e088      	b.n	800442a <UART_SetConfig+0x212>
 8004318:	2304      	movs	r3, #4
 800431a:	77fb      	strb	r3, [r7, #31]
 800431c:	e085      	b.n	800442a <UART_SetConfig+0x212>
 800431e:	2308      	movs	r3, #8
 8004320:	77fb      	strb	r3, [r7, #31]
 8004322:	e082      	b.n	800442a <UART_SetConfig+0x212>
 8004324:	2310      	movs	r3, #16
 8004326:	77fb      	strb	r3, [r7, #31]
 8004328:	e07f      	b.n	800442a <UART_SetConfig+0x212>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a5b      	ldr	r2, [pc, #364]	; (800449c <UART_SetConfig+0x284>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d124      	bne.n	800437e <UART_SetConfig+0x166>
 8004334:	4b57      	ldr	r3, [pc, #348]	; (8004494 <UART_SetConfig+0x27c>)
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800433c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004340:	d011      	beq.n	8004366 <UART_SetConfig+0x14e>
 8004342:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004346:	d817      	bhi.n	8004378 <UART_SetConfig+0x160>
 8004348:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800434c:	d011      	beq.n	8004372 <UART_SetConfig+0x15a>
 800434e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004352:	d811      	bhi.n	8004378 <UART_SetConfig+0x160>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <UART_SetConfig+0x148>
 8004358:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800435c:	d006      	beq.n	800436c <UART_SetConfig+0x154>
 800435e:	e00b      	b.n	8004378 <UART_SetConfig+0x160>
 8004360:	2300      	movs	r3, #0
 8004362:	77fb      	strb	r3, [r7, #31]
 8004364:	e061      	b.n	800442a <UART_SetConfig+0x212>
 8004366:	2302      	movs	r3, #2
 8004368:	77fb      	strb	r3, [r7, #31]
 800436a:	e05e      	b.n	800442a <UART_SetConfig+0x212>
 800436c:	2304      	movs	r3, #4
 800436e:	77fb      	strb	r3, [r7, #31]
 8004370:	e05b      	b.n	800442a <UART_SetConfig+0x212>
 8004372:	2308      	movs	r3, #8
 8004374:	77fb      	strb	r3, [r7, #31]
 8004376:	e058      	b.n	800442a <UART_SetConfig+0x212>
 8004378:	2310      	movs	r3, #16
 800437a:	77fb      	strb	r3, [r7, #31]
 800437c:	e055      	b.n	800442a <UART_SetConfig+0x212>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a47      	ldr	r2, [pc, #284]	; (80044a0 <UART_SetConfig+0x288>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d124      	bne.n	80043d2 <UART_SetConfig+0x1ba>
 8004388:	4b42      	ldr	r3, [pc, #264]	; (8004494 <UART_SetConfig+0x27c>)
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004390:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004394:	d011      	beq.n	80043ba <UART_SetConfig+0x1a2>
 8004396:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800439a:	d817      	bhi.n	80043cc <UART_SetConfig+0x1b4>
 800439c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043a0:	d011      	beq.n	80043c6 <UART_SetConfig+0x1ae>
 80043a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043a6:	d811      	bhi.n	80043cc <UART_SetConfig+0x1b4>
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <UART_SetConfig+0x19c>
 80043ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b0:	d006      	beq.n	80043c0 <UART_SetConfig+0x1a8>
 80043b2:	e00b      	b.n	80043cc <UART_SetConfig+0x1b4>
 80043b4:	2300      	movs	r3, #0
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e037      	b.n	800442a <UART_SetConfig+0x212>
 80043ba:	2302      	movs	r3, #2
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e034      	b.n	800442a <UART_SetConfig+0x212>
 80043c0:	2304      	movs	r3, #4
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e031      	b.n	800442a <UART_SetConfig+0x212>
 80043c6:	2308      	movs	r3, #8
 80043c8:	77fb      	strb	r3, [r7, #31]
 80043ca:	e02e      	b.n	800442a <UART_SetConfig+0x212>
 80043cc:	2310      	movs	r3, #16
 80043ce:	77fb      	strb	r3, [r7, #31]
 80043d0:	e02b      	b.n	800442a <UART_SetConfig+0x212>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a33      	ldr	r2, [pc, #204]	; (80044a4 <UART_SetConfig+0x28c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d124      	bne.n	8004426 <UART_SetConfig+0x20e>
 80043dc:	4b2d      	ldr	r3, [pc, #180]	; (8004494 <UART_SetConfig+0x27c>)
 80043de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80043e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043e8:	d011      	beq.n	800440e <UART_SetConfig+0x1f6>
 80043ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043ee:	d817      	bhi.n	8004420 <UART_SetConfig+0x208>
 80043f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043f4:	d011      	beq.n	800441a <UART_SetConfig+0x202>
 80043f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043fa:	d811      	bhi.n	8004420 <UART_SetConfig+0x208>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <UART_SetConfig+0x1f0>
 8004400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004404:	d006      	beq.n	8004414 <UART_SetConfig+0x1fc>
 8004406:	e00b      	b.n	8004420 <UART_SetConfig+0x208>
 8004408:	2300      	movs	r3, #0
 800440a:	77fb      	strb	r3, [r7, #31]
 800440c:	e00d      	b.n	800442a <UART_SetConfig+0x212>
 800440e:	2302      	movs	r3, #2
 8004410:	77fb      	strb	r3, [r7, #31]
 8004412:	e00a      	b.n	800442a <UART_SetConfig+0x212>
 8004414:	2304      	movs	r3, #4
 8004416:	77fb      	strb	r3, [r7, #31]
 8004418:	e007      	b.n	800442a <UART_SetConfig+0x212>
 800441a:	2308      	movs	r3, #8
 800441c:	77fb      	strb	r3, [r7, #31]
 800441e:	e004      	b.n	800442a <UART_SetConfig+0x212>
 8004420:	2310      	movs	r3, #16
 8004422:	77fb      	strb	r3, [r7, #31]
 8004424:	e001      	b.n	800442a <UART_SetConfig+0x212>
 8004426:	2310      	movs	r3, #16
 8004428:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004432:	d16b      	bne.n	800450c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004434:	7ffb      	ldrb	r3, [r7, #31]
 8004436:	2b08      	cmp	r3, #8
 8004438:	d838      	bhi.n	80044ac <UART_SetConfig+0x294>
 800443a:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <UART_SetConfig+0x228>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	08004465 	.word	0x08004465
 8004444:	0800446d 	.word	0x0800446d
 8004448:	08004475 	.word	0x08004475
 800444c:	080044ad 	.word	0x080044ad
 8004450:	0800447b 	.word	0x0800447b
 8004454:	080044ad 	.word	0x080044ad
 8004458:	080044ad 	.word	0x080044ad
 800445c:	080044ad 	.word	0x080044ad
 8004460:	08004483 	.word	0x08004483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004464:	f7ff f9ce 	bl	8003804 <HAL_RCC_GetPCLK1Freq>
 8004468:	61b8      	str	r0, [r7, #24]
        break;
 800446a:	e024      	b.n	80044b6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800446c:	f7ff f9ec 	bl	8003848 <HAL_RCC_GetPCLK2Freq>
 8004470:	61b8      	str	r0, [r7, #24]
        break;
 8004472:	e020      	b.n	80044b6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <UART_SetConfig+0x290>)
 8004476:	61bb      	str	r3, [r7, #24]
        break;
 8004478:	e01d      	b.n	80044b6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447a:	f7ff f963 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 800447e:	61b8      	str	r0, [r7, #24]
        break;
 8004480:	e019      	b.n	80044b6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004486:	61bb      	str	r3, [r7, #24]
        break;
 8004488:	e015      	b.n	80044b6 <UART_SetConfig+0x29e>
 800448a:	bf00      	nop
 800448c:	efff69f3 	.word	0xefff69f3
 8004490:	40013800 	.word	0x40013800
 8004494:	40021000 	.word	0x40021000
 8004498:	40004400 	.word	0x40004400
 800449c:	40004800 	.word	0x40004800
 80044a0:	40004c00 	.word	0x40004c00
 80044a4:	40005000 	.word	0x40005000
 80044a8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	77bb      	strb	r3, [r7, #30]
        break;
 80044b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d073      	beq.n	80045a4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	005a      	lsls	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	441a      	add	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	2b0f      	cmp	r3, #15
 80044d6:	d916      	bls.n	8004506 <UART_SetConfig+0x2ee>
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044de:	d212      	bcs.n	8004506 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	f023 030f 	bic.w	r3, r3, #15
 80044e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	085b      	lsrs	r3, r3, #1
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	89fb      	ldrh	r3, [r7, #14]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	89fa      	ldrh	r2, [r7, #14]
 8004502:	60da      	str	r2, [r3, #12]
 8004504:	e04e      	b.n	80045a4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	77bb      	strb	r3, [r7, #30]
 800450a:	e04b      	b.n	80045a4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800450c:	7ffb      	ldrb	r3, [r7, #31]
 800450e:	2b08      	cmp	r3, #8
 8004510:	d827      	bhi.n	8004562 <UART_SetConfig+0x34a>
 8004512:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <UART_SetConfig+0x300>)
 8004514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004518:	0800453d 	.word	0x0800453d
 800451c:	08004545 	.word	0x08004545
 8004520:	0800454d 	.word	0x0800454d
 8004524:	08004563 	.word	0x08004563
 8004528:	08004553 	.word	0x08004553
 800452c:	08004563 	.word	0x08004563
 8004530:	08004563 	.word	0x08004563
 8004534:	08004563 	.word	0x08004563
 8004538:	0800455b 	.word	0x0800455b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800453c:	f7ff f962 	bl	8003804 <HAL_RCC_GetPCLK1Freq>
 8004540:	61b8      	str	r0, [r7, #24]
        break;
 8004542:	e013      	b.n	800456c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004544:	f7ff f980 	bl	8003848 <HAL_RCC_GetPCLK2Freq>
 8004548:	61b8      	str	r0, [r7, #24]
        break;
 800454a:	e00f      	b.n	800456c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800454c:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <UART_SetConfig+0x3a4>)
 800454e:	61bb      	str	r3, [r7, #24]
        break;
 8004550:	e00c      	b.n	800456c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004552:	f7ff f8f7 	bl	8003744 <HAL_RCC_GetSysClockFreq>
 8004556:	61b8      	str	r0, [r7, #24]
        break;
 8004558:	e008      	b.n	800456c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800455e:	61bb      	str	r3, [r7, #24]
        break;
 8004560:	e004      	b.n	800456c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	77bb      	strb	r3, [r7, #30]
        break;
 800456a:	bf00      	nop
    }

    if (pclk != 0U)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d018      	beq.n	80045a4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	085a      	lsrs	r2, r3, #1
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	441a      	add	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	fbb2 f3f3 	udiv	r3, r2, r3
 8004584:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b0f      	cmp	r3, #15
 800458a:	d909      	bls.n	80045a0 <UART_SetConfig+0x388>
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004592:	d205      	bcs.n	80045a0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	b29a      	uxth	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60da      	str	r2, [r3, #12]
 800459e:	e001      	b.n	80045a4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80045b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	007a1200 	.word	0x007a1200

080045c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01a      	beq.n	80046d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046be:	d10a      	bne.n	80046d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	605a      	str	r2, [r3, #4]
  }
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b098      	sub	sp, #96	; 0x60
 8004708:	af02      	add	r7, sp, #8
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004714:	f7fc f8bc 	bl	8000890 <HAL_GetTick>
 8004718:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b08      	cmp	r3, #8
 8004726:	d12e      	bne.n	8004786 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004730:	2200      	movs	r2, #0
 8004732:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f88c 	bl	8004854 <UART_WaitOnFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d021      	beq.n	8004786 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474a:	e853 3f00 	ldrex	r3, [r3]
 800474e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004756:	653b      	str	r3, [r7, #80]	; 0x50
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	461a      	mov	r2, r3
 800475e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004760:	647b      	str	r3, [r7, #68]	; 0x44
 8004762:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004764:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004768:	e841 2300 	strex	r3, r2, [r1]
 800476c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800476e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e6      	bne.n	8004742 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2220      	movs	r2, #32
 8004778:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e062      	b.n	800484c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b04      	cmp	r3, #4
 8004792:	d149      	bne.n	8004828 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800479c:	2200      	movs	r2, #0
 800479e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f856 	bl	8004854 <UART_WaitOnFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d03c      	beq.n	8004828 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	e853 3f00 	ldrex	r3, [r3]
 80047ba:	623b      	str	r3, [r7, #32]
   return(result);
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047cc:	633b      	str	r3, [r7, #48]	; 0x30
 80047ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d4:	e841 2300 	strex	r3, r2, [r1]
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e6      	bne.n	80047ae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3308      	adds	r3, #8
 80047e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3308      	adds	r3, #8
 80047fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004800:	61fa      	str	r2, [r7, #28]
 8004802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	69b9      	ldr	r1, [r7, #24]
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	617b      	str	r3, [r7, #20]
   return(result);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e5      	bne.n	80047e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e011      	b.n	800484c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3758      	adds	r7, #88	; 0x58
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	4613      	mov	r3, r2
 8004862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004864:	e04f      	b.n	8004906 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486c:	d04b      	beq.n	8004906 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486e:	f7fc f80f 	bl	8000890 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	429a      	cmp	r2, r3
 800487c:	d302      	bcc.n	8004884 <UART_WaitOnFlagUntilTimeout+0x30>
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e04e      	b.n	8004926 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d037      	beq.n	8004906 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b80      	cmp	r3, #128	; 0x80
 800489a:	d034      	beq.n	8004906 <UART_WaitOnFlagUntilTimeout+0xb2>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b40      	cmp	r3, #64	; 0x40
 80048a0:	d031      	beq.n	8004906 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d110      	bne.n	80048d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2208      	movs	r2, #8
 80048b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f000 f838 	bl	800492e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2208      	movs	r2, #8
 80048c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e029      	b.n	8004926 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e0:	d111      	bne.n	8004906 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f81e 	bl	800492e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e00f      	b.n	8004926 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4013      	ands	r3, r2
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	429a      	cmp	r2, r3
 8004914:	bf0c      	ite	eq
 8004916:	2301      	moveq	r3, #1
 8004918:	2300      	movne	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	461a      	mov	r2, r3
 800491e:	79fb      	ldrb	r3, [r7, #7]
 8004920:	429a      	cmp	r2, r3
 8004922:	d0a0      	beq.n	8004866 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800492e:	b480      	push	{r7}
 8004930:	b095      	sub	sp, #84	; 0x54
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493e:	e853 3f00 	ldrex	r3, [r3]
 8004942:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800494a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	461a      	mov	r2, r3
 8004952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004954:	643b      	str	r3, [r7, #64]	; 0x40
 8004956:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800495a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800495c:	e841 2300 	strex	r3, r2, [r1]
 8004960:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004964:	2b00      	cmp	r3, #0
 8004966:	d1e6      	bne.n	8004936 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3308      	adds	r3, #8
 800496e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	61fb      	str	r3, [r7, #28]
   return(result);
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f023 0301 	bic.w	r3, r3, #1
 800497e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3308      	adds	r3, #8
 8004986:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004988:	62fa      	str	r2, [r7, #44]	; 0x2c
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800498e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e5      	bne.n	8004968 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d118      	bne.n	80049d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f023 0310 	bic.w	r3, r3, #16
 80049b8:	647b      	str	r3, [r7, #68]	; 0x44
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6979      	ldr	r1, [r7, #20]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	613b      	str	r3, [r7, #16]
   return(result);
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e6      	bne.n	80049a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2220      	movs	r2, #32
 80049da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80049ea:	bf00      	nop
 80049ec:	3754      	adds	r7, #84	; 0x54
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80049fe:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004a02:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	4013      	ands	r3, r2
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	1d3b      	adds	r3, r7, #4
 8004a36:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b0c2      	sub	sp, #264	; 0x108
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a76:	6018      	str	r0, [r3, #0]
 8004a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a80:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	785b      	ldrb	r3, [r3, #1]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	f040 86b7 	bne.w	8005802 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d908      	bls.n	8004ac2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004ac0:	e007      	b.n	8004ad2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	7b1b      	ldrb	r3, [r3, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d13a      	bne.n	8004b58 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6959      	ldr	r1, [r3, #20]
 8004aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	88da      	ldrh	r2, [r3, #6]
 8004afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004b04:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004b08:	6800      	ldr	r0, [r0, #0]
 8004b0a:	f001 fb83 	bl	8006214 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	4413      	add	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	00da      	lsls	r2, r3, #3
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	4413      	add	r3, r2
 8004b44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	801a      	strh	r2, [r3, #0]
 8004b54:	f000 be1f 	b.w	8005796 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	78db      	ldrb	r3, [r3, #3]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	f040 8462 	bne.w	800542e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6a1a      	ldr	r2, [r3, #32]
 8004b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	f240 83df 	bls.w	8005346 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	441a      	add	r2, r3
 8004bcc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004be8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6a1a      	ldr	r2, [r3, #32]
 8004bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bf4:	1ad2      	subs	r2, r2, r3
 8004bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 81c7 	beq.w	8004fb8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	633b      	str	r3, [r7, #48]	; 0x30
 8004c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	785b      	ldrb	r3, [r3, #1]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d177      	bne.n	8004d36 <USB_EPStartXfer+0x2ce>
 8004c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	461a      	mov	r2, r3
 8004c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c66:	4413      	add	r3, r2
 8004c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	00da      	lsls	r2, r3, #3
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	801a      	strh	r2, [r3, #0]
 8004c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <USB_EPStartXfer+0x248>
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	801a      	strh	r2, [r3, #0]
 8004cae:	e067      	b.n	8004d80 <USB_EPStartXfer+0x318>
 8004cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cb4:	2b3e      	cmp	r3, #62	; 0x3e
 8004cb6:	d81c      	bhi.n	8004cf2 <USB_EPStartXfer+0x28a>
 8004cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cbc:	085b      	lsrs	r3, r3, #1
 8004cbe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d004      	beq.n	8004cd8 <USB_EPStartXfer+0x270>
 8004cce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	029b      	lsls	r3, r3, #10
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	801a      	strh	r2, [r3, #0]
 8004cf0:	e046      	b.n	8004d80 <USB_EPStartXfer+0x318>
 8004cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d104      	bne.n	8004d12 <USB_EPStartXfer+0x2aa>
 8004d08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	029b      	lsls	r3, r3, #10
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	4313      	orrs	r3, r2
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d32:	801a      	strh	r2, [r3, #0]
 8004d34:	e024      	b.n	8004d80 <USB_EPStartXfer+0x318>
 8004d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	785b      	ldrb	r3, [r3, #1]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d11c      	bne.n	8004d80 <USB_EPStartXfer+0x318>
 8004d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	4413      	add	r3, r2
 8004d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	00da      	lsls	r2, r3, #3
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	4413      	add	r3, r2
 8004d70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	895b      	ldrh	r3, [r3, #10]
 8004d8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6959      	ldr	r1, [r3, #20]
 8004d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004da6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004daa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004dae:	6800      	ldr	r0, [r0, #0]
 8004db0:	f001 fa30 	bl	8006214 <USB_WritePMA>
            ep->xfer_buff += len;
 8004db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695a      	ldr	r2, [r3, #20]
 8004dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dc4:	441a      	add	r2, r3
 8004dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6a1a      	ldr	r2, [r3, #32]
 8004dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d90f      	bls.n	8004e0e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6a1a      	ldr	r2, [r3, #32]
 8004dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dfe:	1ad2      	subs	r2, r2, r3
 8004e00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	621a      	str	r2, [r3, #32]
 8004e0c:	e00e      	b.n	8004e2c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	785b      	ldrb	r3, [r3, #1]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d177      	bne.n	8004f2c <USB_EPStartXfer+0x4c4>
 8004e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	61bb      	str	r3, [r7, #24]
 8004e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	461a      	mov	r2, r3
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	00da      	lsls	r2, r3, #3
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	4413      	add	r3, r2
 8004e72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	881b      	ldrh	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	801a      	strh	r2, [r3, #0]
 8004e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <USB_EPStartXfer+0x43e>
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	801a      	strh	r2, [r3, #0]
 8004ea4:	e06d      	b.n	8004f82 <USB_EPStartXfer+0x51a>
 8004ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eaa:	2b3e      	cmp	r3, #62	; 0x3e
 8004eac:	d81c      	bhi.n	8004ee8 <USB_EPStartXfer+0x480>
 8004eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eb2:	085b      	lsrs	r3, r3, #1
 8004eb4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d004      	beq.n	8004ece <USB_EPStartXfer+0x466>
 8004ec4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec8:	3301      	adds	r3, #1
 8004eca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	029b      	lsls	r3, r3, #10
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	801a      	strh	r2, [r3, #0]
 8004ee6:	e04c      	b.n	8004f82 <USB_EPStartXfer+0x51a>
 8004ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d104      	bne.n	8004f08 <USB_EPStartXfer+0x4a0>
 8004efe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f02:	3b01      	subs	r3, #1
 8004f04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	029b      	lsls	r3, r3, #10
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	801a      	strh	r2, [r3, #0]
 8004f2a:	e02a      	b.n	8004f82 <USB_EPStartXfer+0x51a>
 8004f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d122      	bne.n	8004f82 <USB_EPStartXfer+0x51a>
 8004f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	623b      	str	r3, [r7, #32]
 8004f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	461a      	mov	r2, r3
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	623b      	str	r3, [r7, #32]
 8004f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	00da      	lsls	r2, r3, #3
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	4413      	add	r3, r2
 8004f72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	891b      	ldrh	r3, [r3, #8]
 8004f8e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6959      	ldr	r1, [r3, #20]
 8004f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004fa8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004fac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004fb0:	6800      	ldr	r0, [r0, #0]
 8004fb2:	f001 f92f 	bl	8006214 <USB_WritePMA>
 8004fb6:	e3ee      	b.n	8005796 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d177      	bne.n	80050b8 <USB_EPStartXfer+0x650>
 8004fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe8:	4413      	add	r3, r2
 8004fea:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	00da      	lsls	r2, r3, #3
 8004ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005002:	647b      	str	r3, [r7, #68]	; 0x44
 8005004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29b      	uxth	r3, r3
 800500a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800500e:	b29a      	uxth	r2, r3
 8005010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005012:	801a      	strh	r2, [r3, #0]
 8005014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10a      	bne.n	8005032 <USB_EPStartXfer+0x5ca>
 800501c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	b29b      	uxth	r3, r3
 8005022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800502a:	b29a      	uxth	r2, r3
 800502c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800502e:	801a      	strh	r2, [r3, #0]
 8005030:	e06d      	b.n	800510e <USB_EPStartXfer+0x6a6>
 8005032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005036:	2b3e      	cmp	r3, #62	; 0x3e
 8005038:	d81c      	bhi.n	8005074 <USB_EPStartXfer+0x60c>
 800503a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <USB_EPStartXfer+0x5f2>
 8005050:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005054:	3301      	adds	r3, #1
 8005056:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800505a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29a      	uxth	r2, r3
 8005060:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005064:	b29b      	uxth	r3, r3
 8005066:	029b      	lsls	r3, r3, #10
 8005068:	b29b      	uxth	r3, r3
 800506a:	4313      	orrs	r3, r2
 800506c:	b29a      	uxth	r2, r3
 800506e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005070:	801a      	strh	r2, [r3, #0]
 8005072:	e04c      	b.n	800510e <USB_EPStartXfer+0x6a6>
 8005074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800507e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	2b00      	cmp	r3, #0
 8005088:	d104      	bne.n	8005094 <USB_EPStartXfer+0x62c>
 800508a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800508e:	3b01      	subs	r3, #1
 8005090:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005096:	881b      	ldrh	r3, [r3, #0]
 8005098:	b29a      	uxth	r2, r3
 800509a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800509e:	b29b      	uxth	r3, r3
 80050a0:	029b      	lsls	r3, r3, #10
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	4313      	orrs	r3, r2
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b4:	801a      	strh	r2, [r3, #0]
 80050b6:	e02a      	b.n	800510e <USB_EPStartXfer+0x6a6>
 80050b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	785b      	ldrb	r3, [r3, #1]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d122      	bne.n	800510e <USB_EPStartXfer+0x6a6>
 80050c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	653b      	str	r3, [r7, #80]	; 0x50
 80050d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	461a      	mov	r2, r3
 80050e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050e8:	4413      	add	r3, r2
 80050ea:	653b      	str	r3, [r7, #80]	; 0x50
 80050ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	00da      	lsls	r2, r3, #3
 80050fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050fc:	4413      	add	r3, r2
 80050fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005108:	b29a      	uxth	r2, r3
 800510a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800510c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800510e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	891b      	ldrh	r3, [r3, #8]
 800511a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800511e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6959      	ldr	r1, [r3, #20]
 800512a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512e:	b29b      	uxth	r3, r3
 8005130:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005134:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005138:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800513c:	6800      	ldr	r0, [r0, #0]
 800513e:	f001 f869 	bl	8006214 <USB_WritePMA>
            ep->xfer_buff += len;
 8005142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695a      	ldr	r2, [r3, #20]
 800514e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005152:	441a      	add	r2, r3
 8005154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6a1a      	ldr	r2, [r3, #32]
 800516c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	429a      	cmp	r2, r3
 800517a:	d90f      	bls.n	800519c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800517c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6a1a      	ldr	r2, [r3, #32]
 8005188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800518c:	1ad2      	subs	r2, r2, r3
 800518e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	621a      	str	r2, [r3, #32]
 800519a:	e00e      	b.n	80051ba <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800519c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80051ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2200      	movs	r2, #0
 80051b8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	643b      	str	r3, [r7, #64]	; 0x40
 80051c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	785b      	ldrb	r3, [r3, #1]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d177      	bne.n	80052c6 <USB_EPStartXfer+0x85e>
 80051d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80051e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f6:	4413      	add	r3, r2
 80051f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80051fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	00da      	lsls	r2, r3, #3
 8005208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520a:	4413      	add	r3, r2
 800520c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
 8005212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	b29b      	uxth	r3, r3
 8005218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800521c:	b29a      	uxth	r2, r3
 800521e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10a      	bne.n	8005240 <USB_EPStartXfer+0x7d8>
 800522a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	b29b      	uxth	r3, r3
 8005230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005238:	b29a      	uxth	r2, r3
 800523a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800523c:	801a      	strh	r2, [r3, #0]
 800523e:	e067      	b.n	8005310 <USB_EPStartXfer+0x8a8>
 8005240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005244:	2b3e      	cmp	r3, #62	; 0x3e
 8005246:	d81c      	bhi.n	8005282 <USB_EPStartXfer+0x81a>
 8005248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d004      	beq.n	8005268 <USB_EPStartXfer+0x800>
 800525e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005262:	3301      	adds	r3, #1
 8005264:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	b29a      	uxth	r2, r3
 800526e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005272:	b29b      	uxth	r3, r3
 8005274:	029b      	lsls	r3, r3, #10
 8005276:	b29b      	uxth	r3, r3
 8005278:	4313      	orrs	r3, r2
 800527a:	b29a      	uxth	r2, r3
 800527c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	e046      	b.n	8005310 <USB_EPStartXfer+0x8a8>
 8005282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800528c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005290:	f003 031f 	and.w	r3, r3, #31
 8005294:	2b00      	cmp	r3, #0
 8005296:	d104      	bne.n	80052a2 <USB_EPStartXfer+0x83a>
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529c:	3b01      	subs	r3, #1
 800529e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80052a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	029b      	lsls	r3, r3, #10
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	4313      	orrs	r3, r2
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052be:	b29a      	uxth	r2, r3
 80052c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c2:	801a      	strh	r2, [r3, #0]
 80052c4:	e024      	b.n	8005310 <USB_EPStartXfer+0x8a8>
 80052c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	785b      	ldrb	r3, [r3, #1]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d11c      	bne.n	8005310 <USB_EPStartXfer+0x8a8>
 80052d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	461a      	mov	r2, r3
 80052e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ea:	4413      	add	r3, r2
 80052ec:	643b      	str	r3, [r7, #64]	; 0x40
 80052ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	00da      	lsls	r2, r3, #3
 80052fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052fe:	4413      	add	r3, r2
 8005300:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005304:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800530a:	b29a      	uxth	r2, r3
 800530c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	895b      	ldrh	r3, [r3, #10]
 800531c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6959      	ldr	r1, [r3, #20]
 800532c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005330:	b29b      	uxth	r3, r3
 8005332:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005336:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800533a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800533e:	6800      	ldr	r0, [r0, #0]
 8005340:	f000 ff68 	bl	8006214 <USB_WritePMA>
 8005344:	e227      	b.n	8005796 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800534a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800535a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800538e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	441a      	add	r2, r3
 800539a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800539e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80053b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	461a      	mov	r2, r3
 80053d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d2:	4413      	add	r3, r2
 80053d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	00da      	lsls	r2, r3, #3
 80053e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053e6:	4413      	add	r3, r2
 80053e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80053ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	891b      	ldrh	r3, [r3, #8]
 8005404:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800540c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6959      	ldr	r1, [r3, #20]
 8005414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005418:	b29b      	uxth	r3, r3
 800541a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800541e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005422:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005426:	6800      	ldr	r0, [r0, #0]
 8005428:	f000 fef4 	bl	8006214 <USB_WritePMA>
 800542c:	e1b3      	b.n	8005796 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800542e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6a1a      	ldr	r2, [r3, #32]
 800543a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800544c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005450:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800545a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 80c6 	beq.w	8005600 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005478:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	673b      	str	r3, [r7, #112]	; 0x70
 8005480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	785b      	ldrb	r3, [r3, #1]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d177      	bne.n	8005580 <USB_EPStartXfer+0xb18>
 8005490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	66bb      	str	r3, [r7, #104]	; 0x68
 800549c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	461a      	mov	r2, r3
 80054ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054b0:	4413      	add	r3, r2
 80054b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80054b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	00da      	lsls	r2, r3, #3
 80054c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054c4:	4413      	add	r3, r2
 80054c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054ca:	667b      	str	r3, [r7, #100]	; 0x64
 80054cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054da:	801a      	strh	r2, [r3, #0]
 80054dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <USB_EPStartXfer+0xa92>
 80054e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	e067      	b.n	80055ca <USB_EPStartXfer+0xb62>
 80054fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054fe:	2b3e      	cmp	r3, #62	; 0x3e
 8005500:	d81c      	bhi.n	800553c <USB_EPStartXfer+0xad4>
 8005502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800550c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d004      	beq.n	8005522 <USB_EPStartXfer+0xaba>
 8005518:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800551c:	3301      	adds	r3, #1
 800551e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005522:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29a      	uxth	r2, r3
 8005528:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800552c:	b29b      	uxth	r3, r3
 800552e:	029b      	lsls	r3, r3, #10
 8005530:	b29b      	uxth	r3, r3
 8005532:	4313      	orrs	r3, r2
 8005534:	b29a      	uxth	r2, r3
 8005536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005538:	801a      	strh	r2, [r3, #0]
 800553a:	e046      	b.n	80055ca <USB_EPStartXfer+0xb62>
 800553c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <USB_EPStartXfer+0xaf4>
 8005552:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005556:	3b01      	subs	r3, #1
 8005558:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800555c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29a      	uxth	r2, r3
 8005562:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005566:	b29b      	uxth	r3, r3
 8005568:	029b      	lsls	r3, r3, #10
 800556a:	b29b      	uxth	r3, r3
 800556c:	4313      	orrs	r3, r2
 800556e:	b29b      	uxth	r3, r3
 8005570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005578:	b29a      	uxth	r2, r3
 800557a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	e024      	b.n	80055ca <USB_EPStartXfer+0xb62>
 8005580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005584:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	785b      	ldrb	r3, [r3, #1]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d11c      	bne.n	80055ca <USB_EPStartXfer+0xb62>
 8005590:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005594:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800559e:	b29b      	uxth	r3, r3
 80055a0:	461a      	mov	r2, r3
 80055a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055a4:	4413      	add	r3, r2
 80055a6:	673b      	str	r3, [r7, #112]	; 0x70
 80055a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	00da      	lsls	r2, r3, #3
 80055b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055b8:	4413      	add	r3, r2
 80055ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80055ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	895b      	ldrh	r3, [r3, #10]
 80055d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6959      	ldr	r1, [r3, #20]
 80055e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80055f0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80055f4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80055f8:	6800      	ldr	r0, [r0, #0]
 80055fa:	f000 fe0b 	bl	8006214 <USB_WritePMA>
 80055fe:	e0ca      	b.n	8005796 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	785b      	ldrb	r3, [r3, #1]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d177      	bne.n	8005700 <USB_EPStartXfer+0xc98>
 8005610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005614:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800561c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005620:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800562a:	b29b      	uxth	r3, r3
 800562c:	461a      	mov	r2, r3
 800562e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005630:	4413      	add	r3, r2
 8005632:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	00da      	lsls	r2, r3, #3
 8005642:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005644:	4413      	add	r3, r2
 8005646:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800564a:	67bb      	str	r3, [r7, #120]	; 0x78
 800564c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800564e:	881b      	ldrh	r3, [r3, #0]
 8005650:	b29b      	uxth	r3, r3
 8005652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005656:	b29a      	uxth	r2, r3
 8005658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800565a:	801a      	strh	r2, [r3, #0]
 800565c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10a      	bne.n	800567a <USB_EPStartXfer+0xc12>
 8005664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b29b      	uxth	r3, r3
 800566a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005672:	b29a      	uxth	r2, r3
 8005674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005676:	801a      	strh	r2, [r3, #0]
 8005678:	e073      	b.n	8005762 <USB_EPStartXfer+0xcfa>
 800567a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800567e:	2b3e      	cmp	r3, #62	; 0x3e
 8005680:	d81c      	bhi.n	80056bc <USB_EPStartXfer+0xc54>
 8005682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005686:	085b      	lsrs	r3, r3, #1
 8005688:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800568c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b00      	cmp	r3, #0
 8005696:	d004      	beq.n	80056a2 <USB_EPStartXfer+0xc3a>
 8005698:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800569c:	3301      	adds	r3, #1
 800569e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	029b      	lsls	r3, r3, #10
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	4313      	orrs	r3, r2
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056b8:	801a      	strh	r2, [r3, #0]
 80056ba:	e052      	b.n	8005762 <USB_EPStartXfer+0xcfa>
 80056bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c0:	095b      	lsrs	r3, r3, #5
 80056c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d104      	bne.n	80056dc <USB_EPStartXfer+0xc74>
 80056d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056d6:	3b01      	subs	r3, #1
 80056d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80056dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	029b      	lsls	r3, r3, #10
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	4313      	orrs	r3, r2
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056fc:	801a      	strh	r2, [r3, #0]
 80056fe:	e030      	b.n	8005762 <USB_EPStartXfer+0xcfa>
 8005700:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005704:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	785b      	ldrb	r3, [r3, #1]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d128      	bne.n	8005762 <USB_EPStartXfer+0xcfa>
 8005710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005714:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800571e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572c:	b29b      	uxth	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005734:	4413      	add	r3, r2
 8005736:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800573a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	00da      	lsls	r2, r3, #3
 8005748:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800574c:	4413      	add	r3, r2
 800574e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005752:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800575a:	b29a      	uxth	r2, r3
 800575c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005760:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	891b      	ldrh	r3, [r3, #8]
 800576e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6959      	ldr	r1, [r3, #20]
 800577e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005782:	b29b      	uxth	r3, r3
 8005784:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005788:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800578c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005790:	6800      	ldr	r0, [r0, #0]
 8005792:	f000 fd3f 	bl	8006214 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800579a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057bc:	817b      	strh	r3, [r7, #10]
 80057be:	897b      	ldrh	r3, [r7, #10]
 80057c0:	f083 0310 	eor.w	r3, r3, #16
 80057c4:	817b      	strh	r3, [r7, #10]
 80057c6:	897b      	ldrh	r3, [r7, #10]
 80057c8:	f083 0320 	eor.w	r3, r3, #32
 80057cc:	817b      	strh	r3, [r7, #10]
 80057ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	441a      	add	r2, r3
 80057e8:	897b      	ldrh	r3, [r7, #10]
 80057ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	8013      	strh	r3, [r2, #0]
 80057fe:	f000 bcdf 	b.w	80061c0 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	7b1b      	ldrb	r3, [r3, #12]
 800580e:	2b00      	cmp	r3, #0
 8005810:	f040 80bc 	bne.w	800598c <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	699a      	ldr	r2, [r3, #24]
 8005820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	429a      	cmp	r2, r3
 800582e:	d917      	bls.n	8005860 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699a      	ldr	r2, [r3, #24]
 800584c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005850:	1ad2      	subs	r2, r2, r3
 8005852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	619a      	str	r2, [r3, #24]
 800585e:	e00e      	b.n	800587e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800587e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005882:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800588c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005890:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800589a:	b29b      	uxth	r3, r3
 800589c:	461a      	mov	r2, r3
 800589e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058a2:	4413      	add	r3, r2
 80058a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	00da      	lsls	r2, r3, #3
 80058b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80058ba:	4413      	add	r3, r2
 80058bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80058c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058d6:	801a      	strh	r2, [r3, #0]
 80058d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10d      	bne.n	80058fc <USB_EPStartXfer+0xe94>
 80058e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058f6:	801a      	strh	r2, [r3, #0]
 80058f8:	f000 bc28 	b.w	800614c <USB_EPStartXfer+0x16e4>
 80058fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005900:	2b3e      	cmp	r3, #62	; 0x3e
 8005902:	d81f      	bhi.n	8005944 <USB_EPStartXfer+0xedc>
 8005904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800590e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d004      	beq.n	8005924 <USB_EPStartXfer+0xebc>
 800591a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800591e:	3301      	adds	r3, #1
 8005920:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005924:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29a      	uxth	r2, r3
 800592c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005930:	b29b      	uxth	r3, r3
 8005932:	029b      	lsls	r3, r3, #10
 8005934:	b29b      	uxth	r3, r3
 8005936:	4313      	orrs	r3, r2
 8005938:	b29a      	uxth	r2, r3
 800593a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800593e:	801a      	strh	r2, [r3, #0]
 8005940:	f000 bc04 	b.w	800614c <USB_EPStartXfer+0x16e4>
 8005944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800594e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005952:	f003 031f 	and.w	r3, r3, #31
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <USB_EPStartXfer+0xefc>
 800595a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800595e:	3b01      	subs	r3, #1
 8005960:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005964:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29a      	uxth	r2, r3
 800596c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005970:	b29b      	uxth	r3, r3
 8005972:	029b      	lsls	r3, r3, #10
 8005974:	b29b      	uxth	r3, r3
 8005976:	4313      	orrs	r3, r2
 8005978:	b29b      	uxth	r3, r3
 800597a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005982:	b29a      	uxth	r2, r3
 8005984:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005988:	801a      	strh	r2, [r3, #0]
 800598a:	e3df      	b.n	800614c <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800598c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	78db      	ldrb	r3, [r3, #3]
 8005998:	2b02      	cmp	r3, #2
 800599a:	f040 8218 	bne.w	8005dce <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800599e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f040 809d 	bne.w	8005aea <USB_EPStartXfer+0x1082>
 80059b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	461a      	mov	r2, r3
 80059d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059d4:	4413      	add	r3, r2
 80059d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	00da      	lsls	r2, r3, #3
 80059e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059ec:	4413      	add	r3, r2
 80059ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a02:	b29a      	uxth	r2, r3
 8005a04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a08:	801a      	strh	r2, [r3, #0]
 8005a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10c      	bne.n	8005a34 <USB_EPStartXfer+0xfcc>
 8005a1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a30:	801a      	strh	r2, [r3, #0]
 8005a32:	e08f      	b.n	8005b54 <USB_EPStartXfer+0x10ec>
 8005a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b3e      	cmp	r3, #62	; 0x3e
 8005a42:	d826      	bhi.n	8005a92 <USB_EPStartXfer+0x102a>
 8005a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	085b      	lsrs	r3, r3, #1
 8005a52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d004      	beq.n	8005a74 <USB_EPStartXfer+0x100c>
 8005a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6e:	3301      	adds	r3, #1
 8005a70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a78:	881b      	ldrh	r3, [r3, #0]
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	029b      	lsls	r3, r3, #10
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	4313      	orrs	r3, r2
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005a8e:	801a      	strh	r2, [r3, #0]
 8005a90:	e060      	b.n	8005b54 <USB_EPStartXfer+0x10ec>
 8005a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f003 031f 	and.w	r3, r3, #31
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d104      	bne.n	8005ac2 <USB_EPStartXfer+0x105a>
 8005ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005abc:	3b01      	subs	r3, #1
 8005abe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ac2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	029b      	lsls	r3, r3, #10
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ae6:	801a      	strh	r2, [r3, #0]
 8005ae8:	e034      	b.n	8005b54 <USB_EPStartXfer+0x10ec>
 8005aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	785b      	ldrb	r3, [r3, #1]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d12c      	bne.n	8005b54 <USB_EPStartXfer+0x10ec>
 8005afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b1e:	4413      	add	r3, r2
 8005b20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	00da      	lsls	r2, r3, #3
 8005b32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b36:	4413      	add	r3, r2
 8005b38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	785b      	ldrb	r3, [r3, #1]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f040 809d 	bne.w	8005cae <USB_EPStartXfer+0x1246>
 8005b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	461a      	mov	r2, r3
 8005b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b98:	4413      	add	r3, r2
 8005b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	00da      	lsls	r2, r3, #3
 8005bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005bba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bcc:	801a      	strh	r2, [r3, #0]
 8005bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10c      	bne.n	8005bf8 <USB_EPStartXfer+0x1190>
 8005bde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bf4:	801a      	strh	r2, [r3, #0]
 8005bf6:	e088      	b.n	8005d0a <USB_EPStartXfer+0x12a2>
 8005bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	2b3e      	cmp	r3, #62	; 0x3e
 8005c06:	d826      	bhi.n	8005c56 <USB_EPStartXfer+0x11ee>
 8005c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	085b      	lsrs	r3, r3, #1
 8005c16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d004      	beq.n	8005c38 <USB_EPStartXfer+0x11d0>
 8005c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c32:	3301      	adds	r3, #1
 8005c34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	029b      	lsls	r3, r3, #10
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c52:	801a      	strh	r2, [r3, #0]
 8005c54:	e059      	b.n	8005d0a <USB_EPStartXfer+0x12a2>
 8005c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	095b      	lsrs	r3, r3, #5
 8005c64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	f003 031f 	and.w	r3, r3, #31
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d104      	bne.n	8005c86 <USB_EPStartXfer+0x121e>
 8005c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c80:	3b01      	subs	r3, #1
 8005c82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	029b      	lsls	r3, r3, #10
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ca0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005caa:	801a      	strh	r2, [r3, #0]
 8005cac:	e02d      	b.n	8005d0a <USB_EPStartXfer+0x12a2>
 8005cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d125      	bne.n	8005d0a <USB_EPStartXfer+0x12a2>
 8005cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	00da      	lsls	r2, r3, #3
 8005ce8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005cec:	4413      	add	r3, r2
 8005cee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d08:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 8218 	beq.w	800614c <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <USB_EPStartXfer+0x12ec>
 8005d48:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10d      	bne.n	8005d70 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d54:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f040 81f5 	bne.w	800614c <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f040 81ee 	bne.w	800614c <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005d70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d96:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	441a      	add	r2, r3
 8005db4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	8013      	strh	r3, [r2, #0]
 8005dcc:	e1be      	b.n	800614c <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	78db      	ldrb	r3, [r3, #3]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	f040 81b4 	bne.w	8006148 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	699a      	ldr	r2, [r3, #24]
 8005dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d917      	bls.n	8005e2c <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8005dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005e0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699a      	ldr	r2, [r3, #24]
 8005e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e1c:	1ad2      	subs	r2, r2, r3
 8005e1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	619a      	str	r2, [r3, #24]
 8005e2a:	e00e      	b.n	8005e4a <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8005e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2200      	movs	r2, #0
 8005e48:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005e4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f040 8085 	bne.w	8005f66 <USB_EPStartXfer+0x14fe>
 8005e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e80:	4413      	add	r3, r2
 8005e82:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	00da      	lsls	r2, r3, #3
 8005e94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e98:	4413      	add	r3, r2
 8005e9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ea2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005eb4:	801a      	strh	r2, [r3, #0]
 8005eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10c      	bne.n	8005ed8 <USB_EPStartXfer+0x1470>
 8005ebe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ed4:	801a      	strh	r2, [r3, #0]
 8005ed6:	e077      	b.n	8005fc8 <USB_EPStartXfer+0x1560>
 8005ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005edc:	2b3e      	cmp	r3, #62	; 0x3e
 8005ede:	d81e      	bhi.n	8005f1e <USB_EPStartXfer+0x14b6>
 8005ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee4:	085b      	lsrs	r3, r3, #1
 8005ee6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d004      	beq.n	8005f00 <USB_EPStartXfer+0x1498>
 8005ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005efa:	3301      	adds	r3, #1
 8005efc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	029b      	lsls	r3, r3, #10
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	4313      	orrs	r3, r2
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f1a:	801a      	strh	r2, [r3, #0]
 8005f1c:	e054      	b.n	8005fc8 <USB_EPStartXfer+0x1560>
 8005f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d104      	bne.n	8005f3e <USB_EPStartXfer+0x14d6>
 8005f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	029b      	lsls	r3, r3, #10
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	4313      	orrs	r3, r2
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f62:	801a      	strh	r2, [r3, #0]
 8005f64:	e030      	b.n	8005fc8 <USB_EPStartXfer+0x1560>
 8005f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	785b      	ldrb	r3, [r3, #1]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d128      	bne.n	8005fc8 <USB_EPStartXfer+0x1560>
 8005f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	461a      	mov	r2, r3
 8005f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	00da      	lsls	r2, r3, #3
 8005fae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005fc6:	801a      	strh	r2, [r3, #0]
 8005fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	785b      	ldrb	r3, [r3, #1]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f040 8085 	bne.w	80060f2 <USB_EPStartXfer+0x168a>
 8005fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006004:	b29b      	uxth	r3, r3
 8006006:	461a      	mov	r2, r3
 8006008:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800600c:	4413      	add	r3, r2
 800600e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006016:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	00da      	lsls	r2, r3, #3
 8006020:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006024:	4413      	add	r3, r2
 8006026:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800602a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800602e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	b29b      	uxth	r3, r3
 8006036:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800603a:	b29a      	uxth	r2, r3
 800603c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006040:	801a      	strh	r2, [r3, #0]
 8006042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10c      	bne.n	8006064 <USB_EPStartXfer+0x15fc>
 800604a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800604e:	881b      	ldrh	r3, [r3, #0]
 8006050:	b29b      	uxth	r3, r3
 8006052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800605a:	b29a      	uxth	r2, r3
 800605c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006060:	801a      	strh	r2, [r3, #0]
 8006062:	e073      	b.n	800614c <USB_EPStartXfer+0x16e4>
 8006064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006068:	2b3e      	cmp	r3, #62	; 0x3e
 800606a:	d81e      	bhi.n	80060aa <USB_EPStartXfer+0x1642>
 800606c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006070:	085b      	lsrs	r3, r3, #1
 8006072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d004      	beq.n	800608c <USB_EPStartXfer+0x1624>
 8006082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006086:	3301      	adds	r3, #1
 8006088:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800608c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	b29a      	uxth	r2, r3
 8006094:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006098:	b29b      	uxth	r3, r3
 800609a:	029b      	lsls	r3, r3, #10
 800609c:	b29b      	uxth	r3, r3
 800609e:	4313      	orrs	r3, r2
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060a6:	801a      	strh	r2, [r3, #0]
 80060a8:	e050      	b.n	800614c <USB_EPStartXfer+0x16e4>
 80060aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ae:	095b      	lsrs	r3, r3, #5
 80060b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b8:	f003 031f 	and.w	r3, r3, #31
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d104      	bne.n	80060ca <USB_EPStartXfer+0x1662>
 80060c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060c4:	3b01      	subs	r3, #1
 80060c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80060ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	029b      	lsls	r3, r3, #10
 80060da:	b29b      	uxth	r3, r3
 80060dc:	4313      	orrs	r3, r2
 80060de:	b29b      	uxth	r3, r3
 80060e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ee:	801a      	strh	r2, [r3, #0]
 80060f0:	e02c      	b.n	800614c <USB_EPStartXfer+0x16e4>
 80060f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	785b      	ldrb	r3, [r3, #1]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d124      	bne.n	800614c <USB_EPStartXfer+0x16e4>
 8006102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006110:	b29b      	uxth	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006118:	4413      	add	r3, r2
 800611a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800611e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006122:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	00da      	lsls	r2, r3, #3
 800612c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006130:	4413      	add	r3, r2
 8006132:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006136:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800613a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800613e:	b29a      	uxth	r2, r3
 8006140:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006144:	801a      	strh	r2, [r3, #0]
 8006146:	e001      	b.n	800614c <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e03a      	b.n	80061c2 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800614c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006150:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800615a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	b29b      	uxth	r3, r3
 800616a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800616e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006172:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006176:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800617a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800617e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006182:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006186:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800618a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800618e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006192:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800619c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	441a      	add	r2, r3
 80061a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061bc:	b29b      	uxth	r3, r3
 80061be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d103      	bne.n	80061e6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2280      	movs	r2, #128	; 0x80
 80061e2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006202:	b29b      	uxth	r3, r3
 8006204:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006206:	68fb      	ldr	r3, [r7, #12]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006214:	b480      	push	{r7}
 8006216:	b08b      	sub	sp, #44	; 0x2c
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	4611      	mov	r1, r2
 8006220:	461a      	mov	r2, r3
 8006222:	460b      	mov	r3, r1
 8006224:	80fb      	strh	r3, [r7, #6]
 8006226:	4613      	mov	r3, r2
 8006228:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800622a:	88bb      	ldrh	r3, [r7, #4]
 800622c:	3301      	adds	r3, #1
 800622e:	085b      	lsrs	r3, r3, #1
 8006230:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800623a:	88fa      	ldrh	r2, [r7, #6]
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006244:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
 800624a:	e01b      	b.n	8006284 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	3301      	adds	r3, #1
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	021b      	lsls	r3, r3, #8
 800625a:	b21a      	sxth	r2, r3
 800625c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006260:	4313      	orrs	r3, r2
 8006262:	b21b      	sxth	r3, r3
 8006264:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	8a7a      	ldrh	r2, [r7, #18]
 800626a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	3302      	adds	r3, #2
 8006270:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	3301      	adds	r3, #1
 8006276:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	3301      	adds	r3, #1
 800627c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	3b01      	subs	r3, #1
 8006282:	627b      	str	r3, [r7, #36]	; 0x24
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1e0      	bne.n	800624c <USB_WritePMA+0x38>
  }
}
 800628a:	bf00      	nop
 800628c:	bf00      	nop
 800628e:	372c      	adds	r7, #44	; 0x2c
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006298:	b480      	push	{r7}
 800629a:	b08b      	sub	sp, #44	; 0x2c
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	4611      	mov	r1, r2
 80062a4:	461a      	mov	r2, r3
 80062a6:	460b      	mov	r3, r1
 80062a8:	80fb      	strh	r3, [r7, #6]
 80062aa:	4613      	mov	r3, r2
 80062ac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80062ae:	88bb      	ldrh	r3, [r7, #4]
 80062b0:	085b      	lsrs	r3, r3, #1
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062be:	88fa      	ldrh	r2, [r7, #6]
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062c8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
 80062ce:	e018      	b.n	8006302 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	3302      	adds	r3, #2
 80062dc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	3301      	adds	r3, #1
 80062ea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	0a1b      	lsrs	r3, r3, #8
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	3301      	adds	r3, #1
 80062fa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80062fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fe:	3b01      	subs	r3, #1
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e3      	bne.n	80062d0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006308:	88bb      	ldrh	r3, [r7, #4]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	b29b      	uxth	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d007      	beq.n	8006324 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	b29b      	uxth	r3, r3
 800631a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	b2da      	uxtb	r2, r3
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	701a      	strb	r2, [r3, #0]
  }
}
 8006324:	bf00      	nop
 8006326:	372c      	adds	r7, #44	; 0x2c
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <memset>:
 8006330:	4402      	add	r2, r0
 8006332:	4603      	mov	r3, r0
 8006334:	4293      	cmp	r3, r2
 8006336:	d100      	bne.n	800633a <memset+0xa>
 8006338:	4770      	bx	lr
 800633a:	f803 1b01 	strb.w	r1, [r3], #1
 800633e:	e7f9      	b.n	8006334 <memset+0x4>

08006340 <__libc_init_array>:
 8006340:	b570      	push	{r4, r5, r6, lr}
 8006342:	4d0d      	ldr	r5, [pc, #52]	; (8006378 <__libc_init_array+0x38>)
 8006344:	4c0d      	ldr	r4, [pc, #52]	; (800637c <__libc_init_array+0x3c>)
 8006346:	1b64      	subs	r4, r4, r5
 8006348:	10a4      	asrs	r4, r4, #2
 800634a:	2600      	movs	r6, #0
 800634c:	42a6      	cmp	r6, r4
 800634e:	d109      	bne.n	8006364 <__libc_init_array+0x24>
 8006350:	4d0b      	ldr	r5, [pc, #44]	; (8006380 <__libc_init_array+0x40>)
 8006352:	4c0c      	ldr	r4, [pc, #48]	; (8006384 <__libc_init_array+0x44>)
 8006354:	f000 f818 	bl	8006388 <_init>
 8006358:	1b64      	subs	r4, r4, r5
 800635a:	10a4      	asrs	r4, r4, #2
 800635c:	2600      	movs	r6, #0
 800635e:	42a6      	cmp	r6, r4
 8006360:	d105      	bne.n	800636e <__libc_init_array+0x2e>
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	f855 3b04 	ldr.w	r3, [r5], #4
 8006368:	4798      	blx	r3
 800636a:	3601      	adds	r6, #1
 800636c:	e7ee      	b.n	800634c <__libc_init_array+0xc>
 800636e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006372:	4798      	blx	r3
 8006374:	3601      	adds	r6, #1
 8006376:	e7f2      	b.n	800635e <__libc_init_array+0x1e>
 8006378:	080063d8 	.word	0x080063d8
 800637c:	080063d8 	.word	0x080063d8
 8006380:	080063d8 	.word	0x080063d8
 8006384:	080063dc 	.word	0x080063dc

08006388 <_init>:
 8006388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638a:	bf00      	nop
 800638c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638e:	bc08      	pop	{r3}
 8006390:	469e      	mov	lr, r3
 8006392:	4770      	bx	lr

08006394 <_fini>:
 8006394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006396:	bf00      	nop
 8006398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639a:	bc08      	pop	{r3}
 800639c:	469e      	mov	lr, r3
 800639e:	4770      	bx	lr
