
Experiencia_5_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004340  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080044d4  080044d4  000144d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800450c  0800450c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800450c  0800450c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800450c  0800450c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000055c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000568  20000568  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c301  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000221b  00000000  00000000  0002c380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000920  00000000  00000000  0002e5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006eb  00000000  00000000  0002eec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000210d2  00000000  00000000  0002f5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e4b7  00000000  00000000  0005067d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5c2b  00000000  00000000  0005eb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002330  00000000  00000000  00124760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00126a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080044bc 	.word	0x080044bc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080044bc 	.word	0x080044bc

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <crc_16>:
 * string of which the beginning has been passed to the function. The number of
 * bytes to check is also a parameter. The number of the bytes in the string is
 * limited by the constant SIZE_MAX.
 */

uint16_t crc_16( const unsigned char *input_str, size_t num_bytes ) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]

	uint16_t crc;
	const unsigned char *ptr;
	size_t a;

	if ( ! crc_tab16_init ) init_crc16_tab();
 80001ee:	4b17      	ldr	r3, [pc, #92]	; (800024c <crc_16+0x68>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	f083 0301 	eor.w	r3, r3, #1
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <crc_16+0x1c>
 80001fc:	f000 f82a 	bl	8000254 <init_crc16_tab>

	crc = CRC_START_16;
 8000200:	2300      	movs	r3, #0
 8000202:	82fb      	strh	r3, [r7, #22]
	ptr = input_str;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	613b      	str	r3, [r7, #16]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8000208:	693b      	ldr	r3, [r7, #16]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d018      	beq.n	8000240 <crc_16+0x5c>
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	e011      	b.n	8000238 <crc_16+0x54>

		crc = (crc >> 8) ^ crc_tab16[ (crc ^ (uint16_t) *ptr++) & 0x00FF ];
 8000214:	8afb      	ldrh	r3, [r7, #22]
 8000216:	0a1b      	lsrs	r3, r3, #8
 8000218:	b29a      	uxth	r2, r3
 800021a:	8af9      	ldrh	r1, [r7, #22]
 800021c:	693b      	ldr	r3, [r7, #16]
 800021e:	1c58      	adds	r0, r3, #1
 8000220:	6138      	str	r0, [r7, #16]
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	404b      	eors	r3, r1
 8000226:	b2db      	uxtb	r3, r3
 8000228:	4909      	ldr	r1, [pc, #36]	; (8000250 <crc_16+0x6c>)
 800022a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800022e:	4053      	eors	r3, r2
 8000230:	82fb      	strh	r3, [r7, #22]
	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	3301      	adds	r3, #1
 8000236:	60fb      	str	r3, [r7, #12]
 8000238:	68fa      	ldr	r2, [r7, #12]
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	429a      	cmp	r2, r3
 800023e:	d3e9      	bcc.n	8000214 <crc_16+0x30>
	}

	return crc;
 8000240:	8afb      	ldrh	r3, [r7, #22]

}  /* crc_16 */
 8000242:	4618      	mov	r0, r3
 8000244:	3718      	adds	r7, #24
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	20000028 	.word	0x20000028
 8000250:	2000002c 	.word	0x2000002c

08000254 <init_crc16_tab>:
 * that can be used directly in the XOR arithmetic in the algorithm. This
 * lookup table is calculated by the init_crc16_tab() routine, the first time
 * the CRC function is called.
 */

static void init_crc16_tab( void ) {
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
 800025a:	2300      	movs	r3, #0
 800025c:	80fb      	strh	r3, [r7, #6]
 800025e:	e029      	b.n	80002b4 <init_crc16_tab+0x60>

		crc = 0;
 8000260:	2300      	movs	r3, #0
 8000262:	807b      	strh	r3, [r7, #2]
		c   = i;
 8000264:	88fb      	ldrh	r3, [r7, #6]
 8000266:	803b      	strh	r3, [r7, #0]

		for (j=0; j<8; j++) {
 8000268:	2300      	movs	r3, #0
 800026a:	80bb      	strh	r3, [r7, #4]
 800026c:	e017      	b.n	800029e <init_crc16_tab+0x4a>

			if ( (crc ^ c) & 0x0001 ) crc = ( crc >> 1 ) ^ CRC_POLY_16;
 800026e:	887a      	ldrh	r2, [r7, #2]
 8000270:	883b      	ldrh	r3, [r7, #0]
 8000272:	4053      	eors	r3, r2
 8000274:	b29b      	uxth	r3, r3
 8000276:	f003 0301 	and.w	r3, r3, #1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d006      	beq.n	800028c <init_crc16_tab+0x38>
 800027e:	887b      	ldrh	r3, [r7, #2]
 8000280:	085b      	lsrs	r3, r3, #1
 8000282:	b29a      	uxth	r2, r3
 8000284:	4b11      	ldr	r3, [pc, #68]	; (80002cc <init_crc16_tab+0x78>)
 8000286:	4053      	eors	r3, r2
 8000288:	807b      	strh	r3, [r7, #2]
 800028a:	e002      	b.n	8000292 <init_crc16_tab+0x3e>
			else                      crc =   crc >> 1;
 800028c:	887b      	ldrh	r3, [r7, #2]
 800028e:	085b      	lsrs	r3, r3, #1
 8000290:	807b      	strh	r3, [r7, #2]

			c = c >> 1;
 8000292:	883b      	ldrh	r3, [r7, #0]
 8000294:	085b      	lsrs	r3, r3, #1
 8000296:	803b      	strh	r3, [r7, #0]
		for (j=0; j<8; j++) {
 8000298:	88bb      	ldrh	r3, [r7, #4]
 800029a:	3301      	adds	r3, #1
 800029c:	80bb      	strh	r3, [r7, #4]
 800029e:	88bb      	ldrh	r3, [r7, #4]
 80002a0:	2b07      	cmp	r3, #7
 80002a2:	d9e4      	bls.n	800026e <init_crc16_tab+0x1a>
		}

		crc_tab16[i] = crc;
 80002a4:	88fb      	ldrh	r3, [r7, #6]
 80002a6:	490a      	ldr	r1, [pc, #40]	; (80002d0 <init_crc16_tab+0x7c>)
 80002a8:	887a      	ldrh	r2, [r7, #2]
 80002aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=0; i<256; i++) {
 80002ae:	88fb      	ldrh	r3, [r7, #6]
 80002b0:	3301      	adds	r3, #1
 80002b2:	80fb      	strh	r3, [r7, #6]
 80002b4:	88fb      	ldrh	r3, [r7, #6]
 80002b6:	2bff      	cmp	r3, #255	; 0xff
 80002b8:	d9d2      	bls.n	8000260 <init_crc16_tab+0xc>
	}

	crc_tab16_init = true;
 80002ba:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <init_crc16_tab+0x80>)
 80002bc:	2201      	movs	r2, #1
 80002be:	701a      	strb	r2, [r3, #0]

}  /* init_crc16_tab */
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	ffffa001 	.word	0xffffa001
 80002d0:	2000002c 	.word	0x2000002c
 80002d4:	20000028 	.word	0x20000028

080002d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08c      	sub	sp, #48	; 0x30
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 031c 	add.w	r3, r7, #28
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ee:	4b51      	ldr	r3, [pc, #324]	; (8000434 <MX_GPIO_Init+0x15c>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a50      	ldr	r2, [pc, #320]	; (8000434 <MX_GPIO_Init+0x15c>)
 80002f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b4e      	ldr	r3, [pc, #312]	; (8000434 <MX_GPIO_Init+0x15c>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000302:	61bb      	str	r3, [r7, #24]
 8000304:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000306:	4b4b      	ldr	r3, [pc, #300]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	4a4a      	ldr	r2, [pc, #296]	; (8000434 <MX_GPIO_Init+0x15c>)
 800030c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000310:	6153      	str	r3, [r2, #20]
 8000312:	4b48      	ldr	r3, [pc, #288]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031e:	4b45      	ldr	r3, [pc, #276]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a44      	ldr	r2, [pc, #272]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000328:	6153      	str	r3, [r2, #20]
 800032a:	4b42      	ldr	r3, [pc, #264]	; (8000434 <MX_GPIO_Init+0x15c>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000332:	613b      	str	r3, [r7, #16]
 8000334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000336:	4b3f      	ldr	r3, [pc, #252]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a3e      	ldr	r2, [pc, #248]	; (8000434 <MX_GPIO_Init+0x15c>)
 800033c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b3c      	ldr	r3, [pc, #240]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800034e:	4b39      	ldr	r3, [pc, #228]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a38      	ldr	r2, [pc, #224]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000354:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	4b36      	ldr	r3, [pc, #216]	; (8000434 <MX_GPIO_Init+0x15c>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000366:	4b33      	ldr	r3, [pc, #204]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a32      	ldr	r2, [pc, #200]	; (8000434 <MX_GPIO_Init+0x15c>)
 800036c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000370:	6153      	str	r3, [r2, #20]
 8000372:	4b30      	ldr	r3, [pc, #192]	; (8000434 <MX_GPIO_Init+0x15c>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	f244 0181 	movw	r1, #16513	; 0x4081
 8000384:	482c      	ldr	r0, [pc, #176]	; (8000438 <MX_GPIO_Init+0x160>)
 8000386:	f000 ffe5 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_E_GPIO_Port, RS485_E_Pin, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000390:	482a      	ldr	r0, [pc, #168]	; (800043c <MX_GPIO_Init+0x164>)
 8000392:	f000 ffdf 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000396:	2200      	movs	r2, #0
 8000398:	2140      	movs	r1, #64	; 0x40
 800039a:	4829      	ldr	r0, [pc, #164]	; (8000440 <MX_GPIO_Init+0x168>)
 800039c:	f000 ffda 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80003a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80003aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ac:	2300      	movs	r3, #0
 80003ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80003b0:	f107 031c 	add.w	r3, r7, #28
 80003b4:	4619      	mov	r1, r3
 80003b6:	4823      	ldr	r0, [pc, #140]	; (8000444 <MX_GPIO_Init+0x16c>)
 80003b8:	f000 fe42 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80003bc:	f244 0381 	movw	r3, #16513	; 0x4081
 80003c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2300      	movs	r3, #0
 80003cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ce:	f107 031c 	add.w	r3, r7, #28
 80003d2:	4619      	mov	r1, r3
 80003d4:	4818      	ldr	r0, [pc, #96]	; (8000438 <MX_GPIO_Init+0x160>)
 80003d6:	f000 fe33 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RS485_E_Pin;
 80003da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	2301      	movs	r3, #1
 80003e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2300      	movs	r3, #0
 80003ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_E_GPIO_Port, &GPIO_InitStruct);
 80003ec:	f107 031c 	add.w	r3, r7, #28
 80003f0:	4619      	mov	r1, r3
 80003f2:	4812      	ldr	r0, [pc, #72]	; (800043c <MX_GPIO_Init+0x164>)
 80003f4:	f000 fe24 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80003f8:	2340      	movs	r3, #64	; 0x40
 80003fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000404:	2300      	movs	r3, #0
 8000406:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000408:	f107 031c 	add.w	r3, r7, #28
 800040c:	4619      	mov	r1, r3
 800040e:	480c      	ldr	r0, [pc, #48]	; (8000440 <MX_GPIO_Init+0x168>)
 8000410:	f000 fe16 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000414:	2380      	movs	r3, #128	; 0x80
 8000416:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000418:	2300      	movs	r3, #0
 800041a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000420:	f107 031c 	add.w	r3, r7, #28
 8000424:	4619      	mov	r1, r3
 8000426:	4806      	ldr	r0, [pc, #24]	; (8000440 <MX_GPIO_Init+0x168>)
 8000428:	f000 fe0a 	bl	8001040 <HAL_GPIO_Init>

}
 800042c:	bf00      	nop
 800042e:	3730      	adds	r7, #48	; 0x30
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40021000 	.word	0x40021000
 8000438:	48000400 	.word	0x48000400
 800043c:	48001400 	.word	0x48001400
 8000440:	48001800 	.word	0x48001800
 8000444:	48000800 	.word	0x48000800

08000448 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b0c6      	sub	sp, #280	; 0x118
 800044c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800044e:	f000 fbdf 	bl	8000c10 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000452:	f000 f8af 	bl	80005b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000456:	f7ff ff3f 	bl	80002d8 <MX_GPIO_Init>
	MX_RTC_Init();
 800045a:	f000 f919 	bl	8000690 <MX_RTC_Init>
	MX_USART3_UART_Init();
 800045e:	f000 f9fd 	bl	800085c <MX_USART3_UART_Init>
	MX_USART1_UART_Init();
 8000462:	f000 f9cb 	bl	80007fc <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_UART_MspInit(&huart1);
 8000466:	484a      	ldr	r0, [pc, #296]	; (8000590 <main+0x148>)
 8000468:	f000 fa28 	bl	80008bc <HAL_UART_MspInit>
	HAL_UART_MspInit(&huart3);
 800046c:	4849      	ldr	r0, [pc, #292]	; (8000594 <main+0x14c>)
 800046e:	f000 fa25 	bl	80008bc <HAL_UART_MspInit>

	HAL_GPIO_WritePin(RS485_E_GPIO_Port, RS485_E_Pin, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000478:	4847      	ldr	r0, [pc, #284]	; (8000598 <main+0x150>)
 800047a:	f000 ff6b 	bl	8001354 <HAL_GPIO_WritePin>
	if (HAL_UART_Receive_IT(&huart1, &RxByte, 1) != HAL_OK) {
 800047e:	2201      	movs	r2, #1
 8000480:	4946      	ldr	r1, [pc, #280]	; (800059c <main+0x154>)
 8000482:	4843      	ldr	r0, [pc, #268]	; (8000590 <main+0x148>)
 8000484:	f002 fdee 	bl	8003064 <HAL_UART_Receive_IT>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <main+0x4a>
		Error_Handler();
 800048e:	f000 f8f9 	bl	8000684 <Error_Handler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	uint8_t message_decoded_rec[250] = {0};
 8000492:	2300      	movs	r3, #0
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	22f6      	movs	r2, #246	; 0xf6
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 ffd2 	bl	8004448 <memset>
	uint8_t id_rec = 0, ack_rec = 0, size_rec = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	72fb      	strb	r3, [r7, #11]
 80004a8:	2300      	movs	r3, #0
 80004aa:	72bb      	strb	r3, [r7, #10]
 80004ac:	2300      	movs	r3, #0
 80004ae:	727b      	strb	r3, [r7, #9]
	uint16_t packet_size = 0, packet_size_rec = 0, ns_rec = 0;
 80004b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80004b4:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80004b8:	2200      	movs	r2, #0
 80004ba:	801a      	strh	r2, [r3, #0]
 80004bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80004c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80004c4:	2200      	movs	r2, #0
 80004c6:	801a      	strh	r2, [r3, #0]
 80004c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80004cc:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 80004d0:	2200      	movs	r2, #0
 80004d2:	801a      	strh	r2, [r3, #0]
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (NewMessage)
 80004d4:	4b32      	ldr	r3, [pc, #200]	; (80005a0 <main+0x158>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d0fb      	beq.n	80004d4 <main+0x8c>
		{
			NewMessage = 0;
 80004dc:	4b30      	ldr	r3, [pc, #192]	; (80005a0 <main+0x158>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]

			if (RS485_decode_packet(RxData, &packet_size_rec, message_decoded_rec, &size_rec, &ns_rec, &ack_rec, &id_rec))	//CRC correcto
 80004e2:	f107 0009 	add.w	r0, r7, #9
 80004e6:	f107 020c 	add.w	r2, r7, #12
 80004ea:	1d39      	adds	r1, r7, #4
 80004ec:	f107 030b 	add.w	r3, r7, #11
 80004f0:	9302      	str	r3, [sp, #8]
 80004f2:	f107 030a 	add.w	r3, r7, #10
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	1cbb      	adds	r3, r7, #2
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	4603      	mov	r3, r0
 80004fe:	4829      	ldr	r0, [pc, #164]	; (80005a4 <main+0x15c>)
 8000500:	f000 fad8 	bl	8000ab4 <RS485_decode_packet>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0e4      	beq.n	80004d4 <main+0x8c>
			{
				//Almacenamos el ns que nos han enviado
				ns = ns_rec;
 800050a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800050e:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8000512:	881a      	ldrh	r2, [r3, #0]
 8000514:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <main+0x160>)
 8000516:	801a      	strh	r2, [r3, #0]
				switch(id_rec)
 8000518:	7afb      	ldrb	r3, [r7, #11]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d002      	beq.n	8000524 <main+0xdc>
 800051e:	2b01      	cmp	r3, #1
 8000520:	d00f      	beq.n	8000542 <main+0xfa>
 8000522:	e030      	b.n	8000586 <main+0x13e>
				{
					case 0:
						HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2101      	movs	r1, #1
 8000528:	4820      	ldr	r0, [pc, #128]	; (80005ac <main+0x164>)
 800052a:	f000 ff13 	bl	8001354 <HAL_GPIO_WritePin>
						HAL_Delay(500);
 800052e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000532:	f000 fbd3 	bl	8000cdc <HAL_Delay>
						HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2101      	movs	r1, #1
 800053a:	481c      	ldr	r0, [pc, #112]	; (80005ac <main+0x164>)
 800053c:	f000 ff0a 	bl	8001354 <HAL_GPIO_WritePin>
						break;
 8000540:	e025      	b.n	800058e <main+0x146>
					case 1:
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000548:	4818      	ldr	r0, [pc, #96]	; (80005ac <main+0x164>)
 800054a:	f000 ff03 	bl	8001354 <HAL_GPIO_WritePin>
						//Creamos el paquete de a enviar con el ack 1 y el id del nodo
						RS485_create_packet(TxData, &packet_size, 0, 1, 1);	//TODO MAÑANA PENSAR COMO ENVIAR EL TIMEOUT DEL NODO
 800054e:	1db9      	adds	r1, r7, #6
 8000550:	2301      	movs	r3, #1
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	2301      	movs	r3, #1
 8000556:	2200      	movs	r2, #0
 8000558:	4815      	ldr	r0, [pc, #84]	; (80005b0 <main+0x168>)
 800055a:	f000 fa5f 	bl	8000a1c <RS485_create_packet>
						RS485_transmit_data(TxData, packet_size);
 800055e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000562:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	4811      	ldr	r0, [pc, #68]	; (80005b0 <main+0x168>)
 800056c:	f000 fa36 	bl	80009dc <RS485_transmit_data>
						HAL_Delay(500);
 8000570:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000574:	f000 fbb2 	bl	8000cdc <HAL_Delay>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800057e:	480b      	ldr	r0, [pc, #44]	; (80005ac <main+0x164>)
 8000580:	f000 fee8 	bl	8001354 <HAL_GPIO_WritePin>
						break;
 8000584:	e003      	b.n	800058e <main+0x146>
					default:
						HAL_Delay(10);
 8000586:	200a      	movs	r0, #10
 8000588:	f000 fba8 	bl	8000cdc <HAL_Delay>
						break;
 800058c:	bf00      	nop
		if (NewMessage)
 800058e:	e7a1      	b.n	80004d4 <main+0x8c>
 8000590:	20000454 	.word	0x20000454
 8000594:	200004dc 	.word	0x200004dc
 8000598:	48001400 	.word	0x48001400
 800059c:	2000024d 	.word	0x2000024d
 80005a0:	2000024c 	.word	0x2000024c
 80005a4:	20000254 	.word	0x20000254
 80005a8:	20000250 	.word	0x20000250
 80005ac:	48000400 	.word	0x48000400
 80005b0:	20000354 	.word	0x20000354

080005b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b0a6      	sub	sp, #152	; 0x98
 80005b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005be:	2228      	movs	r2, #40	; 0x28
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 ff40 	bl	8004448 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2258      	movs	r2, #88	; 0x58
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 ff32 	bl	8004448 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 80005e4:	2309      	movs	r3, #9
 80005e6:	673b      	str	r3, [r7, #112]	; 0x70
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005ec:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ee:	2301      	movs	r3, #1
 80005f0:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005f2:	2301      	movs	r3, #1
 80005f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000602:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000606:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800060a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000614:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000618:	4618      	mov	r0, r3
 800061a:	f000 feb3 	bl	8001384 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x74>
		Error_Handler();
 8000624:	f000 f82e 	bl	8000684 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	65fb      	str	r3, [r7, #92]	; 0x5c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000638:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800063e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000642:	2102      	movs	r1, #2
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fef1 	bl	800242c <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xa0>
		Error_Handler();
 8000650:	f000 f818 	bl	8000684 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <SystemClock_Config+0xcc>)
 8000656:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_RTC;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000664:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4618      	mov	r0, r3
 800066a:	f002 f8ff 	bl	800286c <HAL_RCCEx_PeriphCLKConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xc4>
		Error_Handler();
 8000674:	f000 f806 	bl	8000684 <Error_Handler>
	}
}
 8000678:	bf00      	nop
 800067a:	3798      	adds	r7, #152	; 0x98
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	00010005 	.word	0x00010005

08000684 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000688:	b672      	cpsid	i
}
 800068a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800068c:	e7fe      	b.n	800068c <Error_Handler+0x8>
	...

08000690 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_RTC_Init+0x44>)
 8000696:	4a10      	ldr	r2, [pc, #64]	; (80006d8 <MX_RTC_Init+0x48>)
 8000698:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_RTC_Init+0x44>)
 800069c:	2200      	movs	r2, #0
 800069e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_RTC_Init+0x44>)
 80006a2:	227f      	movs	r2, #127	; 0x7f
 80006a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_RTC_Init+0x44>)
 80006a8:	22ff      	movs	r2, #255	; 0xff
 80006aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_RTC_Init+0x44>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_RTC_Init+0x44>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_RTC_Init+0x44>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_RTC_Init+0x44>)
 80006c0:	f002 faf2 	bl	8002ca8 <HAL_RTC_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80006ca:	f7ff ffdb 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000022c 	.word	0x2000022c
 80006d8:	40002800 	.word	0x40002800

080006dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <HAL_RTC_MspInit+0x44>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d111      	bne.n	8000712 <HAL_RTC_MspInit+0x36>
 80006ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006f2:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	fa93 f3a3 	rbit	r3, r3
 80006fa:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80006fc:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80006fe:	fab3 f383 	clz	r3, r3
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	4b07      	ldr	r3, [pc, #28]	; (8000724 <HAL_RTC_MspInit+0x48>)
 8000708:	4413      	add	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	461a      	mov	r2, r3
 800070e:	2301      	movs	r3, #1
 8000710:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000712:	bf00      	nop
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40002800 	.word	0x40002800
 8000724:	10908100 	.word	0x10908100

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x44>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a0e      	ldr	r2, [pc, #56]	; (800076c <HAL_MspInit+0x44>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_MspInit+0x44>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x44>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_MspInit+0x44>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_MspInit+0x44>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <MemManage_Handler+0x4>

08000782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <UsageFault_Handler+0x4>

0800078e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007bc:	f000 fa6e 	bl	8000c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <USART1_IRQHandler+0x10>)
 80007ca:	f002 fc8f 	bl	80030ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000454 	.word	0x20000454

080007d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <SystemInit+0x20>)
 80007de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e2:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <SystemInit+0x20>)
 80007e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000802:	4a15      	ldr	r2, [pc, #84]	; (8000858 <MX_USART1_UART_Init+0x5c>)
 8000804:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000808:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800080c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART1_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART1_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART1_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000840:	f002 fb38 	bl	8002eb4 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800084a:	f7ff ff1b 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000454 	.word	0x20000454
 8000858:	40013800 	.word	0x40013800

0800085c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 8000862:	4a15      	ldr	r2, [pc, #84]	; (80008b8 <MX_USART3_UART_Init+0x5c>)
 8000864:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 8000868:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800086c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 80008a0:	f002 fb08 	bl	8002eb4 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008aa:	f7ff feeb 	bl	8000684 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200004dc 	.word	0x200004dc
 80008b8:	40004800 	.word	0x40004800

080008bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a32      	ldr	r2, [pc, #200]	; (80009a4 <HAL_UART_MspInit+0xe8>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d130      	bne.n	8000940 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008de:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <HAL_UART_MspInit+0xec>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	4a31      	ldr	r2, [pc, #196]	; (80009a8 <HAL_UART_MspInit+0xec>)
 80008e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e8:	6193      	str	r3, [r2, #24]
 80008ea:	4b2f      	ldr	r3, [pc, #188]	; (80009a8 <HAL_UART_MspInit+0xec>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <HAL_UART_MspInit+0xec>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a2b      	ldr	r2, [pc, #172]	; (80009a8 <HAL_UART_MspInit+0xec>)
 80008fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <HAL_UART_MspInit+0xec>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800090e:	2330      	movs	r3, #48	; 0x30
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091a:	2303      	movs	r3, #3
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800091e:	2307      	movs	r3, #7
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4820      	ldr	r0, [pc, #128]	; (80009ac <HAL_UART_MspInit+0xf0>)
 800092a:	f000 fb89 	bl	8001040 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2025      	movs	r0, #37	; 0x25
 8000934:	f000 fad1 	bl	8000eda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000938:	2025      	movs	r0, #37	; 0x25
 800093a:	f000 faea 	bl	8000f12 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800093e:	e02d      	b.n	800099c <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a1a      	ldr	r2, [pc, #104]	; (80009b0 <HAL_UART_MspInit+0xf4>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d128      	bne.n	800099c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <HAL_UART_MspInit+0xec>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4a16      	ldr	r2, [pc, #88]	; (80009a8 <HAL_UART_MspInit+0xec>)
 8000950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000954:	61d3      	str	r3, [r2, #28]
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_UART_MspInit+0xec>)
 8000958:	69db      	ldr	r3, [r3, #28]
 800095a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_UART_MspInit+0xec>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <HAL_UART_MspInit+0xec>)
 8000968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <HAL_UART_MspInit+0xec>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800097a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800097e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800098c:	2307      	movs	r3, #7
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4807      	ldr	r0, [pc, #28]	; (80009b4 <HAL_UART_MspInit+0xf8>)
 8000998:	f000 fb52 	bl	8001040 <HAL_GPIO_Init>
}
 800099c:	bf00      	nop
 800099e:	3730      	adds	r7, #48	; 0x30
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40013800 	.word	0x40013800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	48000800 	.word	0x48000800
 80009b0:	40004800 	.word	0x40004800
 80009b4:	48000c00 	.word	0x48000c00

080009b8 <USART_transmit_data>:
  }
}

/* USER CODE BEGIN 1 */
void USART_transmit_data(UART_HandleTypeDef* huart, uint8_t* message, uint16_t size)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	4613      	mov	r3, r2
 80009c4:	80fb      	strh	r3, [r7, #6]
	HAL_UART_Transmit(huart, (uint8_t *) message, size, 1000);
 80009c6:	88fa      	ldrh	r2, [r7, #6]
 80009c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009cc:	68b9      	ldr	r1, [r7, #8]
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f002 fabe 	bl	8002f50 <HAL_UART_Transmit>
}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <RS485_transmit_data>:
{
	HAL_UART_Receive(huart, message, size, 100000);
}

void RS485_transmit_data(uint8_t* packet, uint16_t packet_size)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(RS485_E_GPIO_Port, RS485_E_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ee:	4809      	ldr	r0, [pc, #36]	; (8000a14 <RS485_transmit_data+0x38>)
 80009f0:	f000 fcb0 	bl	8001354 <HAL_GPIO_WritePin>
	USART_transmit_data(&huart1, packet, packet_size);
 80009f4:	887b      	ldrh	r3, [r7, #2]
 80009f6:	461a      	mov	r2, r3
 80009f8:	6879      	ldr	r1, [r7, #4]
 80009fa:	4807      	ldr	r0, [pc, #28]	; (8000a18 <RS485_transmit_data+0x3c>)
 80009fc:	f7ff ffdc 	bl	80009b8 <USART_transmit_data>
	HAL_GPIO_WritePin(RS485_E_GPIO_Port, RS485_E_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <RS485_transmit_data+0x38>)
 8000a08:	f000 fca4 	bl	8001354 <HAL_GPIO_WritePin>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	48001400 	.word	0x48001400
 8000a18:	20000454 	.word	0x20000454

08000a1c <RS485_create_packet>:
 * @param message Message inside the packet.
 * @param ack 1 if is ACK packet 0 if not.
 * @param id Identifier of the packet sender.
*/
void RS485_create_packet(uint8_t* packet, uint16_t* packet_size, uint8_t* message, uint8_t ack, uint8_t id)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	70fb      	strb	r3, [r7, #3]
	uint16_t crc;
    uint8_t message_size = strlen((char *)message); // Tamaño del mensaje
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff fbd2 	bl	80001d4 <strlen>
 8000a30:	4603      	mov	r3, r0
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	757b      	strb	r3, [r7, #21]
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <RS485_create_packet+0x94>)
 8000a38:	881a      	ldrh	r2, [r3, #0]

    // Copiamos el número de trama (NS) - 2 bytes
    memcpy(packet, &ns, 2);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	801a      	strh	r2, [r3, #0]
    // Copiamos el tamaño del mensaje (SIZE_DATA) - 1 bytes (MAX 250 bytes de mensaje)
    memcpy(&packet[2], &message_size, 1);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3302      	adds	r3, #2
 8000a42:	7d7a      	ldrb	r2, [r7, #21]
 8000a44:	701a      	strb	r2, [r3, #0]
    //Ack
    memcpy(&packet[3], &ack, 1);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	3303      	adds	r3, #3
 8000a4a:	78fa      	ldrb	r2, [r7, #3]
 8000a4c:	701a      	strb	r2, [r3, #0]
    //Ack
    memcpy(&packet[4], &id, 1);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	3304      	adds	r3, #4
 8000a52:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a56:	701a      	strb	r2, [r3, #0]
    // Copiamos el mensaje (DATA) - tamaño variable (hasta 249 bytes)
    memcpy(&packet[5], message, message_size);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3305      	adds	r3, #5
 8000a5c:	7d7a      	ldrb	r2, [r7, #21]
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f003 fd1d 	bl	80044a0 <memcpy>

    // Calculamos el CRC (usando una función crc_16 adecuada) - 2 bytes
    crc = crc_16((unsigned char *)packet, message_size + 5); // Calculamos CRC sobre NS + SIZE_DATA + DATA
 8000a66:	7d7b      	ldrb	r3, [r7, #21]
 8000a68:	3305      	adds	r3, #5
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f7ff fbb9 	bl	80001e4 <crc_16>
 8000a72:	4603      	mov	r3, r0
 8000a74:	82fb      	strh	r3, [r7, #22]
    memcpy(&packet[5 + message_size], &crc, 2);
 8000a76:	7d7b      	ldrb	r3, [r7, #21]
 8000a78:	3305      	adds	r3, #5
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	8afa      	ldrh	r2, [r7, #22]
 8000a82:	801a      	strh	r2, [r3, #0]

    // Añadimos el byte de fin de trama (END) - 1 byte
    packet[5 + message_size + 2] = 0x0A;  // Byte de fin de trama
 8000a84:	7d7b      	ldrb	r3, [r7, #21]
 8000a86:	3307      	adds	r3, #7
 8000a88:	68fa      	ldr	r2, [r7, #12]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	220a      	movs	r2, #10
 8000a8e:	701a      	strb	r2, [r3, #0]
    packet[5 + message_size + 3] = 0; // Añadimos el final de cadena
 8000a90:	7d7b      	ldrb	r3, [r7, #21]
 8000a92:	3308      	adds	r3, #8
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]

    //Devolvemos el tamaño del paquete total
    *packet_size = message_size + 8;
 8000a9c:	7d7b      	ldrb	r3, [r7, #21]
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	3308      	adds	r3, #8
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	801a      	strh	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	3718      	adds	r7, #24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000250 	.word	0x20000250

08000ab4 <RS485_decode_packet>:
  * @param ns_aux Number of sequence of the packet given.
  * @param ack 1 if is ACK packet 0 if not.
  * @param id Identifier of the packet sender.
  */
uint8_t RS485_decode_packet(uint8_t* packet, uint16_t* packet_size, uint8_t* message, uint8_t* message_size, uint16_t* ns_aux, uint8_t* ack, uint8_t* id)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	60f8      	str	r0, [r7, #12]
 8000abc:	60b9      	str	r1, [r7, #8]
 8000abe:	607a      	str	r2, [r7, #4]
 8000ac0:	603b      	str	r3, [r7, #0]
	uint16_t crc_rx = 0, crc_calc = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	82bb      	strh	r3, [r7, #20]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	82fb      	strh	r3, [r7, #22]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	b29a      	uxth	r2, r3

	memcpy(ns_aux, packet, 2);
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	801a      	strh	r2, [r3, #0]
	memcpy(message_size, &packet[2], 1);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	781a      	ldrb	r2, [r3, #0]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	701a      	strb	r2, [r3, #0]
	memcpy(ack, &packet[3], 1);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	3303      	adds	r3, #3
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	701a      	strb	r2, [r3, #0]
	memcpy(id, &packet[4], 1);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	3304      	adds	r3, #4
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000af0:	701a      	strb	r2, [r3, #0]
	memcpy(message, &packet[5], *message_size);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	1d59      	adds	r1, r3, #5
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f003 fccf 	bl	80044a0 <memcpy>

	memcpy(&crc_rx, &packet[5 + *message_size], 2);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	3305      	adds	r3, #5
 8000b08:	461a      	mov	r2, r3
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	881b      	ldrh	r3, [r3, #0]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	82bb      	strh	r3, [r7, #20]
	crc_calc = crc_16((unsigned char *)packet, *message_size + 5);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	3305      	adds	r3, #5
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f7ff fb61 	bl	80001e4 <crc_16>
 8000b22:	4603      	mov	r3, r0
 8000b24:	82fb      	strh	r3, [r7, #22]

	*packet_size = *message_size + 8;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	3308      	adds	r3, #8
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	801a      	strh	r2, [r3, #0]

	return crc_rx == crc_calc;
 8000b34:	8abb      	ldrh	r3, [r7, #20]
 8000b36:	8afa      	ldrh	r2, [r7, #22]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	bf0c      	ite	eq
 8000b3c:	2301      	moveq	r3, #1
 8000b3e:	2300      	movne	r3, #0
 8000b40:	b2db      	uxtb	r3, r3
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	if(RxByte != 0x0A || RxLen < 9)
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <HAL_UART_RxCpltCallback+0x5c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b0a      	cmp	r3, #10
 8000b5a:	d103      	bne.n	8000b64 <HAL_UART_RxCpltCallback+0x18>
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <HAL_UART_RxCpltCallback+0x60>)
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	2b08      	cmp	r3, #8
 8000b62:	d80d      	bhi.n	8000b80 <HAL_UART_RxCpltCallback+0x34>
	{
		RxData[RxLen] = RxByte;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_UART_RxCpltCallback+0x60>)
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <HAL_UART_RxCpltCallback+0x5c>)
 8000b6c:	7819      	ldrb	r1, [r3, #0]
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <HAL_UART_RxCpltCallback+0x64>)
 8000b70:	5499      	strb	r1, [r3, r2]
		RxLen++;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_UART_RxCpltCallback+0x60>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_UART_RxCpltCallback+0x60>)
 8000b7c:	801a      	strh	r2, [r3, #0]
 8000b7e:	e005      	b.n	8000b8c <HAL_UART_RxCpltCallback+0x40>
	}else
	{
		RxLen = 0;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_UART_RxCpltCallback+0x60>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	801a      	strh	r2, [r3, #0]
		NewMessage = 1;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_UART_RxCpltCallback+0x68>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_UART_Receive_IT(&huart1, &RxByte, 1) != HAL_OK)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4906      	ldr	r1, [pc, #24]	; (8000ba8 <HAL_UART_RxCpltCallback+0x5c>)
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <HAL_UART_RxCpltCallback+0x6c>)
 8000b92:	f002 fa67 	bl	8003064 <HAL_UART_Receive_IT>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_UART_RxCpltCallback+0x54>
	{
		Error_Handler();
 8000b9c:	f7ff fd72 	bl	8000684 <Error_Handler>
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2000024d 	.word	0x2000024d
 8000bac:	2000024e 	.word	0x2000024e
 8000bb0:	20000254 	.word	0x20000254
 8000bb4:	2000024c 	.word	0x2000024c
 8000bb8:	20000454 	.word	0x20000454

08000bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc0:	f7ff fe0a 	bl	80007d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc6:	490d      	ldr	r1, [pc, #52]	; (8000bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <LoopForever+0xe>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0a      	ldr	r2, [pc, #40]	; (8000c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	; (8000c08 <LoopForever+0x16>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bea:	f003 fc35 	bl	8004458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bee:	f7ff fc2b 	bl	8000448 <main>

08000bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf2:	e7fe      	b.n	8000bf2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bf4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c00:	08004514 	.word	0x08004514
  ldr r2, =_sbss
 8000c04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c08:	20000568 	.word	0x20000568

08000c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC1_2_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_Init+0x28>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_Init+0x28>)
 8000c1a:	f043 0310 	orr.w	r3, r3, #16
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f94f 	bl	8000ec4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 f808 	bl	8000c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2c:	f7ff fd7c 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40022000 	.word	0x40022000

08000c3c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x54>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_InitTick+0x58>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f967 	bl	8000f2e <HAL_SYSTICK_Config>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00e      	b.n	8000c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d80a      	bhi.n	8000c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f000 f92f 	bl	8000eda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <HAL_InitTick+0x5c>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e000      	b.n	8000c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000004 	.word	0x20000004

08000c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000564 	.word	0x20000564

08000cc4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000564 	.word	0x20000564

08000cdc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce4:	f7ff ffee 	bl	8000cc4 <HAL_GetTick>
 8000ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf4:	d005      	beq.n	8000d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_Delay+0x44>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d02:	bf00      	nop
 8000d04:	f7ff ffde 	bl	8000cc4 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d8f7      	bhi.n	8000d04 <HAL_Delay+0x28>
  {
  }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008

08000d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <__NVIC_GetPriorityGrouping+0x18>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 0307 	and.w	r3, r3, #7
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db0b      	blt.n	8000db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f003 021f 	and.w	r2, r3, #31
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <__NVIC_EnableIRQ+0x38>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	2001      	movs	r0, #1
 8000daa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000e100 	.word	0xe000e100

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	; (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	; 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e90:	d301      	bcc.n	8000e96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00f      	b.n	8000eb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <SysTick_Config+0x40>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f7ff ff8e 	bl	8000dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <SysTick_Config+0x40>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <SysTick_Config+0x40>)
 8000eb0:	2207      	movs	r2, #7
 8000eb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	e000e010 	.word	0xe000e010

08000ec4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ff29 	bl	8000d24 <__NVIC_SetPriorityGrouping>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eec:	f7ff ff3e 	bl	8000d6c <__NVIC_GetPriorityGrouping>
 8000ef0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	68b9      	ldr	r1, [r7, #8]
 8000ef6:	6978      	ldr	r0, [r7, #20]
 8000ef8:	f7ff ff8e 	bl	8000e18 <NVIC_EncodePriority>
 8000efc:	4602      	mov	r2, r0
 8000efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f02:	4611      	mov	r1, r2
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff5d 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000f0a:	bf00      	nop
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff31 	bl	8000d88 <__NVIC_EnableIRQ>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffa2 	bl	8000e80 <SysTick_Config>
 8000f3c:	4603      	mov	r3, r0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b083      	sub	sp, #12
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e02e      	b.n	8000fb6 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d008      	beq.n	8000f74 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2204      	movs	r2, #4
 8000f66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e020      	b.n	8000fb6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 020e 	bic.w	r2, r2, #14
 8000f82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f022 0201 	bic.w	r2, r2, #1
 8000f92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d005      	beq.n	8000fe4 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2204      	movs	r2, #4
 8000fdc:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e027      	b.n	8001034 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 020e 	bic.w	r2, r2, #14
 8000ff2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0201 	bic.w	r2, r2, #1
 8001002:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100c:	2101      	movs	r1, #1
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	4798      	blx	r3
    }
  }
  return status;
 8001034:	7bfb      	ldrb	r3, [r7, #15]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b087      	sub	sp, #28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104e:	e160      	b.n	8001312 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	4013      	ands	r3, r2
 800105e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 8152 	beq.w	800130c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b01      	cmp	r3, #1
 8001072:	d005      	beq.n	8001080 <HAL_GPIO_Init+0x40>
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d130      	bne.n	80010e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68da      	ldr	r2, [r3, #12]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b6:	2201      	movs	r2, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	091b      	lsrs	r3, r3, #4
 80010cc:	f003 0201 	and.w	r2, r3, #1
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d017      	beq.n	800111e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	2203      	movs	r2, #3
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d123      	bne.n	8001172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	6939      	ldr	r1, [r7, #16]
 800116e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 0203 	and.w	r2, r3, #3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80ac 	beq.w	800130c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b4:	4b5e      	ldr	r3, [pc, #376]	; (8001330 <HAL_GPIO_Init+0x2f0>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a5d      	ldr	r2, [pc, #372]	; (8001330 <HAL_GPIO_Init+0x2f0>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b5b      	ldr	r3, [pc, #364]	; (8001330 <HAL_GPIO_Init+0x2f0>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011cc:	4a59      	ldr	r2, [pc, #356]	; (8001334 <HAL_GPIO_Init+0x2f4>)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4013      	ands	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011f6:	d025      	beq.n	8001244 <HAL_GPIO_Init+0x204>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a4f      	ldr	r2, [pc, #316]	; (8001338 <HAL_GPIO_Init+0x2f8>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d01f      	beq.n	8001240 <HAL_GPIO_Init+0x200>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a4e      	ldr	r2, [pc, #312]	; (800133c <HAL_GPIO_Init+0x2fc>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d019      	beq.n	800123c <HAL_GPIO_Init+0x1fc>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a4d      	ldr	r2, [pc, #308]	; (8001340 <HAL_GPIO_Init+0x300>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d013      	beq.n	8001238 <HAL_GPIO_Init+0x1f8>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a4c      	ldr	r2, [pc, #304]	; (8001344 <HAL_GPIO_Init+0x304>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d00d      	beq.n	8001234 <HAL_GPIO_Init+0x1f4>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a4b      	ldr	r2, [pc, #300]	; (8001348 <HAL_GPIO_Init+0x308>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d007      	beq.n	8001230 <HAL_GPIO_Init+0x1f0>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a4a      	ldr	r2, [pc, #296]	; (800134c <HAL_GPIO_Init+0x30c>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d101      	bne.n	800122c <HAL_GPIO_Init+0x1ec>
 8001228:	2306      	movs	r3, #6
 800122a:	e00c      	b.n	8001246 <HAL_GPIO_Init+0x206>
 800122c:	2307      	movs	r3, #7
 800122e:	e00a      	b.n	8001246 <HAL_GPIO_Init+0x206>
 8001230:	2305      	movs	r3, #5
 8001232:	e008      	b.n	8001246 <HAL_GPIO_Init+0x206>
 8001234:	2304      	movs	r3, #4
 8001236:	e006      	b.n	8001246 <HAL_GPIO_Init+0x206>
 8001238:	2303      	movs	r3, #3
 800123a:	e004      	b.n	8001246 <HAL_GPIO_Init+0x206>
 800123c:	2302      	movs	r3, #2
 800123e:	e002      	b.n	8001246 <HAL_GPIO_Init+0x206>
 8001240:	2301      	movs	r3, #1
 8001242:	e000      	b.n	8001246 <HAL_GPIO_Init+0x206>
 8001244:	2300      	movs	r3, #0
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	f002 0203 	and.w	r2, r2, #3
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	4093      	lsls	r3, r2
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001256:	4937      	ldr	r1, [pc, #220]	; (8001334 <HAL_GPIO_Init+0x2f4>)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001264:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <HAL_GPIO_Init+0x310>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001288:	4a31      	ldr	r2, [pc, #196]	; (8001350 <HAL_GPIO_Init+0x310>)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800128e:	4b30      	ldr	r3, [pc, #192]	; (8001350 <HAL_GPIO_Init+0x310>)
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012b2:	4a27      	ldr	r2, [pc, #156]	; (8001350 <HAL_GPIO_Init+0x310>)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012b8:	4b25      	ldr	r3, [pc, #148]	; (8001350 <HAL_GPIO_Init+0x310>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012dc:	4a1c      	ldr	r2, [pc, #112]	; (8001350 <HAL_GPIO_Init+0x310>)
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_GPIO_Init+0x310>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <HAL_GPIO_Init+0x310>)
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	3301      	adds	r3, #1
 8001310:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	fa22 f303 	lsr.w	r3, r2, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	f47f ae97 	bne.w	8001050 <HAL_GPIO_Init+0x10>
  }
}
 8001322:	bf00      	nop
 8001324:	bf00      	nop
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40021000 	.word	0x40021000
 8001334:	40010000 	.word	0x40010000
 8001338:	48000400 	.word	0x48000400
 800133c:	48000800 	.word	0x48000800
 8001340:	48000c00 	.word	0x48000c00
 8001344:	48001000 	.word	0x48001000
 8001348:	48001400 	.word	0x48001400
 800134c:	48001800 	.word	0x48001800
 8001350:	40010400 	.word	0x40010400

08001354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
 8001360:	4613      	mov	r3, r2
 8001362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001364:	787b      	ldrb	r3, [r7, #1]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001370:	e002      	b.n	8001378 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001372:	887a      	ldrh	r2, [r7, #2]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800138a:	af00      	add	r7, sp, #0
 800138c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001390:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001394:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800139a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d102      	bne.n	80013aa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	f001 b83a 	b.w	800241e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 816f 	beq.w	800169e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80013c0:	4bb5      	ldr	r3, [pc, #724]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 030c 	and.w	r3, r3, #12
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d00c      	beq.n	80013e6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013cc:	4bb2      	ldr	r3, [pc, #712]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d15c      	bne.n	8001492 <HAL_RCC_OscConfig+0x10e>
 80013d8:	4baf      	ldr	r3, [pc, #700]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80013e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e4:	d155      	bne.n	8001492 <HAL_RCC_OscConfig+0x10e>
 80013e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80013f2:	fa93 f3a3 	rbit	r3, r3
 80013f6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  return result;
 80013fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fe:	fab3 f383 	clz	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	095b      	lsrs	r3, r3, #5
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d102      	bne.n	8001418 <HAL_RCC_OscConfig+0x94>
 8001412:	4ba1      	ldr	r3, [pc, #644]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	e015      	b.n	8001444 <HAL_RCC_OscConfig+0xc0>
 8001418:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001424:	fa93 f3a3 	rbit	r3, r3
 8001428:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800142c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001430:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001434:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001440:	4b95      	ldr	r3, [pc, #596]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001444:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001448:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800144c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001450:	fa92 f2a2 	rbit	r2, r2
 8001454:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001458:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800145c:	fab2 f282 	clz	r2, r2
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	f042 0220 	orr.w	r2, r2, #32
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	f002 021f 	and.w	r2, r2, #31
 800146c:	2101      	movs	r1, #1
 800146e:	fa01 f202 	lsl.w	r2, r1, r2
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 8111 	beq.w	800169c <HAL_RCC_OscConfig+0x318>
 800147a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800147e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f040 8108 	bne.w	800169c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	f000 bfc6 	b.w	800241e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001492:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001496:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a2:	d106      	bne.n	80014b2 <HAL_RCC_OscConfig+0x12e>
 80014a4:	4b7c      	ldr	r3, [pc, #496]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a7b      	ldr	r2, [pc, #492]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 80014aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e036      	b.n	8001520 <HAL_RCC_OscConfig+0x19c>
 80014b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x158>
 80014c2:	4b75      	ldr	r3, [pc, #468]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a74      	ldr	r2, [pc, #464]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 80014c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b72      	ldr	r3, [pc, #456]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a71      	ldr	r2, [pc, #452]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 80014d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e021      	b.n	8001520 <HAL_RCC_OscConfig+0x19c>
 80014dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x184>
 80014ee:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a69      	ldr	r2, [pc, #420]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b67      	ldr	r3, [pc, #412]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a66      	ldr	r2, [pc, #408]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0x19c>
 8001508:	4b63      	ldr	r3, [pc, #396]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a62      	ldr	r2, [pc, #392]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 800150e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b60      	ldr	r3, [pc, #384]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a5f      	ldr	r2, [pc, #380]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 800151a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001520:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001524:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d059      	beq.n	80015e4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fbc8 	bl	8000cc4 <HAL_GetTick>
 8001534:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800153a:	f7ff fbc3 	bl	8000cc4 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b64      	cmp	r3, #100	; 0x64
 8001548:	d902      	bls.n	8001550 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	f000 bf67 	b.w	800241e <HAL_RCC_OscConfig+0x109a>
 8001550:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001554:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001558:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800155c:	fa93 f3a3 	rbit	r3, r3
 8001560:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001564:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001568:	fab3 f383 	clz	r3, r3
 800156c:	b2db      	uxtb	r3, r3
 800156e:	095b      	lsrs	r3, r3, #5
 8001570:	b2db      	uxtb	r3, r3
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b01      	cmp	r3, #1
 800157a:	d102      	bne.n	8001582 <HAL_RCC_OscConfig+0x1fe>
 800157c:	4b46      	ldr	r3, [pc, #280]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	e015      	b.n	80015ae <HAL_RCC_OscConfig+0x22a>
 8001582:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001586:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800158e:	fa93 f3a3 	rbit	r3, r3
 8001592:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001596:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800159a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800159e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80015a2:	fa93 f3a3 	rbit	r3, r3
 80015a6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015b2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80015b6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80015ba:	fa92 f2a2 	rbit	r2, r2
 80015be:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80015c2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80015c6:	fab2 f282 	clz	r2, r2
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	f042 0220 	orr.w	r2, r2, #32
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	f002 021f 	and.w	r2, r2, #31
 80015d6:	2101      	movs	r1, #1
 80015d8:	fa01 f202 	lsl.w	r2, r1, r2
 80015dc:	4013      	ands	r3, r2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0ab      	beq.n	800153a <HAL_RCC_OscConfig+0x1b6>
 80015e2:	e05c      	b.n	800169e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fb6e 	bl	8000cc4 <HAL_GetTick>
 80015e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ec:	e00a      	b.n	8001604 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ee:	f7ff fb69 	bl	8000cc4 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d902      	bls.n	8001604 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	f000 bf0d 	b.w	800241e <HAL_RCC_OscConfig+0x109a>
 8001604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001608:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001610:	fa93 f3a3 	rbit	r3, r3
 8001614:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001618:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161c:	fab3 f383 	clz	r3, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	b2db      	uxtb	r3, r3
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b01      	cmp	r3, #1
 800162e:	d102      	bne.n	8001636 <HAL_RCC_OscConfig+0x2b2>
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	e015      	b.n	8001662 <HAL_RCC_OscConfig+0x2de>
 8001636:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800163a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800164a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800164e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001652:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001656:	fa93 f3a3 	rbit	r3, r3
 800165a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <HAL_RCC_OscConfig+0x314>)
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001666:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800166a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800166e:	fa92 f2a2 	rbit	r2, r2
 8001672:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001676:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800167a:	fab2 f282 	clz	r2, r2
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	f042 0220 	orr.w	r2, r2, #32
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	f002 021f 	and.w	r2, r2, #31
 800168a:	2101      	movs	r1, #1
 800168c:	fa01 f202 	lsl.w	r2, r1, r2
 8001690:	4013      	ands	r3, r2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1ab      	bne.n	80015ee <HAL_RCC_OscConfig+0x26a>
 8001696:	e002      	b.n	800169e <HAL_RCC_OscConfig+0x31a>
 8001698:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 817f 	beq.w	80019b2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016b4:	4ba7      	ldr	r3, [pc, #668]	; (8001954 <HAL_RCC_OscConfig+0x5d0>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 030c 	and.w	r3, r3, #12
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00c      	beq.n	80016da <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016c0:	4ba4      	ldr	r3, [pc, #656]	; (8001954 <HAL_RCC_OscConfig+0x5d0>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 030c 	and.w	r3, r3, #12
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d173      	bne.n	80017b4 <HAL_RCC_OscConfig+0x430>
 80016cc:	4ba1      	ldr	r3, [pc, #644]	; (8001954 <HAL_RCC_OscConfig+0x5d0>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80016d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016d8:	d16c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x430>
 80016da:	2302      	movs	r3, #2
 80016dc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80016e4:	fa93 f3a3 	rbit	r3, r3
 80016e8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80016ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f0:	fab3 f383 	clz	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	095b      	lsrs	r3, r3, #5
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	2b01      	cmp	r3, #1
 8001702:	d102      	bne.n	800170a <HAL_RCC_OscConfig+0x386>
 8001704:	4b93      	ldr	r3, [pc, #588]	; (8001954 <HAL_RCC_OscConfig+0x5d0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	e013      	b.n	8001732 <HAL_RCC_OscConfig+0x3ae>
 800170a:	2302      	movs	r3, #2
 800170c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001710:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001714:	fa93 f3a3 	rbit	r3, r3
 8001718:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800171c:	2302      	movs	r3, #2
 800171e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001722:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800172e:	4b89      	ldr	r3, [pc, #548]	; (8001954 <HAL_RCC_OscConfig+0x5d0>)
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	2202      	movs	r2, #2
 8001734:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001738:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800173c:	fa92 f2a2 	rbit	r2, r2
 8001740:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001744:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001748:	fab2 f282 	clz	r2, r2
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	f042 0220 	orr.w	r2, r2, #32
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	f002 021f 	and.w	r2, r2, #31
 8001758:	2101      	movs	r1, #1
 800175a:	fa01 f202 	lsl.w	r2, r1, r2
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00a      	beq.n	800177a <HAL_RCC_OscConfig+0x3f6>
 8001764:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001768:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d002      	beq.n	800177a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	f000 be52 	b.w	800241e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177a:	4b76      	ldr	r3, [pc, #472]	; (8001954 <HAL_RCC_OscConfig+0x5d0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001782:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001786:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	21f8      	movs	r1, #248	; 0xf8
 8001790:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001794:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001798:	fa91 f1a1 	rbit	r1, r1
 800179c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80017a0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80017a4:	fab1 f181 	clz	r1, r1
 80017a8:	b2c9      	uxtb	r1, r1
 80017aa:	408b      	lsls	r3, r1
 80017ac:	4969      	ldr	r1, [pc, #420]	; (8001954 <HAL_RCC_OscConfig+0x5d0>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b2:	e0fe      	b.n	80019b2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 8088 	beq.w	80018d6 <HAL_RCC_OscConfig+0x552>
 80017c6:	2301      	movs	r3, #1
 80017c8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80017d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017dc:	fab3 f383 	clz	r3, r3
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	461a      	mov	r2, r3
 80017ee:	2301      	movs	r3, #1
 80017f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f2:	f7ff fa67 	bl	8000cc4 <HAL_GetTick>
 80017f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	e00a      	b.n	8001812 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fc:	f7ff fa62 	bl	8000cc4 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d902      	bls.n	8001812 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	f000 be06 	b.w	800241e <HAL_RCC_OscConfig+0x109a>
 8001812:	2302      	movs	r3, #2
 8001814:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001818:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800181c:	fa93 f3a3 	rbit	r3, r3
 8001820:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001824:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001828:	fab3 f383 	clz	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d102      	bne.n	8001842 <HAL_RCC_OscConfig+0x4be>
 800183c:	4b45      	ldr	r3, [pc, #276]	; (8001954 <HAL_RCC_OscConfig+0x5d0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e013      	b.n	800186a <HAL_RCC_OscConfig+0x4e6>
 8001842:	2302      	movs	r3, #2
 8001844:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001854:	2302      	movs	r3, #2
 8001856:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800185a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800185e:	fa93 f3a3 	rbit	r3, r3
 8001862:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_RCC_OscConfig+0x5d0>)
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	2202      	movs	r2, #2
 800186c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001870:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001874:	fa92 f2a2 	rbit	r2, r2
 8001878:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800187c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001880:	fab2 f282 	clz	r2, r2
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	f042 0220 	orr.w	r2, r2, #32
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	f002 021f 	and.w	r2, r2, #31
 8001890:	2101      	movs	r1, #1
 8001892:	fa01 f202 	lsl.w	r2, r1, r2
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0af      	beq.n	80017fc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <HAL_RCC_OscConfig+0x5d0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	21f8      	movs	r1, #248	; 0xf8
 80018b2:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80018ba:	fa91 f1a1 	rbit	r1, r1
 80018be:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80018c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80018c6:	fab1 f181 	clz	r1, r1
 80018ca:	b2c9      	uxtb	r1, r1
 80018cc:	408b      	lsls	r3, r1
 80018ce:	4921      	ldr	r1, [pc, #132]	; (8001954 <HAL_RCC_OscConfig+0x5d0>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
 80018d4:	e06d      	b.n	80019b2 <HAL_RCC_OscConfig+0x62e>
 80018d6:	2301      	movs	r3, #1
 80018d8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80018e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ec:	fab3 f383 	clz	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018f6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	461a      	mov	r2, r3
 80018fe:	2300      	movs	r3, #0
 8001900:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001902:	f7ff f9df 	bl	8000cc4 <HAL_GetTick>
 8001906:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	e00a      	b.n	8001922 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190c:	f7ff f9da 	bl	8000cc4 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d902      	bls.n	8001922 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	f000 bd7e 	b.w	800241e <HAL_RCC_OscConfig+0x109a>
 8001922:	2302      	movs	r3, #2
 8001924:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800192c:	fa93 f3a3 	rbit	r3, r3
 8001930:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001934:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001938:	fab3 f383 	clz	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0x5d4>
 800194c:	4b01      	ldr	r3, [pc, #4]	; (8001954 <HAL_RCC_OscConfig+0x5d0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	e016      	b.n	8001980 <HAL_RCC_OscConfig+0x5fc>
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	2302      	movs	r3, #2
 800195a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800196a:	2302      	movs	r3, #2
 800196c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001970:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001974:	fa93 f3a3 	rbit	r3, r3
 8001978:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800197c:	4bbf      	ldr	r3, [pc, #764]	; (8001c7c <HAL_RCC_OscConfig+0x8f8>)
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	2202      	movs	r2, #2
 8001982:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001986:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800198a:	fa92 f2a2 	rbit	r2, r2
 800198e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001992:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001996:	fab2 f282 	clz	r2, r2
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	f042 0220 	orr.w	r2, r2, #32
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	f002 021f 	and.w	r2, r2, #31
 80019a6:	2101      	movs	r1, #1
 80019a8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1ac      	bne.n	800190c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0308 	and.w	r3, r3, #8
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8113 	beq.w	8001bee <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d07c      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x74e>
 80019d8:	2301      	movs	r3, #1
 80019da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80019ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
 80019f6:	4ba2      	ldr	r3, [pc, #648]	; (8001c80 <HAL_RCC_OscConfig+0x8fc>)
 80019f8:	4413      	add	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	461a      	mov	r2, r3
 80019fe:	2301      	movs	r3, #1
 8001a00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a02:	f7ff f95f 	bl	8000cc4 <HAL_GetTick>
 8001a06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0c:	f7ff f95a 	bl	8000cc4 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d902      	bls.n	8001a22 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	f000 bcfe 	b.w	800241e <HAL_RCC_OscConfig+0x109a>
 8001a22:	2302      	movs	r3, #2
 8001a24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a2c:	fa93 f2a3 	rbit	r2, r3
 8001a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a34:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a42:	2202      	movs	r2, #2
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	fa93 f2a3 	rbit	r2, r3
 8001a54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a66:	2202      	movs	r2, #2
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	fa93 f2a3 	rbit	r2, r3
 8001a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a82:	4b7e      	ldr	r3, [pc, #504]	; (8001c7c <HAL_RCC_OscConfig+0x8f8>)
 8001a84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a8a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a8e:	2102      	movs	r1, #2
 8001a90:	6019      	str	r1, [r3, #0]
 8001a92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	fa93 f1a3 	rbit	r1, r3
 8001aa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001aa8:	6019      	str	r1, [r3, #0]
  return result;
 8001aaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d09d      	beq.n	8001a0c <HAL_RCC_OscConfig+0x688>
 8001ad0:	e08d      	b.n	8001bee <HAL_RCC_OscConfig+0x86a>
 8001ad2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ade:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	fa93 f2a3 	rbit	r2, r3
 8001aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001af4:	601a      	str	r2, [r3, #0]
  return result;
 8001af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001afa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001afe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	4b5d      	ldr	r3, [pc, #372]	; (8001c80 <HAL_RCC_OscConfig+0x8fc>)
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2300      	movs	r3, #0
 8001b12:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b14:	f7ff f8d6 	bl	8000cc4 <HAL_GetTick>
 8001b18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b1e:	f7ff f8d1 	bl	8000cc4 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d902      	bls.n	8001b34 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	f000 bc75 	b.w	800241e <HAL_RCC_OscConfig+0x109a>
 8001b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b44:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	fa93 f2a3 	rbit	r2, r3
 8001b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b60:	2202      	movs	r2, #2
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	fa93 f2a3 	rbit	r2, r3
 8001b72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b84:	2202      	movs	r2, #2
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	fa93 f2a3 	rbit	r2, r3
 8001b96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b9e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba0:	4b36      	ldr	r3, [pc, #216]	; (8001c7c <HAL_RCC_OscConfig+0x8f8>)
 8001ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001bac:	2102      	movs	r1, #2
 8001bae:	6019      	str	r1, [r3, #0]
 8001bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	fa93 f1a3 	rbit	r1, r3
 8001bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001bc6:	6019      	str	r1, [r3, #0]
  return result;
 8001bc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bcc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	2101      	movs	r1, #1
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d197      	bne.n	8001b1e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 81a5 	beq.w	8001f4e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <HAL_RCC_OscConfig+0x8f8>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d116      	bne.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <HAL_RCC_OscConfig+0x8f8>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <HAL_RCC_OscConfig+0x8f8>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c20:	61d3      	str	r3, [r2, #28]
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <HAL_RCC_OscConfig+0x8f8>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c3c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_RCC_OscConfig+0x900>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d121      	bne.n	8001c94 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_RCC_OscConfig+0x900>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0b      	ldr	r2, [pc, #44]	; (8001c84 <HAL_RCC_OscConfig+0x900>)
 8001c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5c:	f7ff f832 	bl	8000cc4 <HAL_GetTick>
 8001c60:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c64:	e010      	b.n	8001c88 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c66:	f7ff f82d 	bl	8000cc4 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	; 0x64
 8001c74:	d908      	bls.n	8001c88 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e3d1      	b.n	800241e <HAL_RCC_OscConfig+0x109a>
 8001c7a:	bf00      	nop
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	10908120 	.word	0x10908120
 8001c84:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	4b8d      	ldr	r3, [pc, #564]	; (8001ec0 <HAL_RCC_OscConfig+0xb3c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0e8      	beq.n	8001c66 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x92e>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6213      	str	r3, [r2, #32]
 8001cb0:	e035      	b.n	8001d1e <HAL_RCC_OscConfig+0x99a>
 8001cb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x958>
 8001cc2:	4b80      	ldr	r3, [pc, #512]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4a7f      	ldr	r2, [pc, #508]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	6213      	str	r3, [r2, #32]
 8001cce:	4b7d      	ldr	r3, [pc, #500]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4a7c      	ldr	r2, [pc, #496]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001cd4:	f023 0304 	bic.w	r3, r3, #4
 8001cd8:	6213      	str	r3, [r2, #32]
 8001cda:	e020      	b.n	8001d1e <HAL_RCC_OscConfig+0x99a>
 8001cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b05      	cmp	r3, #5
 8001cea:	d10c      	bne.n	8001d06 <HAL_RCC_OscConfig+0x982>
 8001cec:	4b75      	ldr	r3, [pc, #468]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a74      	ldr	r2, [pc, #464]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	4b72      	ldr	r3, [pc, #456]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a71      	ldr	r2, [pc, #452]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6213      	str	r3, [r2, #32]
 8001d04:	e00b      	b.n	8001d1e <HAL_RCC_OscConfig+0x99a>
 8001d06:	4b6f      	ldr	r3, [pc, #444]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a6e      	ldr	r2, [pc, #440]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	6213      	str	r3, [r2, #32]
 8001d12:	4b6c      	ldr	r3, [pc, #432]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4a6b      	ldr	r2, [pc, #428]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001d18:	f023 0304 	bic.w	r3, r3, #4
 8001d1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d22:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8081 	beq.w	8001e32 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d30:	f7fe ffc8 	bl	8000cc4 <HAL_GetTick>
 8001d34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d38:	e00b      	b.n	8001d52 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3a:	f7fe ffc3 	bl	8000cc4 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e365      	b.n	800241e <HAL_RCC_OscConfig+0x109a>
 8001d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d56:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	fa93 f2a3 	rbit	r2, r3
 8001d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d70:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d7a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d7e:	2202      	movs	r2, #2
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d86:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	fa93 f2a3 	rbit	r2, r3
 8001d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d94:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001d98:	601a      	str	r2, [r3, #0]
  return result;
 8001d9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d9e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001da2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da4:	fab3 f383 	clz	r3, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	f043 0302 	orr.w	r3, r3, #2
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d102      	bne.n	8001dbe <HAL_RCC_OscConfig+0xa3a>
 8001db8:	4b42      	ldr	r3, [pc, #264]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	e013      	b.n	8001de6 <HAL_RCC_OscConfig+0xa62>
 8001dbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dc2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	fa93 f2a3 	rbit	r2, r3
 8001dd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ddc:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001dea:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001dee:	2102      	movs	r1, #2
 8001df0:	6011      	str	r1, [r2, #0]
 8001df2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001df6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	fa92 f1a2 	rbit	r1, r2
 8001e00:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e04:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001e08:	6011      	str	r1, [r2, #0]
  return result;
 8001e0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e0e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	fab2 f282 	clz	r2, r2
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	f002 021f 	and.w	r2, r2, #31
 8001e24:	2101      	movs	r1, #1
 8001e26:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d084      	beq.n	8001d3a <HAL_RCC_OscConfig+0x9b6>
 8001e30:	e083      	b.n	8001f3a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e32:	f7fe ff47 	bl	8000cc4 <HAL_GetTick>
 8001e36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3a:	e00b      	b.n	8001e54 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e3c:	f7fe ff42 	bl	8000cc4 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e2e4      	b.n	800241e <HAL_RCC_OscConfig+0x109a>
 8001e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e58:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e64:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fa93 f2a3 	rbit	r2, r3
 8001e6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e72:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e7c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e80:	2202      	movs	r2, #2
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	fa93 f2a3 	rbit	r2, r3
 8001e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e96:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001e9a:	601a      	str	r2, [r3, #0]
  return result;
 8001e9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ea4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	095b      	lsrs	r3, r3, #5
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d106      	bne.n	8001ec8 <HAL_RCC_OscConfig+0xb44>
 8001eba:	4b02      	ldr	r3, [pc, #8]	; (8001ec4 <HAL_RCC_OscConfig+0xb40>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	e017      	b.n	8001ef0 <HAL_RCC_OscConfig+0xb6c>
 8001ec0:	40007000 	.word	0x40007000
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ecc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	fa93 f2a3 	rbit	r2, r3
 8001ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	4bb3      	ldr	r3, [pc, #716]	; (80021bc <HAL_RCC_OscConfig+0xe38>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ef4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001ef8:	2102      	movs	r1, #2
 8001efa:	6011      	str	r1, [r2, #0]
 8001efc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f00:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	fa92 f1a2 	rbit	r1, r2
 8001f0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f0e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001f12:	6011      	str	r1, [r2, #0]
  return result;
 8001f14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f18:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	fab2 f282 	clz	r2, r2
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	f002 021f 	and.w	r2, r2, #31
 8001f2e:	2101      	movs	r1, #1
 8001f30:	fa01 f202 	lsl.w	r2, r1, r2
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d180      	bne.n	8001e3c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f3a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d105      	bne.n	8001f4e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f42:	4b9e      	ldr	r3, [pc, #632]	; (80021bc <HAL_RCC_OscConfig+0xe38>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	4a9d      	ldr	r2, [pc, #628]	; (80021bc <HAL_RCC_OscConfig+0xe38>)
 8001f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f000 825e 	beq.w	800241c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f60:	4b96      	ldr	r3, [pc, #600]	; (80021bc <HAL_RCC_OscConfig+0xe38>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 030c 	and.w	r3, r3, #12
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	f000 821f 	beq.w	80023ac <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	f040 8170 	bne.w	8002260 <HAL_RCC_OscConfig+0xedc>
 8001f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f84:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f92:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fa93 f2a3 	rbit	r2, r3
 8001f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fa4:	601a      	str	r2, [r3, #0]
  return result;
 8001fa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001faa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001fae:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb0:	fab3 f383 	clz	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fe7d 	bl	8000cc4 <HAL_GetTick>
 8001fca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fce:	e009      	b.n	8001fe4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7fe fe78 	bl	8000cc4 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e21c      	b.n	800241e <HAL_RCC_OscConfig+0x109a>
 8001fe4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001fec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	fa93 f2a3 	rbit	r2, r3
 8002000:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002004:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002008:	601a      	str	r2, [r3, #0]
  return result;
 800200a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002012:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002014:	fab3 f383 	clz	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b01      	cmp	r3, #1
 8002026:	d102      	bne.n	800202e <HAL_RCC_OscConfig+0xcaa>
 8002028:	4b64      	ldr	r3, [pc, #400]	; (80021bc <HAL_RCC_OscConfig+0xe38>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	e027      	b.n	800207e <HAL_RCC_OscConfig+0xcfa>
 800202e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002032:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002036:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800203a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002040:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	fa93 f2a3 	rbit	r2, r3
 800204a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002058:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800205c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002066:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	fa93 f2a3 	rbit	r2, r3
 8002070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002074:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	4b50      	ldr	r3, [pc, #320]	; (80021bc <HAL_RCC_OscConfig+0xe38>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002082:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002086:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800208a:	6011      	str	r1, [r2, #0]
 800208c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002090:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002094:	6812      	ldr	r2, [r2, #0]
 8002096:	fa92 f1a2 	rbit	r1, r2
 800209a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800209e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80020a2:	6011      	str	r1, [r2, #0]
  return result;
 80020a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020a8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80020ac:	6812      	ldr	r2, [r2, #0]
 80020ae:	fab2 f282 	clz	r2, r2
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f042 0220 	orr.w	r2, r2, #32
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	f002 021f 	and.w	r2, r2, #31
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f202 	lsl.w	r2, r1, r2
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d182      	bne.n	8001fd0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ca:	4b3c      	ldr	r3, [pc, #240]	; (80021bc <HAL_RCC_OscConfig+0xe38>)
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	f023 020f 	bic.w	r2, r3, #15
 80020d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	4937      	ldr	r1, [pc, #220]	; (80021bc <HAL_RCC_OscConfig+0xe38>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80020e4:	4b35      	ldr	r3, [pc, #212]	; (80021bc <HAL_RCC_OscConfig+0xe38>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80020ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6a19      	ldr	r1, [r3, #32]
 80020f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	430b      	orrs	r3, r1
 8002106:	492d      	ldr	r1, [pc, #180]	; (80021bc <HAL_RCC_OscConfig+0xe38>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
 800210c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002110:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002114:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002118:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002130:	601a      	str	r2, [r3, #0]
  return result;
 8002132:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002136:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800213a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002146:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	461a      	mov	r2, r3
 800214e:	2301      	movs	r3, #1
 8002150:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7fe fdb7 	bl	8000cc4 <HAL_GetTick>
 8002156:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800215a:	e009      	b.n	8002170 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215c:	f7fe fdb2 	bl	8000cc4 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e156      	b.n	800241e <HAL_RCC_OscConfig+0x109a>
 8002170:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002174:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002178:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800217c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002182:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	fa93 f2a3 	rbit	r2, r3
 800218c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002190:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002194:	601a      	str	r2, [r3, #0]
  return result;
 8002196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800219e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d105      	bne.n	80021c0 <HAL_RCC_OscConfig+0xe3c>
 80021b4:	4b01      	ldr	r3, [pc, #4]	; (80021bc <HAL_RCC_OscConfig+0xe38>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	e02a      	b.n	8002210 <HAL_RCC_OscConfig+0xe8c>
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80021c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	fa93 f2a3 	rbit	r2, r3
 80021dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ea:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80021ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	fa93 f2a3 	rbit	r2, r3
 8002202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002206:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	4b86      	ldr	r3, [pc, #536]	; (8002428 <HAL_RCC_OscConfig+0x10a4>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002214:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002218:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800221c:	6011      	str	r1, [r2, #0]
 800221e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002222:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	fa92 f1a2 	rbit	r1, r2
 800222c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002230:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002234:	6011      	str	r1, [r2, #0]
  return result;
 8002236:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800223a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	fab2 f282 	clz	r2, r2
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	f042 0220 	orr.w	r2, r2, #32
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	f002 021f 	and.w	r2, r2, #31
 8002250:	2101      	movs	r1, #1
 8002252:	fa01 f202 	lsl.w	r2, r1, r2
 8002256:	4013      	ands	r3, r2
 8002258:	2b00      	cmp	r3, #0
 800225a:	f43f af7f 	beq.w	800215c <HAL_RCC_OscConfig+0xdd8>
 800225e:	e0dd      	b.n	800241c <HAL_RCC_OscConfig+0x1098>
 8002260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002264:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002268:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800226c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002272:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	fa93 f2a3 	rbit	r2, r3
 800227c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002280:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002284:	601a      	str	r2, [r3, #0]
  return result;
 8002286:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800228e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800229a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	461a      	mov	r2, r3
 80022a2:	2300      	movs	r3, #0
 80022a4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7fe fd0d 	bl	8000cc4 <HAL_GetTick>
 80022aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ae:	e009      	b.n	80022c4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b0:	f7fe fd08 	bl	8000cc4 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e0ac      	b.n	800241e <HAL_RCC_OscConfig+0x109a>
 80022c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80022cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	fa93 f2a3 	rbit	r2, r3
 80022e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022e8:	601a      	str	r2, [r3, #0]
  return result;
 80022ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ee:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80022f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b01      	cmp	r3, #1
 8002306:	d102      	bne.n	800230e <HAL_RCC_OscConfig+0xf8a>
 8002308:	4b47      	ldr	r3, [pc, #284]	; (8002428 <HAL_RCC_OscConfig+0x10a4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	e027      	b.n	800235e <HAL_RCC_OscConfig+0xfda>
 800230e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002312:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002316:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800231a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002320:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	fa93 f2a3 	rbit	r2, r3
 800232a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002338:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800233c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002346:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	fa93 f2a3 	rbit	r2, r3
 8002350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002354:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	4b33      	ldr	r3, [pc, #204]	; (8002428 <HAL_RCC_OscConfig+0x10a4>)
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002362:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002366:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800236a:	6011      	str	r1, [r2, #0]
 800236c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002370:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	fa92 f1a2 	rbit	r1, r2
 800237a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800237e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002382:	6011      	str	r1, [r2, #0]
  return result;
 8002384:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002388:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	fab2 f282 	clz	r2, r2
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	f042 0220 	orr.w	r2, r2, #32
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f002 021f 	and.w	r2, r2, #31
 800239e:	2101      	movs	r1, #1
 80023a0:	fa01 f202 	lsl.w	r2, r1, r2
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d182      	bne.n	80022b0 <HAL_RCC_OscConfig+0xf2c>
 80023aa:	e037      	b.n	800241c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e02e      	b.n	800241e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_RCC_OscConfig+0x10a4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80023c8:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_RCC_OscConfig+0x10a4>)
 80023ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023cc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80023d4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80023d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d117      	bne.n	8002418 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023e8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80023ec:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d10b      	bne.n	8002418 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002400:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002404:	f003 020f 	and.w	r2, r3, #15
 8002408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000

0800242c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b09e      	sub	sp, #120	; 0x78
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e162      	b.n	800270a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002444:	4b90      	ldr	r3, [pc, #576]	; (8002688 <HAL_RCC_ClockConfig+0x25c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d910      	bls.n	8002474 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b8d      	ldr	r3, [pc, #564]	; (8002688 <HAL_RCC_ClockConfig+0x25c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 0207 	bic.w	r2, r3, #7
 800245a:	498b      	ldr	r1, [pc, #556]	; (8002688 <HAL_RCC_ClockConfig+0x25c>)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b89      	ldr	r3, [pc, #548]	; (8002688 <HAL_RCC_ClockConfig+0x25c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e14a      	b.n	800270a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	4b82      	ldr	r3, [pc, #520]	; (800268c <HAL_RCC_ClockConfig+0x260>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	497f      	ldr	r1, [pc, #508]	; (800268c <HAL_RCC_ClockConfig+0x260>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80dc 	beq.w	8002658 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d13c      	bne.n	8002522 <HAL_RCC_ClockConfig+0xf6>
 80024a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80024b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d102      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xa6>
 80024cc:	4b6f      	ldr	r3, [pc, #444]	; (800268c <HAL_RCC_ClockConfig+0x260>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	e00f      	b.n	80024f2 <HAL_RCC_ClockConfig+0xc6>
 80024d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	667b      	str	r3, [r7, #100]	; 0x64
 80024e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e4:	663b      	str	r3, [r7, #96]	; 0x60
 80024e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024ee:	4b67      	ldr	r3, [pc, #412]	; (800268c <HAL_RCC_ClockConfig+0x260>)
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80024f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024fa:	fa92 f2a2 	rbit	r2, r2
 80024fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002500:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002502:	fab2 f282 	clz	r2, r2
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	f042 0220 	orr.w	r2, r2, #32
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	f002 021f 	and.w	r2, r2, #31
 8002512:	2101      	movs	r1, #1
 8002514:	fa01 f202 	lsl.w	r2, r1, r2
 8002518:	4013      	ands	r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d17b      	bne.n	8002616 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0f3      	b.n	800270a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d13c      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x178>
 800252a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800252e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d102      	bne.n	8002554 <HAL_RCC_ClockConfig+0x128>
 800254e:	4b4f      	ldr	r3, [pc, #316]	; (800268c <HAL_RCC_ClockConfig+0x260>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	e00f      	b.n	8002574 <HAL_RCC_ClockConfig+0x148>
 8002554:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002558:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	647b      	str	r3, [r7, #68]	; 0x44
 8002562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002566:	643b      	str	r3, [r7, #64]	; 0x40
 8002568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002570:	4b46      	ldr	r3, [pc, #280]	; (800268c <HAL_RCC_ClockConfig+0x260>)
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002578:	63ba      	str	r2, [r7, #56]	; 0x38
 800257a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800257c:	fa92 f2a2 	rbit	r2, r2
 8002580:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002584:	fab2 f282 	clz	r2, r2
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	f042 0220 	orr.w	r2, r2, #32
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	f002 021f 	and.w	r2, r2, #31
 8002594:	2101      	movs	r1, #1
 8002596:	fa01 f202 	lsl.w	r2, r1, r2
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d13a      	bne.n	8002616 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0b2      	b.n	800270a <HAL_RCC_ClockConfig+0x2de>
 80025a4:	2302      	movs	r3, #2
 80025a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b2:	fab3 f383 	clz	r3, r3
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d102      	bne.n	80025cc <HAL_RCC_ClockConfig+0x1a0>
 80025c6:	4b31      	ldr	r3, [pc, #196]	; (800268c <HAL_RCC_ClockConfig+0x260>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	e00d      	b.n	80025e8 <HAL_RCC_ClockConfig+0x1bc>
 80025cc:	2302      	movs	r3, #2
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
 80025d8:	2302      	movs	r3, #2
 80025da:	623b      	str	r3, [r7, #32]
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	4b29      	ldr	r3, [pc, #164]	; (800268c <HAL_RCC_ClockConfig+0x260>)
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	2202      	movs	r2, #2
 80025ea:	61ba      	str	r2, [r7, #24]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	fa92 f2a2 	rbit	r2, r2
 80025f2:	617a      	str	r2, [r7, #20]
  return result;
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	fab2 f282 	clz	r2, r2
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	f042 0220 	orr.w	r2, r2, #32
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	f002 021f 	and.w	r2, r2, #31
 8002606:	2101      	movs	r1, #1
 8002608:	fa01 f202 	lsl.w	r2, r1, r2
 800260c:	4013      	ands	r3, r2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e079      	b.n	800270a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002616:	4b1d      	ldr	r3, [pc, #116]	; (800268c <HAL_RCC_ClockConfig+0x260>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f023 0203 	bic.w	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	491a      	ldr	r1, [pc, #104]	; (800268c <HAL_RCC_ClockConfig+0x260>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002628:	f7fe fb4c 	bl	8000cc4 <HAL_GetTick>
 800262c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	e00a      	b.n	8002646 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002630:	f7fe fb48 	bl	8000cc4 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	; 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e061      	b.n	800270a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	4b11      	ldr	r3, [pc, #68]	; (800268c <HAL_RCC_ClockConfig+0x260>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 020c 	and.w	r2, r3, #12
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	429a      	cmp	r2, r3
 8002656:	d1eb      	bne.n	8002630 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_ClockConfig+0x25c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d214      	bcs.n	8002690 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b08      	ldr	r3, [pc, #32]	; (8002688 <HAL_RCC_ClockConfig+0x25c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 0207 	bic.w	r2, r3, #7
 800266e:	4906      	ldr	r1, [pc, #24]	; (8002688 <HAL_RCC_ClockConfig+0x25c>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b04      	ldr	r3, [pc, #16]	; (8002688 <HAL_RCC_ClockConfig+0x25c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d005      	beq.n	8002690 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e040      	b.n	800270a <HAL_RCC_ClockConfig+0x2de>
 8002688:	40022000 	.word	0x40022000
 800268c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCC_ClockConfig+0x2e8>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	491a      	ldr	r1, [pc, #104]	; (8002714 <HAL_RCC_ClockConfig+0x2e8>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <HAL_RCC_ClockConfig+0x2e8>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4912      	ldr	r1, [pc, #72]	; (8002714 <HAL_RCC_ClockConfig+0x2e8>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026ce:	f000 f829 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80026d2:	4601      	mov	r1, r0
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <HAL_RCC_ClockConfig+0x2e8>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026dc:	22f0      	movs	r2, #240	; 0xf0
 80026de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	fa92 f2a2 	rbit	r2, r2
 80026e6:	60fa      	str	r2, [r7, #12]
  return result;
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	fab2 f282 	clz	r2, r2
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	40d3      	lsrs	r3, r2
 80026f2:	4a09      	ldr	r2, [pc, #36]	; (8002718 <HAL_RCC_ClockConfig+0x2ec>)
 80026f4:	5cd3      	ldrb	r3, [r2, r3]
 80026f6:	fa21 f303 	lsr.w	r3, r1, r3
 80026fa:	4a08      	ldr	r2, [pc, #32]	; (800271c <HAL_RCC_ClockConfig+0x2f0>)
 80026fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <HAL_RCC_ClockConfig+0x2f4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fa9a 	bl	8000c3c <HAL_InitTick>
  
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3778      	adds	r7, #120	; 0x78
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
 8002718:	080044d4 	.word	0x080044d4
 800271c:	20000000 	.word	0x20000000
 8002720:	20000004 	.word	0x20000004

08002724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800273e:	4b1f      	ldr	r3, [pc, #124]	; (80027bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b04      	cmp	r3, #4
 800274c:	d002      	beq.n	8002754 <HAL_RCC_GetSysClockFreq+0x30>
 800274e:	2b08      	cmp	r3, #8
 8002750:	d003      	beq.n	800275a <HAL_RCC_GetSysClockFreq+0x36>
 8002752:	e029      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002754:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002756:	613b      	str	r3, [r7, #16]
      break;
 8002758:	e029      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	0c9b      	lsrs	r3, r3, #18
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002764:	5cd3      	ldrb	r3, [r2, r3]
 8002766:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002768:	4b14      	ldr	r3, [pc, #80]	; (80027bc <HAL_RCC_GetSysClockFreq+0x98>)
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	f003 030f 	and.w	r3, r3, #15
 8002770:	4a15      	ldr	r2, [pc, #84]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002780:	4a0f      	ldr	r2, [pc, #60]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	fbb2 f2f3 	udiv	r2, r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	e007      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002792:	4a0b      	ldr	r2, [pc, #44]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	fbb2 f2f3 	udiv	r2, r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	fb02 f303 	mul.w	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	613b      	str	r3, [r7, #16]
      break;
 80027a6:	e002      	b.n	80027ae <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027aa:	613b      	str	r3, [r7, #16]
      break;
 80027ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ae:	693b      	ldr	r3, [r7, #16]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	371c      	adds	r7, #28
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	40021000 	.word	0x40021000
 80027c0:	007a1200 	.word	0x007a1200
 80027c4:	080044ec 	.word	0x080044ec
 80027c8:	080044fc 	.word	0x080044fc

080027cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20000000 	.word	0x20000000

080027e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80027ea:	f7ff ffef 	bl	80027cc <HAL_RCC_GetHCLKFreq>
 80027ee:	4601      	mov	r1, r0
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027f8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027fc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	fa92 f2a2 	rbit	r2, r2
 8002804:	603a      	str	r2, [r7, #0]
  return result;
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	fab2 f282 	clz	r2, r2
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	40d3      	lsrs	r3, r2
 8002810:	4a04      	ldr	r2, [pc, #16]	; (8002824 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002812:	5cd3      	ldrb	r3, [r2, r3]
 8002814:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000
 8002824:	080044e4 	.word	0x080044e4

08002828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800282e:	f7ff ffcd 	bl	80027cc <HAL_RCC_GetHCLKFreq>
 8002832:	4601      	mov	r1, r0
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800283c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002840:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	fa92 f2a2 	rbit	r2, r2
 8002848:	603a      	str	r2, [r7, #0]
  return result;
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	fab2 f282 	clz	r2, r2
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	40d3      	lsrs	r3, r2
 8002854:	4a04      	ldr	r2, [pc, #16]	; (8002868 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40021000 	.word	0x40021000
 8002868:	080044e4 	.word	0x080044e4

0800286c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b092      	sub	sp, #72	; 0x48
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800287c:	2300      	movs	r3, #0
 800287e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 80d4 	beq.w	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002890:	4b4e      	ldr	r3, [pc, #312]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10e      	bne.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289c:	4b4b      	ldr	r3, [pc, #300]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	4a4a      	ldr	r2, [pc, #296]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a6:	61d3      	str	r3, [r2, #28]
 80028a8:	4b48      	ldr	r3, [pc, #288]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b4:	2301      	movs	r3, #1
 80028b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ba:	4b45      	ldr	r3, [pc, #276]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d118      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c6:	4b42      	ldr	r3, [pc, #264]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a41      	ldr	r2, [pc, #260]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d2:	f7fe f9f7 	bl	8000cc4 <HAL_GetTick>
 80028d6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d8:	e008      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028da:	f7fe f9f3 	bl	8000cc4 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b64      	cmp	r3, #100	; 0x64
 80028e6:	d901      	bls.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e1d6      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ec:	4b38      	ldr	r3, [pc, #224]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028f8:	4b34      	ldr	r3, [pc, #208]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002900:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 8084 	beq.w	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002914:	429a      	cmp	r2, r3
 8002916:	d07c      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002918:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	461a      	mov	r2, r3
 8002942:	2301      	movs	r3, #1
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800294a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	461a      	mov	r2, r3
 8002966:	2300      	movs	r3, #0
 8002968:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800296a:	4a18      	ldr	r2, [pc, #96]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800296e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d04b      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297a:	f7fe f9a3 	bl	8000cc4 <HAL_GetTick>
 800297e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002980:	e00a      	b.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7fe f99f 	bl	8000cc4 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d901      	bls.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e180      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002998:	2302      	movs	r3, #2
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
 80029a4:	2302      	movs	r3, #2
 80029a6:	623b      	str	r3, [r7, #32]
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	61fb      	str	r3, [r7, #28]
  return result;
 80029b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	095b      	lsrs	r3, r3, #5
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d108      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80029c6:	4b01      	ldr	r3, [pc, #4]	; (80029cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	e00d      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40007000 	.word	0x40007000
 80029d4:	10908100 	.word	0x10908100
 80029d8:	2302      	movs	r3, #2
 80029da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	4b9a      	ldr	r3, [pc, #616]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	2202      	movs	r2, #2
 80029ea:	613a      	str	r2, [r7, #16]
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	fa92 f2a2 	rbit	r2, r2
 80029f2:	60fa      	str	r2, [r7, #12]
  return result;
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	fab2 f282 	clz	r2, r2
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	f002 021f 	and.w	r2, r2, #31
 8002a06:	2101      	movs	r1, #1
 8002a08:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0b7      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a12:	4b8f      	ldr	r3, [pc, #572]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	498c      	ldr	r1, [pc, #560]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d105      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a2c:	4b88      	ldr	r3, [pc, #544]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	4a87      	ldr	r2, [pc, #540]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a44:	4b82      	ldr	r3, [pc, #520]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	f023 0203 	bic.w	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	497f      	ldr	r1, [pc, #508]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a62:	4b7b      	ldr	r3, [pc, #492]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	4978      	ldr	r1, [pc, #480]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a80:	4b73      	ldr	r3, [pc, #460]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	4970      	ldr	r1, [pc, #448]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0320 	and.w	r3, r3, #32
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a9e:	4b6c      	ldr	r3, [pc, #432]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f023 0210 	bic.w	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	4969      	ldr	r1, [pc, #420]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002abc:	4b64      	ldr	r3, [pc, #400]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac8:	4961      	ldr	r1, [pc, #388]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ada:	4b5d      	ldr	r3, [pc, #372]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f023 0220 	bic.w	r2, r3, #32
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	495a      	ldr	r1, [pc, #360]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002af8:	4b55      	ldr	r3, [pc, #340]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	4952      	ldr	r1, [pc, #328]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b16:	4b4e      	ldr	r3, [pc, #312]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	494b      	ldr	r1, [pc, #300]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b34:	4b46      	ldr	r3, [pc, #280]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	4943      	ldr	r1, [pc, #268]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b52:	4b3f      	ldr	r3, [pc, #252]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	493c      	ldr	r1, [pc, #240]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b70:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	4934      	ldr	r1, [pc, #208]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b8e:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	492d      	ldr	r1, [pc, #180]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002bac:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb8:	4925      	ldr	r1, [pc, #148]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002bca:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	491e      	ldr	r1, [pc, #120]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	4916      	ldr	r1, [pc, #88]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002c06:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c12:	490f      	ldr	r1, [pc, #60]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c24:	4b0a      	ldr	r3, [pc, #40]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	4907      	ldr	r1, [pc, #28]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00c      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002c42:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	e002      	b.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c56:	4913      	ldr	r1, [pc, #76]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002c68:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c74:	490b      	ldr	r1, [pc, #44]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d008      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002c86:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c92:	4904      	ldr	r1, [pc, #16]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3748      	adds	r7, #72	; 0x48
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000

08002ca8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e073      	b.n	8002da6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	7f5b      	ldrb	r3, [r3, #29]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d105      	bne.n	8002cd4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7fd fd04 	bl	80006dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b10      	cmp	r3, #16
 8002ce6:	d055      	beq.n	8002d94 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	22ca      	movs	r2, #202	; 0xca
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2253      	movs	r2, #83	; 0x53
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f87f 	bl	8002dfc <RTC_EnterInitMode>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d12c      	bne.n	8002d62 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d1a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6899      	ldr	r1, [r3, #8]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	68d2      	ldr	r2, [r2, #12]
 8002d42:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6919      	ldr	r1, [r3, #16]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	041a      	lsls	r2, r3, #16
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f886 	bl	8002e6a <RTC_ExitInitMode>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d110      	bne.n	8002d8a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	22ff      	movs	r2, #255	; 0xff
 8002d90:	625a      	str	r2, [r3, #36]	; 0x24
 8002d92:	e001      	b.n	8002d98 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d102      	bne.n	8002da4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a0d      	ldr	r2, [pc, #52]	; (8002df8 <HAL_RTC_WaitForSynchro+0x48>)
 8002dc2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dc4:	f7fd ff7e 	bl	8000cc4 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002dca:	e009      	b.n	8002de0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002dcc:	f7fd ff7a 	bl	8000cc4 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dda:	d901      	bls.n	8002de0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e007      	b.n	8002df0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0ee      	beq.n	8002dcc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	0001ff5f 	.word	0x0001ff5f

08002dfc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d122      	bne.n	8002e60 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e28:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e2a:	f7fd ff4b 	bl	8000cc4 <HAL_GetTick>
 8002e2e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002e30:	e00c      	b.n	8002e4c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e32:	f7fd ff47 	bl	8000cc4 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e40:	d904      	bls.n	8002e4c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2204      	movs	r2, #4
 8002e46:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d102      	bne.n	8002e60 <RTC_EnterInitMode+0x64>
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d1e8      	bne.n	8002e32 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e84:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff ff8b 	bl	8002db0 <HAL_RTC_WaitForSynchro>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d004      	beq.n	8002eaa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e040      	b.n	8002f48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fd fcf0 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2224      	movs	r2, #36	; 0x24
 8002ee0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0201 	bic.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fdd0 	bl	8003aa0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fbf9 	bl	80036f8 <UART_SetConfig>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e01b      	b.n	8002f48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fe4f 	bl	8003be4 <UART_CheckIdleState>
 8002f46:	4603      	mov	r3, r0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d178      	bne.n	800305a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_UART_Transmit+0x24>
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e071      	b.n	800305c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2221      	movs	r2, #33	; 0x21
 8002f84:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f86:	f7fd fe9d 	bl	8000cc4 <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	88fa      	ldrh	r2, [r7, #6]
 8002f90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	88fa      	ldrh	r2, [r7, #6]
 8002f98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa4:	d108      	bne.n	8002fb8 <HAL_UART_Transmit+0x68>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	61bb      	str	r3, [r7, #24]
 8002fb6:	e003      	b.n	8002fc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fc0:	e030      	b.n	8003024 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2180      	movs	r1, #128	; 0x80
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 feb1 	bl	8003d34 <UART_WaitOnFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d004      	beq.n	8002fe2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e03c      	b.n	800305c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10b      	bne.n	8003000 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	881a      	ldrh	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff4:	b292      	uxth	r2, r2
 8002ff6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	3302      	adds	r3, #2
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	e008      	b.n	8003012 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	781a      	ldrb	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	b292      	uxth	r2, r2
 800300a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	3301      	adds	r3, #1
 8003010:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003018:	b29b      	uxth	r3, r3
 800301a:	3b01      	subs	r3, #1
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800302a:	b29b      	uxth	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1c8      	bne.n	8002fc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2200      	movs	r2, #0
 8003038:	2140      	movs	r1, #64	; 0x40
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fe7a 	bl	8003d34 <UART_WaitOnFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d004      	beq.n	8003050 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e005      	b.n	800305c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	e000      	b.n	800305c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800305a:	2302      	movs	r3, #2
  }
}
 800305c:	4618      	mov	r0, r3
 800305e:	3720      	adds	r7, #32
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	4613      	mov	r3, r2
 8003070:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003078:	2b20      	cmp	r3, #32
 800307a:	d132      	bne.n	80030e2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_UART_Receive_IT+0x24>
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e02b      	b.n	80030e4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d018      	beq.n	80030d2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	e853 3f00 	ldrex	r3, [r3]
 80030ac:	613b      	str	r3, [r7, #16]
   return(result);
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	623b      	str	r3, [r7, #32]
 80030c0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c2:	69f9      	ldr	r1, [r7, #28]
 80030c4:	6a3a      	ldr	r2, [r7, #32]
 80030c6:	e841 2300 	strex	r3, r2, [r1]
 80030ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1e6      	bne.n	80030a0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	461a      	mov	r2, r3
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	f000 fe99 	bl	8003e10 <UART_Start_Receive_IT>
 80030de:	4603      	mov	r3, r0
 80030e0:	e000      	b.n	80030e4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80030e2:	2302      	movs	r3, #2
  }
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3728      	adds	r7, #40	; 0x28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b0ba      	sub	sp, #232	; 0xe8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003112:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003116:	f640 030f 	movw	r3, #2063	; 0x80f
 800311a:	4013      	ands	r3, r2
 800311c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003124:	2b00      	cmp	r3, #0
 8003126:	d115      	bne.n	8003154 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00f      	beq.n	8003154 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d009      	beq.n	8003154 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 82ab 	beq.w	80036a0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	4798      	blx	r3
      }
      return;
 8003152:	e2a5      	b.n	80036a0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003154:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8117 	beq.w	800338c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800315e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800316a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800316e:	4b85      	ldr	r3, [pc, #532]	; (8003384 <HAL_UART_IRQHandler+0x298>)
 8003170:	4013      	ands	r3, r2
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 810a 	beq.w	800338c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d011      	beq.n	80031a8 <HAL_UART_IRQHandler+0xbc>
 8003184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00b      	beq.n	80031a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2201      	movs	r2, #1
 8003196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319e:	f043 0201 	orr.w	r2, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d011      	beq.n	80031d8 <HAL_UART_IRQHandler+0xec>
 80031b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00b      	beq.n	80031d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2202      	movs	r2, #2
 80031c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ce:	f043 0204 	orr.w	r2, r3, #4
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d011      	beq.n	8003208 <HAL_UART_IRQHandler+0x11c>
 80031e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00b      	beq.n	8003208 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2204      	movs	r2, #4
 80031f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031fe:	f043 0202 	orr.w	r2, r3, #2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320c:	f003 0308 	and.w	r3, r3, #8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d017      	beq.n	8003244 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d105      	bne.n	800322c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003224:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00b      	beq.n	8003244 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2208      	movs	r2, #8
 8003232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800323a:	f043 0208 	orr.w	r2, r3, #8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800324c:	2b00      	cmp	r3, #0
 800324e:	d012      	beq.n	8003276 <HAL_UART_IRQHandler+0x18a>
 8003250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003254:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00c      	beq.n	8003276 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003264:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 8211 	beq.w	80036a4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00d      	beq.n	80032aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800328e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003292:	f003 0320 	and.w	r3, r3, #32
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b40      	cmp	r3, #64	; 0x40
 80032c0:	d005      	beq.n	80032ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d04f      	beq.n	800336e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fe64 	bl	8003f9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d141      	bne.n	8003366 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3308      	adds	r3, #8
 80032e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032f0:	e853 3f00 	ldrex	r3, [r3]
 80032f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80032f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003300:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3308      	adds	r3, #8
 800330a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800330e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003316:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800331a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800331e:	e841 2300 	strex	r3, r2, [r1]
 8003322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1d9      	bne.n	80032e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003332:	2b00      	cmp	r3, #0
 8003334:	d013      	beq.n	800335e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333a:	4a13      	ldr	r2, [pc, #76]	; (8003388 <HAL_UART_IRQHandler+0x29c>)
 800333c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd fe3d 	bl	8000fc2 <HAL_DMA_Abort_IT>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d017      	beq.n	800337e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003358:	4610      	mov	r0, r2
 800335a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335c:	e00f      	b.n	800337e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f9b4 	bl	80036cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003364:	e00b      	b.n	800337e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f9b0 	bl	80036cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336c:	e007      	b.n	800337e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f9ac 	bl	80036cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800337c:	e192      	b.n	80036a4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800337e:	bf00      	nop
    return;
 8003380:	e190      	b.n	80036a4 <HAL_UART_IRQHandler+0x5b8>
 8003382:	bf00      	nop
 8003384:	04000120 	.word	0x04000120
 8003388:	08004065 	.word	0x08004065

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003390:	2b01      	cmp	r3, #1
 8003392:	f040 814b 	bne.w	800362c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8144 	beq.w	800362c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 813d 	beq.w	800362c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2210      	movs	r2, #16
 80033b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c4:	2b40      	cmp	r3, #64	; 0x40
 80033c6:	f040 80b5 	bne.w	8003534 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8164 	beq.w	80036a8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80033e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033ea:	429a      	cmp	r2, r3
 80033ec:	f080 815c 	bcs.w	80036a8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b20      	cmp	r3, #32
 8003402:	f000 8086 	beq.w	8003512 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003412:	e853 3f00 	ldrex	r3, [r3]
 8003416:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800341a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800341e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003422:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003430:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003434:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800343c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003440:	e841 2300 	strex	r3, r2, [r1]
 8003444:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1da      	bne.n	8003406 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3308      	adds	r3, #8
 8003456:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003462:	f023 0301 	bic.w	r3, r3, #1
 8003466:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3308      	adds	r3, #8
 8003470:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003474:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003478:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800347c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003480:	e841 2300 	strex	r3, r2, [r1]
 8003484:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003486:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e1      	bne.n	8003450 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3308      	adds	r3, #8
 8003492:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003496:	e853 3f00 	ldrex	r3, [r3]
 800349a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800349c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800349e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3308      	adds	r3, #8
 80034ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034b8:	e841 2300 	strex	r3, r2, [r1]
 80034bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1e3      	bne.n	800348c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034da:	e853 3f00 	ldrex	r3, [r3]
 80034de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e2:	f023 0310 	bic.w	r3, r3, #16
 80034e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80034f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034fc:	e841 2300 	strex	r3, r2, [r1]
 8003500:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e4      	bne.n	80034d2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd fd1a 	bl	8000f46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2202      	movs	r2, #2
 8003516:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003524:	b29b      	uxth	r3, r3
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	b29b      	uxth	r3, r3
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f8d7 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003532:	e0b9      	b.n	80036a8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003540:	b29b      	uxth	r3, r3
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80ab 	beq.w	80036ac <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003556:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 80a6 	beq.w	80036ac <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003568:	e853 3f00 	ldrex	r3, [r3]
 800356c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800356e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003570:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003574:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	461a      	mov	r2, r3
 800357e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003582:	647b      	str	r3, [r7, #68]	; 0x44
 8003584:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003586:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003588:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800358a:	e841 2300 	strex	r3, r2, [r1]
 800358e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1e4      	bne.n	8003560 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3308      	adds	r3, #8
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	e853 3f00 	ldrex	r3, [r3]
 80035a4:	623b      	str	r3, [r7, #32]
   return(result);
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3308      	adds	r3, #8
 80035b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035ba:	633a      	str	r2, [r7, #48]	; 0x30
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c2:	e841 2300 	strex	r3, r2, [r1]
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e3      	bne.n	8003596 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	e853 3f00 	ldrex	r3, [r3]
 80035ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 0310 	bic.w	r3, r3, #16
 80035f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003608:	69b9      	ldr	r1, [r7, #24]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	e841 2300 	strex	r3, r2, [r1]
 8003610:	617b      	str	r3, [r7, #20]
   return(result);
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e4      	bne.n	80035e2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800361e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003622:	4619      	mov	r1, r3
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f85b 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800362a:	e03f      	b.n	80036ac <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800362c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00e      	beq.n	8003656 <HAL_UART_IRQHandler+0x56a>
 8003638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800363c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d008      	beq.n	8003656 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800364c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fef0 	bl	8004434 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003654:	e02d      	b.n	80036b2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00e      	beq.n	8003680 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366a:	2b00      	cmp	r3, #0
 800366c:	d008      	beq.n	8003680 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d01c      	beq.n	80036b0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
    }
    return;
 800367e:	e017      	b.n	80036b0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003688:	2b00      	cmp	r3, #0
 800368a:	d012      	beq.n	80036b2 <HAL_UART_IRQHandler+0x5c6>
 800368c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00c      	beq.n	80036b2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fcf9 	bl	8004090 <UART_EndTransmit_IT>
    return;
 800369e:	e008      	b.n	80036b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80036a0:	bf00      	nop
 80036a2:	e006      	b.n	80036b2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80036a4:	bf00      	nop
 80036a6:	e004      	b.n	80036b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80036a8:	bf00      	nop
 80036aa:	e002      	b.n	80036b2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80036ac:	bf00      	nop
 80036ae:	e000      	b.n	80036b2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80036b0:	bf00      	nop
  }

}
 80036b2:	37e8      	adds	r7, #232	; 0xe8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	4b92      	ldr	r3, [pc, #584]	; (800396c <UART_SetConfig+0x274>)
 8003724:	4013      	ands	r3, r2
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	6979      	ldr	r1, [r7, #20]
 800372c:	430b      	orrs	r3, r1
 800372e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	430a      	orrs	r2, r1
 8003768:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a80      	ldr	r2, [pc, #512]	; (8003970 <UART_SetConfig+0x278>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d120      	bne.n	80037b6 <UART_SetConfig+0xbe>
 8003774:	4b7f      	ldr	r3, [pc, #508]	; (8003974 <UART_SetConfig+0x27c>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b03      	cmp	r3, #3
 800377e:	d817      	bhi.n	80037b0 <UART_SetConfig+0xb8>
 8003780:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <UART_SetConfig+0x90>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	08003799 	.word	0x08003799
 800378c:	080037a5 	.word	0x080037a5
 8003790:	080037ab 	.word	0x080037ab
 8003794:	0800379f 	.word	0x0800379f
 8003798:	2301      	movs	r3, #1
 800379a:	77fb      	strb	r3, [r7, #31]
 800379c:	e0b5      	b.n	800390a <UART_SetConfig+0x212>
 800379e:	2302      	movs	r3, #2
 80037a0:	77fb      	strb	r3, [r7, #31]
 80037a2:	e0b2      	b.n	800390a <UART_SetConfig+0x212>
 80037a4:	2304      	movs	r3, #4
 80037a6:	77fb      	strb	r3, [r7, #31]
 80037a8:	e0af      	b.n	800390a <UART_SetConfig+0x212>
 80037aa:	2308      	movs	r3, #8
 80037ac:	77fb      	strb	r3, [r7, #31]
 80037ae:	e0ac      	b.n	800390a <UART_SetConfig+0x212>
 80037b0:	2310      	movs	r3, #16
 80037b2:	77fb      	strb	r3, [r7, #31]
 80037b4:	e0a9      	b.n	800390a <UART_SetConfig+0x212>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6f      	ldr	r2, [pc, #444]	; (8003978 <UART_SetConfig+0x280>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d124      	bne.n	800380a <UART_SetConfig+0x112>
 80037c0:	4b6c      	ldr	r3, [pc, #432]	; (8003974 <UART_SetConfig+0x27c>)
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037cc:	d011      	beq.n	80037f2 <UART_SetConfig+0xfa>
 80037ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037d2:	d817      	bhi.n	8003804 <UART_SetConfig+0x10c>
 80037d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037d8:	d011      	beq.n	80037fe <UART_SetConfig+0x106>
 80037da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037de:	d811      	bhi.n	8003804 <UART_SetConfig+0x10c>
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <UART_SetConfig+0xf4>
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e8:	d006      	beq.n	80037f8 <UART_SetConfig+0x100>
 80037ea:	e00b      	b.n	8003804 <UART_SetConfig+0x10c>
 80037ec:	2300      	movs	r3, #0
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e08b      	b.n	800390a <UART_SetConfig+0x212>
 80037f2:	2302      	movs	r3, #2
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e088      	b.n	800390a <UART_SetConfig+0x212>
 80037f8:	2304      	movs	r3, #4
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	e085      	b.n	800390a <UART_SetConfig+0x212>
 80037fe:	2308      	movs	r3, #8
 8003800:	77fb      	strb	r3, [r7, #31]
 8003802:	e082      	b.n	800390a <UART_SetConfig+0x212>
 8003804:	2310      	movs	r3, #16
 8003806:	77fb      	strb	r3, [r7, #31]
 8003808:	e07f      	b.n	800390a <UART_SetConfig+0x212>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a5b      	ldr	r2, [pc, #364]	; (800397c <UART_SetConfig+0x284>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d124      	bne.n	800385e <UART_SetConfig+0x166>
 8003814:	4b57      	ldr	r3, [pc, #348]	; (8003974 <UART_SetConfig+0x27c>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003818:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800381c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003820:	d011      	beq.n	8003846 <UART_SetConfig+0x14e>
 8003822:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003826:	d817      	bhi.n	8003858 <UART_SetConfig+0x160>
 8003828:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800382c:	d011      	beq.n	8003852 <UART_SetConfig+0x15a>
 800382e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003832:	d811      	bhi.n	8003858 <UART_SetConfig+0x160>
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <UART_SetConfig+0x148>
 8003838:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800383c:	d006      	beq.n	800384c <UART_SetConfig+0x154>
 800383e:	e00b      	b.n	8003858 <UART_SetConfig+0x160>
 8003840:	2300      	movs	r3, #0
 8003842:	77fb      	strb	r3, [r7, #31]
 8003844:	e061      	b.n	800390a <UART_SetConfig+0x212>
 8003846:	2302      	movs	r3, #2
 8003848:	77fb      	strb	r3, [r7, #31]
 800384a:	e05e      	b.n	800390a <UART_SetConfig+0x212>
 800384c:	2304      	movs	r3, #4
 800384e:	77fb      	strb	r3, [r7, #31]
 8003850:	e05b      	b.n	800390a <UART_SetConfig+0x212>
 8003852:	2308      	movs	r3, #8
 8003854:	77fb      	strb	r3, [r7, #31]
 8003856:	e058      	b.n	800390a <UART_SetConfig+0x212>
 8003858:	2310      	movs	r3, #16
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e055      	b.n	800390a <UART_SetConfig+0x212>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a47      	ldr	r2, [pc, #284]	; (8003980 <UART_SetConfig+0x288>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d124      	bne.n	80038b2 <UART_SetConfig+0x1ba>
 8003868:	4b42      	ldr	r3, [pc, #264]	; (8003974 <UART_SetConfig+0x27c>)
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003870:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003874:	d011      	beq.n	800389a <UART_SetConfig+0x1a2>
 8003876:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800387a:	d817      	bhi.n	80038ac <UART_SetConfig+0x1b4>
 800387c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003880:	d011      	beq.n	80038a6 <UART_SetConfig+0x1ae>
 8003882:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003886:	d811      	bhi.n	80038ac <UART_SetConfig+0x1b4>
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <UART_SetConfig+0x19c>
 800388c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003890:	d006      	beq.n	80038a0 <UART_SetConfig+0x1a8>
 8003892:	e00b      	b.n	80038ac <UART_SetConfig+0x1b4>
 8003894:	2300      	movs	r3, #0
 8003896:	77fb      	strb	r3, [r7, #31]
 8003898:	e037      	b.n	800390a <UART_SetConfig+0x212>
 800389a:	2302      	movs	r3, #2
 800389c:	77fb      	strb	r3, [r7, #31]
 800389e:	e034      	b.n	800390a <UART_SetConfig+0x212>
 80038a0:	2304      	movs	r3, #4
 80038a2:	77fb      	strb	r3, [r7, #31]
 80038a4:	e031      	b.n	800390a <UART_SetConfig+0x212>
 80038a6:	2308      	movs	r3, #8
 80038a8:	77fb      	strb	r3, [r7, #31]
 80038aa:	e02e      	b.n	800390a <UART_SetConfig+0x212>
 80038ac:	2310      	movs	r3, #16
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e02b      	b.n	800390a <UART_SetConfig+0x212>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a33      	ldr	r2, [pc, #204]	; (8003984 <UART_SetConfig+0x28c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d124      	bne.n	8003906 <UART_SetConfig+0x20e>
 80038bc:	4b2d      	ldr	r3, [pc, #180]	; (8003974 <UART_SetConfig+0x27c>)
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80038c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038c8:	d011      	beq.n	80038ee <UART_SetConfig+0x1f6>
 80038ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038ce:	d817      	bhi.n	8003900 <UART_SetConfig+0x208>
 80038d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038d4:	d011      	beq.n	80038fa <UART_SetConfig+0x202>
 80038d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80038da:	d811      	bhi.n	8003900 <UART_SetConfig+0x208>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <UART_SetConfig+0x1f0>
 80038e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038e4:	d006      	beq.n	80038f4 <UART_SetConfig+0x1fc>
 80038e6:	e00b      	b.n	8003900 <UART_SetConfig+0x208>
 80038e8:	2300      	movs	r3, #0
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e00d      	b.n	800390a <UART_SetConfig+0x212>
 80038ee:	2302      	movs	r3, #2
 80038f0:	77fb      	strb	r3, [r7, #31]
 80038f2:	e00a      	b.n	800390a <UART_SetConfig+0x212>
 80038f4:	2304      	movs	r3, #4
 80038f6:	77fb      	strb	r3, [r7, #31]
 80038f8:	e007      	b.n	800390a <UART_SetConfig+0x212>
 80038fa:	2308      	movs	r3, #8
 80038fc:	77fb      	strb	r3, [r7, #31]
 80038fe:	e004      	b.n	800390a <UART_SetConfig+0x212>
 8003900:	2310      	movs	r3, #16
 8003902:	77fb      	strb	r3, [r7, #31]
 8003904:	e001      	b.n	800390a <UART_SetConfig+0x212>
 8003906:	2310      	movs	r3, #16
 8003908:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003912:	d16b      	bne.n	80039ec <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003914:	7ffb      	ldrb	r3, [r7, #31]
 8003916:	2b08      	cmp	r3, #8
 8003918:	d838      	bhi.n	800398c <UART_SetConfig+0x294>
 800391a:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <UART_SetConfig+0x228>)
 800391c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003920:	08003945 	.word	0x08003945
 8003924:	0800394d 	.word	0x0800394d
 8003928:	08003955 	.word	0x08003955
 800392c:	0800398d 	.word	0x0800398d
 8003930:	0800395b 	.word	0x0800395b
 8003934:	0800398d 	.word	0x0800398d
 8003938:	0800398d 	.word	0x0800398d
 800393c:	0800398d 	.word	0x0800398d
 8003940:	08003963 	.word	0x08003963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003944:	f7fe ff4e 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 8003948:	61b8      	str	r0, [r7, #24]
        break;
 800394a:	e024      	b.n	8003996 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800394c:	f7fe ff6c 	bl	8002828 <HAL_RCC_GetPCLK2Freq>
 8003950:	61b8      	str	r0, [r7, #24]
        break;
 8003952:	e020      	b.n	8003996 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003954:	4b0c      	ldr	r3, [pc, #48]	; (8003988 <UART_SetConfig+0x290>)
 8003956:	61bb      	str	r3, [r7, #24]
        break;
 8003958:	e01d      	b.n	8003996 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800395a:	f7fe fee3 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 800395e:	61b8      	str	r0, [r7, #24]
        break;
 8003960:	e019      	b.n	8003996 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003966:	61bb      	str	r3, [r7, #24]
        break;
 8003968:	e015      	b.n	8003996 <UART_SetConfig+0x29e>
 800396a:	bf00      	nop
 800396c:	efff69f3 	.word	0xefff69f3
 8003970:	40013800 	.word	0x40013800
 8003974:	40021000 	.word	0x40021000
 8003978:	40004400 	.word	0x40004400
 800397c:	40004800 	.word	0x40004800
 8003980:	40004c00 	.word	0x40004c00
 8003984:	40005000 	.word	0x40005000
 8003988:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	77bb      	strb	r3, [r7, #30]
        break;
 8003994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d073      	beq.n	8003a84 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	005a      	lsls	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	085b      	lsrs	r3, r3, #1
 80039a6:	441a      	add	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b0f      	cmp	r3, #15
 80039b6:	d916      	bls.n	80039e6 <UART_SetConfig+0x2ee>
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039be:	d212      	bcs.n	80039e6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	f023 030f 	bic.w	r3, r3, #15
 80039c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	085b      	lsrs	r3, r3, #1
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	89fb      	ldrh	r3, [r7, #14]
 80039d8:	4313      	orrs	r3, r2
 80039da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	89fa      	ldrh	r2, [r7, #14]
 80039e2:	60da      	str	r2, [r3, #12]
 80039e4:	e04e      	b.n	8003a84 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	77bb      	strb	r3, [r7, #30]
 80039ea:	e04b      	b.n	8003a84 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039ec:	7ffb      	ldrb	r3, [r7, #31]
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d827      	bhi.n	8003a42 <UART_SetConfig+0x34a>
 80039f2:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <UART_SetConfig+0x300>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a1d 	.word	0x08003a1d
 80039fc:	08003a25 	.word	0x08003a25
 8003a00:	08003a2d 	.word	0x08003a2d
 8003a04:	08003a43 	.word	0x08003a43
 8003a08:	08003a33 	.word	0x08003a33
 8003a0c:	08003a43 	.word	0x08003a43
 8003a10:	08003a43 	.word	0x08003a43
 8003a14:	08003a43 	.word	0x08003a43
 8003a18:	08003a3b 	.word	0x08003a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f7fe fee2 	bl	80027e4 <HAL_RCC_GetPCLK1Freq>
 8003a20:	61b8      	str	r0, [r7, #24]
        break;
 8003a22:	e013      	b.n	8003a4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a24:	f7fe ff00 	bl	8002828 <HAL_RCC_GetPCLK2Freq>
 8003a28:	61b8      	str	r0, [r7, #24]
        break;
 8003a2a:	e00f      	b.n	8003a4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <UART_SetConfig+0x3a4>)
 8003a2e:	61bb      	str	r3, [r7, #24]
        break;
 8003a30:	e00c      	b.n	8003a4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a32:	f7fe fe77 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 8003a36:	61b8      	str	r0, [r7, #24]
        break;
 8003a38:	e008      	b.n	8003a4c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3e:	61bb      	str	r3, [r7, #24]
        break;
 8003a40:	e004      	b.n	8003a4c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	77bb      	strb	r3, [r7, #30]
        break;
 8003a4a:	bf00      	nop
    }

    if (pclk != 0U)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d018      	beq.n	8003a84 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	085a      	lsrs	r2, r3, #1
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	441a      	add	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b0f      	cmp	r3, #15
 8003a6a:	d909      	bls.n	8003a80 <UART_SetConfig+0x388>
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a72:	d205      	bcs.n	8003a80 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	60da      	str	r2, [r3, #12]
 8003a7e:	e001      	b.n	8003a84 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a90:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3720      	adds	r7, #32
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	007a1200 	.word	0x007a1200

08003aa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00a      	beq.n	8003b0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	f003 0310 	and.w	r3, r3, #16
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00a      	beq.n	8003b52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01a      	beq.n	8003bb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b9e:	d10a      	bne.n	8003bb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	605a      	str	r2, [r3, #4]
  }
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b098      	sub	sp, #96	; 0x60
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bf4:	f7fd f866 	bl	8000cc4 <HAL_GetTick>
 8003bf8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d12e      	bne.n	8003c66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c10:	2200      	movs	r2, #0
 8003c12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f88c 	bl	8003d34 <UART_WaitOnFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d021      	beq.n	8003c66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2a:	e853 3f00 	ldrex	r3, [r3]
 8003c2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c36:	653b      	str	r3, [r7, #80]	; 0x50
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c40:	647b      	str	r3, [r7, #68]	; 0x44
 8003c42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c48:	e841 2300 	strex	r3, r2, [r1]
 8003c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1e6      	bne.n	8003c22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e062      	b.n	8003d2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d149      	bne.n	8003d08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f856 	bl	8003d34 <UART_WaitOnFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d03c      	beq.n	8003d08 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	623b      	str	r3, [r7, #32]
   return(result);
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cac:	633b      	str	r3, [r7, #48]	; 0x30
 8003cae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e6      	bne.n	8003c8e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 0301 	bic.w	r3, r3, #1
 8003cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	3308      	adds	r3, #8
 8003cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ce0:	61fa      	str	r2, [r7, #28]
 8003ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce4:	69b9      	ldr	r1, [r7, #24]
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	e841 2300 	strex	r3, r2, [r1]
 8003cec:	617b      	str	r3, [r7, #20]
   return(result);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1e5      	bne.n	8003cc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e011      	b.n	8003d2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2220      	movs	r2, #32
 8003d0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3758      	adds	r7, #88	; 0x58
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d44:	e04f      	b.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4c:	d04b      	beq.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7fc ffb9 	bl	8000cc4 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d302      	bcc.n	8003d64 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e04e      	b.n	8003e06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d037      	beq.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2b80      	cmp	r3, #128	; 0x80
 8003d7a:	d034      	beq.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d031      	beq.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d110      	bne.n	8003db2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2208      	movs	r2, #8
 8003d96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f8ff 	bl	8003f9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2208      	movs	r2, #8
 8003da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e029      	b.n	8003e06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc0:	d111      	bne.n	8003de6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 f8e5 	bl	8003f9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e00f      	b.n	8003e06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4013      	ands	r3, r2
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	bf0c      	ite	eq
 8003df6:	2301      	moveq	r3, #1
 8003df8:	2300      	movne	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d0a0      	beq.n	8003d46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b097      	sub	sp, #92	; 0x5c
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	88fa      	ldrh	r2, [r7, #6]
 8003e28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	88fa      	ldrh	r2, [r7, #6]
 8003e30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e42:	d10e      	bne.n	8003e62 <UART_Start_Receive_IT+0x52>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <UART_Start_Receive_IT+0x48>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e56:	e02d      	b.n	8003eb4 <UART_Start_Receive_IT+0xa4>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	22ff      	movs	r2, #255	; 0xff
 8003e5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e60:	e028      	b.n	8003eb4 <UART_Start_Receive_IT+0xa4>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10d      	bne.n	8003e86 <UART_Start_Receive_IT+0x76>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d104      	bne.n	8003e7c <UART_Start_Receive_IT+0x6c>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	22ff      	movs	r2, #255	; 0xff
 8003e76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e7a:	e01b      	b.n	8003eb4 <UART_Start_Receive_IT+0xa4>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	227f      	movs	r2, #127	; 0x7f
 8003e80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e84:	e016      	b.n	8003eb4 <UART_Start_Receive_IT+0xa4>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e8e:	d10d      	bne.n	8003eac <UART_Start_Receive_IT+0x9c>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d104      	bne.n	8003ea2 <UART_Start_Receive_IT+0x92>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	227f      	movs	r2, #127	; 0x7f
 8003e9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ea0:	e008      	b.n	8003eb4 <UART_Start_Receive_IT+0xa4>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	223f      	movs	r2, #63	; 0x3f
 8003ea6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003eaa:	e003      	b.n	8003eb4 <UART_Start_Receive_IT+0xa4>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2222      	movs	r2, #34	; 0x22
 8003ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3308      	adds	r3, #8
 8003eca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ece:	e853 3f00 	ldrex	r3, [r3]
 8003ed2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	657b      	str	r3, [r7, #84]	; 0x54
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ee4:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ee6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003eea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ef2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e5      	bne.n	8003ec4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f00:	d107      	bne.n	8003f12 <UART_Start_Receive_IT+0x102>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4a21      	ldr	r2, [pc, #132]	; (8003f94 <UART_Start_Receive_IT+0x184>)
 8003f0e:	669a      	str	r2, [r3, #104]	; 0x68
 8003f10:	e002      	b.n	8003f18 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4a20      	ldr	r2, [pc, #128]	; (8003f98 <UART_Start_Receive_IT+0x188>)
 8003f16:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d019      	beq.n	8003f54 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	e853 3f00 	ldrex	r3, [r3]
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003f34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f40:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f46:	e841 2300 	strex	r3, r2, [r1]
 8003f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1e6      	bne.n	8003f20 <UART_Start_Receive_IT+0x110>
 8003f52:	e018      	b.n	8003f86 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	613b      	str	r3, [r7, #16]
   return(result);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f043 0320 	orr.w	r3, r3, #32
 8003f68:	653b      	str	r3, [r7, #80]	; 0x50
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f72:	623b      	str	r3, [r7, #32]
 8003f74:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	69f9      	ldr	r1, [r7, #28]
 8003f78:	6a3a      	ldr	r2, [r7, #32]
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e6      	bne.n	8003f54 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	375c      	adds	r7, #92	; 0x5c
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	0800428d 	.word	0x0800428d
 8003f98:	080040e5 	.word	0x080040e5

08003f9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b095      	sub	sp, #84	; 0x54
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fac:	e853 3f00 	ldrex	r3, [r3]
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc2:	643b      	str	r3, [r7, #64]	; 0x40
 8003fc4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e6      	bne.n	8003fa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3308      	adds	r3, #8
 8003fdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	e853 3f00 	ldrex	r3, [r3]
 8003fe4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	f023 0301 	bic.w	r3, r3, #1
 8003fec:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ffe:	e841 2300 	strex	r3, r2, [r1]
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1e5      	bne.n	8003fd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400e:	2b01      	cmp	r3, #1
 8004010:	d118      	bne.n	8004044 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	e853 3f00 	ldrex	r3, [r3]
 800401e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f023 0310 	bic.w	r3, r3, #16
 8004026:	647b      	str	r3, [r7, #68]	; 0x44
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004034:	6979      	ldr	r1, [r7, #20]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	e841 2300 	strex	r3, r2, [r1]
 800403c:	613b      	str	r3, [r7, #16]
   return(result);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e6      	bne.n	8004012 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2220      	movs	r2, #32
 8004048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004058:	bf00      	nop
 800405a:	3754      	adds	r7, #84	; 0x54
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7ff fb22 	bl	80036cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	61bb      	str	r3, [r7, #24]
 80040b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6979      	ldr	r1, [r7, #20]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	613b      	str	r3, [r7, #16]
   return(result);
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e6      	bne.n	8004098 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff faee 	bl	80036b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040dc:	bf00      	nop
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b09c      	sub	sp, #112	; 0x70
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040f2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040fc:	2b22      	cmp	r3, #34	; 0x22
 80040fe:	f040 80b9 	bne.w	8004274 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004108:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800410c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004110:	b2d9      	uxtb	r1, r3
 8004112:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004116:	b2da      	uxtb	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411c:	400a      	ands	r2, r1
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004132:	b29b      	uxth	r3, r3
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	f040 809c 	bne.w	8004284 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800415a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800415c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004160:	66bb      	str	r3, [r7, #104]	; 0x68
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	461a      	mov	r2, r3
 8004168:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800416a:	65bb      	str	r3, [r7, #88]	; 0x58
 800416c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e6      	bne.n	800414c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3308      	adds	r3, #8
 8004184:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800418e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	667b      	str	r3, [r7, #100]	; 0x64
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3308      	adds	r3, #8
 800419c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800419e:	647a      	str	r2, [r7, #68]	; 0x44
 80041a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e5      	bne.n	800417e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d018      	beq.n	8004206 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	623b      	str	r3, [r7, #32]
   return(result);
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041e8:	663b      	str	r3, [r7, #96]	; 0x60
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041f2:	633b      	str	r3, [r7, #48]	; 0x30
 80041f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e6      	bne.n	80041d4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420a:	2b01      	cmp	r3, #1
 800420c:	d12e      	bne.n	800426c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	60fb      	str	r3, [r7, #12]
   return(result);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f023 0310 	bic.w	r3, r3, #16
 8004228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004232:	61fb      	str	r3, [r7, #28]
 8004234:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	69b9      	ldr	r1, [r7, #24]
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	e841 2300 	strex	r3, r2, [r1]
 800423e:	617b      	str	r3, [r7, #20]
   return(result);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1e6      	bne.n	8004214 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	2b10      	cmp	r3, #16
 8004252:	d103      	bne.n	800425c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2210      	movs	r2, #16
 800425a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004262:	4619      	mov	r1, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff fa3b 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800426a:	e00b      	b.n	8004284 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7fc fc6d 	bl	8000b4c <HAL_UART_RxCpltCallback>
}
 8004272:	e007      	b.n	8004284 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0208 	orr.w	r2, r2, #8
 8004282:	619a      	str	r2, [r3, #24]
}
 8004284:	bf00      	nop
 8004286:	3770      	adds	r7, #112	; 0x70
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b09c      	sub	sp, #112	; 0x70
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800429a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042a4:	2b22      	cmp	r3, #34	; 0x22
 80042a6:	f040 80b9 	bne.w	800441c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80042ba:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80042be:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80042c2:	4013      	ands	r3, r2
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	1c9a      	adds	r2, r3, #2
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f040 809c 	bne.w	800442c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004304:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004308:	667b      	str	r3, [r7, #100]	; 0x64
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004312:	657b      	str	r3, [r7, #84]	; 0x54
 8004314:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004318:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e6      	bne.n	80042f4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3308      	adds	r3, #8
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	663b      	str	r3, [r7, #96]	; 0x60
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3308      	adds	r3, #8
 8004344:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004346:	643a      	str	r2, [r7, #64]	; 0x40
 8004348:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800434c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d018      	beq.n	80043ae <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	61fb      	str	r3, [r7, #28]
   return(result);
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004390:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800439c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e6      	bne.n	800437c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d12e      	bne.n	8004414 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	e853 3f00 	ldrex	r3, [r3]
 80043c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f023 0310 	bic.w	r3, r3, #16
 80043d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043da:	61bb      	str	r3, [r7, #24]
 80043dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043de:	6979      	ldr	r1, [r7, #20]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	e841 2300 	strex	r3, r2, [r1]
 80043e6:	613b      	str	r3, [r7, #16]
   return(result);
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1e6      	bne.n	80043bc <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d103      	bne.n	8004404 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2210      	movs	r2, #16
 8004402:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800440a:	4619      	mov	r1, r3
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7ff f967 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004412:	e00b      	b.n	800442c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7fc fb99 	bl	8000b4c <HAL_UART_RxCpltCallback>
}
 800441a:	e007      	b.n	800442c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0208 	orr.w	r2, r2, #8
 800442a:	619a      	str	r2, [r3, #24]
}
 800442c:	bf00      	nop
 800442e:	3770      	adds	r7, #112	; 0x70
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <memset>:
 8004448:	4402      	add	r2, r0
 800444a:	4603      	mov	r3, r0
 800444c:	4293      	cmp	r3, r2
 800444e:	d100      	bne.n	8004452 <memset+0xa>
 8004450:	4770      	bx	lr
 8004452:	f803 1b01 	strb.w	r1, [r3], #1
 8004456:	e7f9      	b.n	800444c <memset+0x4>

08004458 <__libc_init_array>:
 8004458:	b570      	push	{r4, r5, r6, lr}
 800445a:	4d0d      	ldr	r5, [pc, #52]	; (8004490 <__libc_init_array+0x38>)
 800445c:	4c0d      	ldr	r4, [pc, #52]	; (8004494 <__libc_init_array+0x3c>)
 800445e:	1b64      	subs	r4, r4, r5
 8004460:	10a4      	asrs	r4, r4, #2
 8004462:	2600      	movs	r6, #0
 8004464:	42a6      	cmp	r6, r4
 8004466:	d109      	bne.n	800447c <__libc_init_array+0x24>
 8004468:	4d0b      	ldr	r5, [pc, #44]	; (8004498 <__libc_init_array+0x40>)
 800446a:	4c0c      	ldr	r4, [pc, #48]	; (800449c <__libc_init_array+0x44>)
 800446c:	f000 f826 	bl	80044bc <_init>
 8004470:	1b64      	subs	r4, r4, r5
 8004472:	10a4      	asrs	r4, r4, #2
 8004474:	2600      	movs	r6, #0
 8004476:	42a6      	cmp	r6, r4
 8004478:	d105      	bne.n	8004486 <__libc_init_array+0x2e>
 800447a:	bd70      	pop	{r4, r5, r6, pc}
 800447c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004480:	4798      	blx	r3
 8004482:	3601      	adds	r6, #1
 8004484:	e7ee      	b.n	8004464 <__libc_init_array+0xc>
 8004486:	f855 3b04 	ldr.w	r3, [r5], #4
 800448a:	4798      	blx	r3
 800448c:	3601      	adds	r6, #1
 800448e:	e7f2      	b.n	8004476 <__libc_init_array+0x1e>
 8004490:	0800450c 	.word	0x0800450c
 8004494:	0800450c 	.word	0x0800450c
 8004498:	0800450c 	.word	0x0800450c
 800449c:	08004510 	.word	0x08004510

080044a0 <memcpy>:
 80044a0:	440a      	add	r2, r1
 80044a2:	4291      	cmp	r1, r2
 80044a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80044a8:	d100      	bne.n	80044ac <memcpy+0xc>
 80044aa:	4770      	bx	lr
 80044ac:	b510      	push	{r4, lr}
 80044ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044b6:	4291      	cmp	r1, r2
 80044b8:	d1f9      	bne.n	80044ae <memcpy+0xe>
 80044ba:	bd10      	pop	{r4, pc}

080044bc <_init>:
 80044bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044be:	bf00      	nop
 80044c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c2:	bc08      	pop	{r3}
 80044c4:	469e      	mov	lr, r3
 80044c6:	4770      	bx	lr

080044c8 <_fini>:
 80044c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ca:	bf00      	nop
 80044cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ce:	bc08      	pop	{r3}
 80044d0:	469e      	mov	lr, r3
 80044d2:	4770      	bx	lr
